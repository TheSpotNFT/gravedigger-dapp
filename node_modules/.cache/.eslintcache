[{"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\index.js":"1","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\App.js":"2","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\reportWebVitals.js":"3","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Authenticate.jsx":"4","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Nav.jsx":"5","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Footer.jsx":"6","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Board.jsx":"7","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Ded.jsx":"8","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\SpotEcosystem.jsx":"9","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\team.jsx":"10","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\roadmap.jsx":"11","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\helpers\\Web3Modal.jsx":"12","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\metadata.jsx":"13","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Logout.jsx":"14","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Card.jsx":"15","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\SetApproval.jsx":"16","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Engrave.jsx":"17","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MintCollection.jsx":"18","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TeamCard.jsx":"19","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\teamData.jsx":"20","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\TombstoneContract.js":"21","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\EngraverContract.js":"22","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Unnamed.jsx":"23","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedMint.jsx":"24","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\unnamedCardData.jsx":"25","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedMetaData.jsx":"26","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamednftContract.js":"27","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedBrandedContract.js":"28","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Main.js":"29","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\learning.js":"30","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Staking.js":"31","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\AnalogCollection.js":"32","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\StakingCollections.js":"33","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\AnalogNfts.js":"34","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\StakingCards.jsx":"35","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\AnalogCards.jsx":"36","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\StakingAbi.js":"37","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\AnalogAbi.js":"38","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\tombstoneTraits.jsx":"39","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Goatd.jsx":"40","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\goatdTraits.jsx":"41","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\GoatdMint.jsx":"42","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\GoatdContract.js":"43","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\sendNFTombstoned.jsx":"44","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\NFTombstonedContract.js":"45","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\ScribbleCustoms.jsx":"46","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleMint.jsx":"47","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\traits.jsx":"48","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\ScribbleUpdateCustoms.jsx":"49","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\FileUpload.js":"50","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleUpdateMeta.jsx":"51","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\scribbleCustoms.jsx":"52","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleCard.jsx":"53","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\ScribbleContract.js":"54","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleCard1.jsx":"55","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\GoatdCard.jsx":"56","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MainCard.jsx":"57","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\NotActiveCard.jsx":"58","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TombStoneCard.jsx":"59","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedCard.jsx":"60"},{"size":257,"mtime":1669259820015,"results":"61","hashOfConfig":"62"},{"size":8425,"mtime":1669609081925,"results":"63","hashOfConfig":"62"},{"size":375,"mtime":1666830277814,"results":"64","hashOfConfig":"62"},{"size":779,"mtime":1666830277794,"results":"65","hashOfConfig":"62"},{"size":2990,"mtime":1670114661818,"results":"66","hashOfConfig":"62"},{"size":201,"mtime":1667362206041,"results":"67","hashOfConfig":"62"},{"size":31855,"mtime":1670130040307,"results":"68","hashOfConfig":"62"},{"size":6487,"mtime":1669173527421,"results":"69","hashOfConfig":"62"},{"size":2501,"mtime":1666830277799,"results":"70","hashOfConfig":"62"},{"size":984,"mtime":1666830277799,"results":"71","hashOfConfig":"62"},{"size":4523,"mtime":1666830277799,"results":"72","hashOfConfig":"62"},{"size":730,"mtime":1666830277803,"results":"73","hashOfConfig":"62"},{"size":2760283,"mtime":1666830277814,"results":"74","hashOfConfig":"62"},{"size":1610,"mtime":1670052853999,"results":"75","hashOfConfig":"62"},{"size":579,"mtime":1670043484118,"results":"76","hashOfConfig":"62"},{"size":2636,"mtime":1666830277797,"results":"77","hashOfConfig":"62"},{"size":5961,"mtime":1669174834741,"results":"78","hashOfConfig":"62"},{"size":3315,"mtime":1666830277797,"results":"79","hashOfConfig":"62"},{"size":1192,"mtime":1666830277797,"results":"80","hashOfConfig":"62"},{"size":1713,"mtime":1666830277799,"results":"81","hashOfConfig":"62"},{"size":13270,"mtime":1666830277795,"results":"82","hashOfConfig":"62"},{"size":7013,"mtime":1666830277795,"results":"83","hashOfConfig":"62"},{"size":24796,"mtime":1670213183660,"results":"84","hashOfConfig":"62"},{"size":16027,"mtime":1669259734044,"results":"85","hashOfConfig":"62"},{"size":439095,"mtime":1670211921541,"results":"86","hashOfConfig":"62"},{"size":3516283,"mtime":1666840242164,"results":"87","hashOfConfig":"62"},{"size":15901,"mtime":1666927721431,"results":"88","hashOfConfig":"62"},{"size":16335,"mtime":1666927768099,"results":"89","hashOfConfig":"62"},{"size":5629,"mtime":1670213860124,"results":"90","hashOfConfig":"62"},{"size":9405,"mtime":1670131344208,"results":"91","hashOfConfig":"62"},{"size":1808,"mtime":1667181240412,"results":"92","hashOfConfig":"62"},{"size":2514,"mtime":1669174378025,"results":"93","hashOfConfig":"62"},{"size":21960,"mtime":1667181239731,"results":"94","hashOfConfig":"62"},{"size":14410,"mtime":1667181239730,"results":"95","hashOfConfig":"62"},{"size":15966,"mtime":1669260704687,"results":"96","hashOfConfig":"62"},{"size":5030,"mtime":1669173960741,"results":"97","hashOfConfig":"62"},{"size":13684,"mtime":1667181240405,"results":"98","hashOfConfig":"62"},{"size":19099,"mtime":1667189871065,"results":"99","hashOfConfig":"62"},{"size":86201,"mtime":1666830279637,"results":"100","hashOfConfig":"62"},{"size":27024,"mtime":1670128870291,"results":"101","hashOfConfig":"62"},{"size":39757,"mtime":1655958332056,"results":"102","hashOfConfig":"62"},{"size":5802,"mtime":1669502686609,"results":"103","hashOfConfig":"62"},{"size":11011,"mtime":1666830277795,"results":"104","hashOfConfig":"62"},{"size":7010,"mtime":1670129931739,"results":"105","hashOfConfig":"62"},{"size":10395,"mtime":1667677772694,"results":"106","hashOfConfig":"62"},{"size":24327,"mtime":1670905827376,"results":"107","hashOfConfig":"62"},{"size":6224,"mtime":1669259229436,"results":"108","hashOfConfig":"62"},{"size":78510,"mtime":1669866673606,"results":"109","hashOfConfig":"62"},{"size":21389,"mtime":1670043181729,"results":"110","hashOfConfig":"62"},{"size":2079,"mtime":1667863718304,"results":"111","hashOfConfig":"62"},{"size":6559,"mtime":1669699505699,"results":"112","hashOfConfig":"62"},{"size":18270,"mtime":1667886636051,"results":"113","hashOfConfig":"62"},{"size":666,"mtime":1670114276602,"results":"114","hashOfConfig":"62"},{"size":15398,"mtime":1668920574967,"results":"115","hashOfConfig":"62"},{"size":687,"mtime":1668987032987,"results":"116","hashOfConfig":"62"},{"size":888,"mtime":1670051994870,"results":"117","hashOfConfig":"62"},{"size":1356,"mtime":1670132366612,"results":"118","hashOfConfig":"62"},{"size":1381,"mtime":1670643989471,"results":"119","hashOfConfig":"62"},{"size":579,"mtime":1670132201307,"results":"120","hashOfConfig":"62"},{"size":579,"mtime":1670211776087,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"1nuifj",{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"125"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"125"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"125"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"125"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"125"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"125"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"125"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"125"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"125"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"125"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"125"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"125"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"125"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"125"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"125"},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"125"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":1,"source":"286","usedDeprecatedRules":"125"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"125"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"125"},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"125"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\index.js",[],[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\App.js",["323"],["324"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Nav } from \"./components/Nav\";\r\nimport { Board } from \"./components/pages/Board\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport Roadmap from \"./components/pages/roadmap\";\r\nimport Team from \"./components/pages/team\";\r\nimport Learning from \"./components/pages/learning\";\r\nimport Footer from \"./components/Footer\";\r\nimport Main from \"./components/pages/Main\";\r\nimport AnalogCollection from \"./components/pages/AnalogCollection\"\r\nimport SpotEcosystem from \"./components/pages/SpotEcosystem\";\r\nimport Ded from \"./components/pages/Ded\";\r\nimport {Goatd} from \"./components/pages/Goatd\";\r\nimport Staking from \"./components/pages/Staking\";\r\nimport { Unnamed } from \"./components/pages/Unnamed\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { web3ModalSetup } from \"./helpers/Web3Modal\";\r\nimport { ethers } from \"ethers\";\r\nimport { Scribble } from \"./components/pages/ScribbleCustoms\";\r\nimport { ScribbleUpdate } from \"./components/pages/ScribbleUpdateCustoms\";\r\n\r\n\r\n\r\nfunction App() {\r\n  // minifridge edits\r\n  // using web3Modal to handle login and account logic\r\n  const [account, setAccount] = useState(\"\");\r\n  const [txProcessing, setTxProcessing] = useState(false);\r\n  const [web3Provider, setWeb3Provider] = useState(null);\r\n  const web3Modal = web3ModalSetup();\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (\r\n      web3Provider &&\r\n      web3Provider.provider &&\r\n      typeof web3Provider.provider.disconnect == \"function\"\r\n    ) {\r\n      await web3Provider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setWeb3Provider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", (chainId) => {\r\n      console.log(`Chain changed to -- ${chainId}`);\r\n      setWeb3Provider(new ethers.providers.Web3Provider(provider));\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1);\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`Account changed`);\r\n      setWeb3Provider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(\"Disconnecting...\");\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [setWeb3Provider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal && web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  useEffect(() => {\r\n    const getAddress = async () => {\r\n      if (web3Provider && web3Provider.getSigner()) {\r\n        const newAddress = await web3Provider.getSigner().getAddress();\r\n        setAccount(newAddress);\r\n      }\r\n    };\r\n    getAddress();\r\n  }, [web3Provider]);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App bg-slate-900\">\r\n      <Router>\r\n        <div className=\"bg-slate-900 w-full h-100\">\r\n          <Nav\r\n            account={account}\r\n            web3Modal={web3Modal}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            web3Provider={web3Provider}\r\n            setWeb3Provider={setWeb3Provider}\r\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          />\r\n          <div className=\"flex justify-center items-center gap-2\">\r\n            <Routes>\r\n              <Route\r\n                path=\"/\"\r\n                exact\r\n                element={\r\n                  <Main\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                path=\"/gravedigger\"\r\n                exact\r\n                element={\r\n                  <Board\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                path=\"/scribble\"\r\n                exact\r\n                element={\r\n                  <Scribble\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                path=\"/scribbleupdate\"\r\n                exact\r\n                element={\r\n                  <ScribbleUpdate\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n\r\n              <Route\r\n                path=\"/unnamed\"\r\n                exact\r\n                element={\r\n                  <Unnamed\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                path=\"/goatd\"\r\n                exact\r\n                element={\r\n                  <Goatd\r\n                    account={account}\r\n                    web3Modal={web3Modal}\r\n                    loadWeb3Modal={loadWeb3Modal}\r\n                    web3Provider={web3Provider}\r\n                    setWeb3Provider={setWeb3Provider}\r\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n                    txProcessing={txProcessing}\r\n                    setTxProcessing={setTxProcessing}\r\n                  />\r\n                }\r\n              />\r\n               <Route path=\"/analog\" exact element={<AnalogCollection \r\n            account={account}\r\n            web3Modal={web3Modal}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            web3Provider={web3Provider}\r\n            setWeb3Provider={setWeb3Provider}\r\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}/>} />\r\n\r\n             <Route path=\"/staking\" exact element={<Staking \r\n            account={account}\r\n            web3Modal={web3Modal}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            web3Provider={web3Provider}\r\n            setWeb3Provider={setWeb3Provider}\r\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}/>} />\r\n              <Route path=\"/roadmap\" exact element={<Roadmap />} />\r\n              <Route path=\"/team\" exact element={<Team />} />\r\n              <Route path=\"/ecosystem\" exact element={<SpotEcosystem />} />\r\n              <Route path=\"/ded\" exact element={<Ded account={account} />} />\r\n              <Route path=\"/learning\" exact element={<Learning />}/>\r\n            </Routes>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"footer\">\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\reportWebVitals.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Authenticate.jsx",["325"],[],"import React from 'react';\r\nimport { useMoralis } from 'react-moralis'\r\nimport logo from \"../assets/5.jpg\"\r\n\r\nexport default function Authenticate({account, web3Modal, loadWeb3Modal, web3Provider, setWeb3Provider, logoutOfWeb3Modal}) {\r\n    \r\n  return (\r\n    <div className=\"bg-slate-900 flex w-full h-screen align-middle\">\r\n    <div className=\"m-auto\">\r\n    <img src={logo} className=\"max-w-md\" alt=\"Gravedigger Logo\"></img>\r\n    <div className=\"align-middle px-40 py-10\">\r\n    <button className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n    hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\" onClick={() => loadWeb3Modal()}><b>Authenticate</b></button>\r\n    </div>\r\n    </div>\r\n      </div>\r\n  )\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Nav.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Footer.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Board.jsx",["326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355"],[],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Select from \"react-select\";\r\nimport Card from \"../TombStoneCard\";\r\nimport traits from \"../../tombstoneTraits\";\r\nimport nftombstoneData from \"../../contracts/nftombstoneMetadata.json\";\r\nimport Authenticate from \"../Authenticate\";\r\nimport spotNFTAbi from \"../../contracts/spotNFTAbi.json\";\r\nimport spotTraitsAbi from \"../../contracts/spotTraitsAbi.json\";\r\nimport SetApproval from \"../SetApproval\";\r\nimport Engrave from \"../Engrave\";\r\nimport \"../../Board.css\";\r\nimport nfTombstoneABI from \"../../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport MintCollection from \"../../components/MintCollection\";\r\nimport sendNFT from \"../../components/sendNFTombstoned\";\r\nimport { TOMBSTONE_ADDRESS } from \"../Contracts/TombstoneContract\";\r\nimport SendNFTombstoned from \"../../components/sendNFTombstoned\";\r\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\r\n\r\nexport const Board = ({\r\n  account,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  web3Provider,\r\n  setWeb3Provider,\r\n  logoutOfWeb3Modal,\r\n  txProcessing,\r\n  setTxProcessing,\r\n}) => {\r\n  const isAuthenticated = Boolean(account);\r\n  const nfTombstoneContract = \"0xe3525413c2a15daec57C92234361934f510356b8\"; //change to mainnet address\r\n  const spotNFTContract = \"0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC\";\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [savedImage, setSavedImage] = useState(\"empty image\"); //Saving image for sending to IPFS. This part isn't active yet!\r\n  const nfTombstoneMetaData = nftombstoneData;\r\n\r\n  //Slider\r\n  const slideLeft = () => {\r\n    var slider = document.getElementById('slidernav')\r\n    slider.scrollLeft = slider.scrollLeft - 800\r\n  }\r\n  const slideRight = () => {\r\n    var slider = document.getElementById('slidernav')\r\n    slider.scrollLeft = slider.scrollLeft + 800\r\n  }\r\n\r\n  //for text on canvas\r\n  const [textinput, setTextinput] = useState(\"Gravedigger\");\r\n  const [xInput, setXInput] = useState(\"160\");\r\n  const [yInput, setYInput] = useState(\"260\");\r\n  const [fontSize, setFontSize] = useState(\"30\");\r\n  const [xInputX2, setXInputX2] = useState(\"163\");\r\n  const [yInputX2, setYInputX2] = useState(\"260\");\r\n  const [fontSizeX2, setFontSizeX2] = useState(\"30\");\r\n  const [font, setFont] = useState(\"Gala\");\r\n  const [fontStyle, setFontStyle] = useState(\"normal\");\r\n\r\n  const [textinputText, setTextinputText] = useState(\"A Spot\");\r\n  const [xInputText, setXInputText] = useState(\"198\");\r\n  const [yInputText, setYInputText] = useState(\"287\");\r\n  const [fontSizeText, setFontSizeText] = useState(\"15\");\r\n  const [xInputTextX2, setXInputTextX2] = useState(\"201\");\r\n  const [yInputTextX2, setYInputTextX2] = useState(\"287\");\r\n  const [fontSizeTextX2, setFontSizeTextX2] = useState(\"15\");\r\n  const [fontText, setFontText] = useState(\"Durka\");\r\n  const [fontStyleText, setFontStyleText] = useState(\"normal\");\r\n\r\n  const [textinputText1, setTextinputText1] = useState(\"Production\");\r\n  const [xInputText1, setXInputText1] = useState(\"177\");\r\n  const [yInputText1, setYInputText1] = useState(\"310\");\r\n  const [fontSizeText1, setFontSizeText1] = useState(\"15\");\r\n  const [xInputText1X2, setXInputText1X2] = useState(\"180\");\r\n  const [yInputText1X2, setYInputText1X2] = useState(\"313\");\r\n  const [fontSizeText1X2, setFontSizeText1X2] = useState(\"15\");\r\n  const [fontText1, setFontText1] = useState(\"Durka\");\r\n  const [fontStyleText1, setFontStyleText1] = useState(\"normal\");\r\n\r\n  //Sliders\r\n\r\n  const getBackgroundSize = () => {\r\n    return { backgroundSize: `${(xInput * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize1 = () => {\r\n    return { backgroundSize: `${(yInput * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize2 = () => {\r\n    return { backgroundSize: `${(xInputText * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize3 = () => {\r\n    return { backgroundSize: `${(yInputText * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize4 = () => {\r\n    return { backgroundSize: `${(xInputText1 * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize5 = () => {\r\n    return { backgroundSize: `${(yInputText1 * 100) / 350}% 100%` };\r\n  };\r\n\r\n  //user input text vars\r\n\r\n  const textinputUser = (event) => {\r\n    setTextinput(event.target.value);\r\n  };\r\n  const userFontSize = (event) => {\r\n    setFontSize(event.target.value);\r\n  };\r\n  const textinputUserText = (event) => {\r\n    setTextinputText(event.target.value);\r\n  };\r\n  const userFontSizeText = (event) => {\r\n    setFontSizeText(event.target.value);\r\n  };\r\n  const textinputUserText1 = (event) => {\r\n    setTextinputText1(event.target.value);\r\n  };\r\n  const userFontSizeText1 = (event) => {\r\n    setFontSizeText1(event.target.value);\r\n  };\r\n\r\n  //name font info\r\n  const textFontOptions = [\r\n    { value: \"Comic Sans MS\", label: \"Comic Sans MS\" },\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Sans-serif\", label: \"Sans-serif\" },\r\n    { value: \"Serif\", label: \"Serif\" },\r\n    { value: \"Cambria\", label: \"Cambria\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n\r\n  const textFontStyleOptions = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n\r\n  //epitaph line 1\r\n  const textFontOptionsText = [\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n\r\n  const textFontStyleOptionsText = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n  //epitaph line 2\r\n  const textFontOptionsText1 = [\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n  const textFontStyleOptionsText1 = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n\r\n  const handleChange = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFont(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyle = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyle(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeText = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontText(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyleText = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyleText(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeText1 = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontText1(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyleText1 = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyleText1(selectedOption.value);\r\n  };\r\n\r\n  //For Metadata\r\n  const [tomebstoneBackground, setTombstoneBackground] = useState();\r\n  const [tombstoneBase, setTombstoneBase] = useState();\r\n  const [tombstoneBehind, setTomstoneBehind] = useState();\r\n  const [tombstoneFlair, setTombstoneFlair] = useState();\r\n  const [tombstoneGround, setTombstoneGround] = useState();\r\n  const [tombstoneTop, setTombstoneTop] = useState();\r\n  const [tombstoneId, setTombstoneId] = useState();\r\n  const [name, setName] = useState();\r\n  const [epitaph, setEpitaph] = useState();\r\n  const [epitaph1, setEpitaph1] = useState();\r\n\r\n  {\r\n    /* For Image retrieval */\r\n  }\r\n  const [canvasImage, setCanvasImage] = useState({\r\n    TombStone: \"\",\r\n    Text: \"\",\r\n  });\r\n  {\r\n    /* For Traits retrieval */\r\n  }\r\n  const [chosenTrait, setChosenTrait] = useState({\r\n    TombStone: \"1\",\r\n    TombStoneID: \"1\",\r\n    BackGround: \"\",\r\n    Base: \"\",\r\n    Behind: \"\",\r\n    Flair: \"\",\r\n    Ground: \"\",\r\n    Top: \"\",\r\n    Name: \"\",\r\n    Epitaph: \"\",\r\n  });\r\n\r\n  /*To fetch users nfts\r\n\r\n    function fetchUsersNfts() {\r\n        const options = {\r\n            method: 'GET',\r\n            url: `https://deep-index.moralis.io/api/v2/${userAddress}/nft`,\r\n            params: { chain: 'avalanche', format: 'decimal' },\r\n            headers: { accept: 'application/json', 'X-API-Key': 'test' }\r\n        };\r\n\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n*/\r\n  /*Set an array of save UnnamedNFT traits which are unburnable and available to all.\r\n    const start = 3000;\r\n    const end = 3009;\r\n    const branding = [...Array(end - start + 1).keys()].map(x => x + start);\r\n    */\r\n  {\r\n    /* For retrieval of traits */\r\n  }\r\n  const [walletTraits, setWalletTraits] = useState([]);\r\n  const [apiLoaded, setApiLoaded] = useState(false);\r\n  const [checkMyTraits, setCheckMyTraits] = useState(false);\r\n  const [tombstoneSelected, setTombstoneSelected] = useState(false);\r\n\r\n  async function getTraits() {\r\n    // const options = {\r\n    //   chain: \"0xa869\",\r\n    //   address: account,\r\n    //   token_address: TOMBSTONE_ADDRESS,\r\n    // };\r\n    // Moralis.Web3API.account.getNFTsForContract(options).then((data) => {\r\n    //   const result = data.result;\r\n    //   setWalletTraits(result.map((nft) => nft.token_id));\r\n    //   setApiLoaded(true);\r\n    // });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getTraits = async () => {\r\n      const options = {\r\n        method: \"GET\",\r\n        url: `https://deep-index.moralis.io/api/v2/${account}/nft`,\r\n        params: {\r\n          chain: \"avalanche\",\r\n          format: \"decimal\",\r\n          token_addresses: TOMBSTONE_ADDRESS,\r\n        },\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n        },\r\n      };\r\n      try {\r\n        let response = await axios.request(options);\r\n\r\n        let data = response.data;\r\n        setWalletTraits(data.result.map((nft) => nft.token_id));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    getTraits();\r\n  }, [account]);\r\n\r\n  function valueX2() {\r\n    setFontSizeTextX2(fontSizeText * 2);\r\n    setFontSizeText1X2(fontSizeText1 * 2);\r\n    setFontSizeX2(fontSize * 2);\r\n    setXInputX2(xInput * 2);\r\n    setYInputX2(yInput * 2);\r\n    setXInputTextX2(xInputText * 2);\r\n    setYInputTextX2(yInputText * 2);\r\n    setXInputText1X2(xInputText1 * 2);\r\n    setYInputText1X2(yInputText1 * 2);\r\n  }\r\n\r\n  function updateText() {\r\n    drawImage(canvasImage.TombStone);\r\n  }\r\n\r\n  function updateCanvasTraits(trait) {\r\n    setCanvasImage((prevImage) => ({\r\n      ...prevImage,\r\n      [trait.traitType]: trait.image,\r\n    }));\r\n    setChosenTrait((prevTrait) => ({\r\n      ...prevTrait,\r\n      [trait.traitType]: trait.traitName,\r\n      [trait.traitType + \"ID\"]: trait.id,\r\n    }));\r\n    setTombstoneSelected(true);\r\n  }\r\n\r\n  function createCard(trait) {\r\n    //Building the card here from Card.jsx passing props and simultaneously fetching traits on click.\r\n    return (\r\n      <div\r\n        key={trait.id}\r\n        onClick={() => {\r\n          updateCanvasTraits(trait);\r\n        }}\r\n      >\r\n        {\" \"}\r\n        <Card\r\n          nftName={trait.nftName}\r\n          traitType={trait.traitType}\r\n          traitName={trait.traitName}\r\n          image={trait.image}\r\n          id={trait.id}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // For Searching traits\r\n  const searchText = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  let dataSearch = traits.filter((item) => {\r\n    return Object.keys(item).some((key) =>\r\n      item[key]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(filter.toString().toLowerCase())\r\n    );\r\n  });\r\n  let ownedFilter = traits.filter((item) => {\r\n    if (walletTraits.includes(item.id.toString())) {\r\n      return item;\r\n    }\r\n  });\r\n\r\n  // Putting stuff on Canvas\r\n  const canvas = useRef(null);\r\n  const hiddenCanvas = useRef(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [width, setWidth] = useState(null);\r\n  const { windowWidth } = useState(window.innerWidth);\r\n  const { windowHeight } = useState(window.innerHeight);\r\n  const div = useCallback(\r\n    (node) => {\r\n      if (node !== null) {\r\n        setHeight(node.getBoundingClientRect().height); //set height and width of canvas relative to parent div.\r\n        setWidth(node.getBoundingClientRect().width);\r\n      }\r\n    },\r\n    [windowWidth, windowHeight]\r\n  );\r\n  //visible canvas\r\n  function drawImage(layer) {\r\n    const img = new Image();\r\n    //img.setAttribute('crossOrigin', '*');\r\n    img.src = layer;\r\n    img.onload = () => {\r\n      const ctx = canvas.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(img, 0, 0, 450, 450);\r\n      ctx.font = `${fontStyle} ${fontSize}px ${font}`;\r\n      ctx.fillText(textinput, xInput, yInput, 150);\r\n      ctx.font = `${fontStyleText} ${fontSizeText}px ${fontText}`;\r\n      ctx.fillText(textinputText, xInputText, yInputText, 150);\r\n      ctx.font = `${fontStyleText1} ${fontSizeText1}px ${fontText1}`;\r\n      ctx.fillText(textinputText1, xInputText1, yInputText1, 150);\r\n    };\r\n    //hidden canvas\r\n    const imgHidden = new Image();\r\n    imgHidden.src = layer;\r\n    imgHidden.onload = () => {\r\n      const ctxHidden = hiddenCanvas.current.getContext(\"2d\");\r\n      ctxHidden.clearRect(0, 0, hiddenCanvas.width, hiddenCanvas.height);\r\n      ctxHidden.drawImage(imgHidden, 0, 0, 900, 900);\r\n      ctxHidden.font = `${fontStyle} ${fontSizeX2}px ${font}`;\r\n      ctxHidden.fillText(textinput, xInputX2, yInputX2, 300);\r\n      ctxHidden.font = `${fontStyleText} ${fontSizeTextX2}px ${fontText}`;\r\n      ctxHidden.fillText(textinputText, xInputTextX2, yInputTextX2, 300);\r\n      ctxHidden.font = `${fontStyleText1} ${fontSizeText1X2}px ${fontText1}`;\r\n      ctxHidden.fillText(textinputText1, xInputText1X2, yInputText1X2, 300);\r\n    };\r\n    setName(textinput);\r\n    setEpitaph(textinputText);\r\n    setEpitaph1(textinputText1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    drawImage(canvasImage.TombStone);\r\n    drawImage(canvasImage.Text);\r\n    valueX2();\r\n  }, [\r\n    canvasImage,\r\n    canvas,\r\n    windowWidth,\r\n    windowHeight,\r\n    xInput,\r\n    yInput,\r\n    xInputText,\r\n    yInputText,\r\n    textinput,\r\n    textinputText,\r\n    fontSize,\r\n    fontSizeText,\r\n    textFontOptionsText,\r\n    textFontStyleOptionsText,\r\n    font,\r\n    fontText,\r\n    fontText1,\r\n  ]); //redrawn on changes\r\n\r\n  useEffect(() => {\r\n    updateTraitMetaData();\r\n  }, [chosenTrait]);\r\n\r\n  function updateTraitMetaData() {\r\n    setTombstoneBackground(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[0].value\r\n    );\r\n    setTomstoneBehind(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[1].value\r\n    );\r\n    setTombstoneBase(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[2].value\r\n    );\r\n    setTombstoneFlair(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[3].value\r\n    );\r\n    setTombstoneTop(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[4].value\r\n    );\r\n    setTombstoneGround(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[5].value\r\n    );\r\n    setTombstoneId(chosenTrait.TombStoneID);\r\n  }\r\n\r\n\r\n\r\n  //window scroll\r\n  const [showButton, setShowButton] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.pageYOffset > 300) {\r\n        setShowButton(true);\r\n      } else {\r\n        setShowButton(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth' // for smoothly scrolling\r\n    });\r\n  };\r\n\r\n  function saveImage() {\r\n    const result = new Promise((resolve, reject) => {\r\n      const imageToSave = new Image();\r\n      imageToSave.src = hiddenCanvas.current.toDataURL(\"image/png\", 1.0);\r\n      imageToSave.onload = function () {\r\n        resolve(this.src);\r\n      };\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // Add feature: Filter owned trait cards\r\n  const [ownedCards, setOwnedCards] = useState(true);\r\n  //---------------------------------//\r\n\r\n\r\n  // Main Component Return\r\n  return (\r\n    <div className=\"container flex-auto mx-auto w-full\">\r\n      {/* Canvas Row*/}\r\n      <div className=\"top-20 grid 2xl:grid-cols-2 xl:grid-cols-2 lg:grid-cols-2 md:grid-cols-1 sm:grid-cols-1 gap-4 mt-1 ml-6 sm:p-5 bg-slate-900 lg:pb-3\">\r\n        {/* canvas div */}\r\n\r\n        <div\r\n          className=\"p-1 mb-10 sm:mb-10\"\r\n          ref={div}\r\n          style={{ height: \"30rem\", width: \"30rem\" }}\r\n        >\r\n          <canvas\r\n            ref={canvas}\r\n            width=\"450px\"\r\n            height=\"450px\"\r\n            className=\"mt-1 border-1 border-4 border-slate-500 text-center content-center p-5\"\r\n          />\r\n          <div className=\"text-center pb-2 md: pl-10\">\r\n            <h1 className=\"font-mono text-lg text-yellow-400 pt-1\">\r\n              Gravedigger\r\n            </h1>\r\n          </div>\r\n          <canvas\r\n            ref={hiddenCanvas}\r\n            width=\"900px\"\r\n            height=\"900px\"\r\n            className=\"hidden\"\r\n          />\r\n        </div>\r\n        {/* canvas div ends */}\r\n        {/* Stats div*/}\r\n        <div\r\n          className=\"grow border-dashed border-4 border-slate-500 p-3 pl-5 m-1 text-left col-span-1 w-80 md:mt-10 lg:mt-2 mt-10 sm:mt-10 text-sm\"\r\n          style={{ height: \"27rem\", width: \"22rem\" }}\r\n        >\r\n          {/* Individual Stats */}\r\n          <div className=\"font-mono text-white list-none flex pb-3\">\r\n            <div\r\n              className={`text-${walletTraits.includes(`${chosenTrait.TombStoneID}`)\r\n                ? \"spot-yellow\"\r\n                : \"[red]\"\r\n                } font-bold pr-3 pl-2`}\r\n            >\r\n              TombStone ID:{\" \"}\r\n            </div>\r\n            {chosenTrait.TombStoneID}\r\n          </div>\r\n\r\n          <div className=\"font-mono text-white list-none flex pb-3\">\r\n            <div className=\"text-spot-yellow pl-2 pr-2\">Name: </div>\r\n            {textinput}\r\n          </div>\r\n          <Engrave\r\n            chosenTrait={chosenTrait}\r\n            walletTraits={walletTraits}\r\n            background={tomebstoneBackground}\r\n            behind={tombstoneBehind}\r\n            flair={tombstoneFlair}\r\n            ground={tombstoneGround}\r\n            tombstone={tombstoneBase}\r\n            top={tombstoneTop}\r\n            id={chosenTrait.TombStoneID}\r\n            saveImage={saveImage}\r\n            account={account}\r\n            canvas={chosenTrait}\r\n            savedImage={savedImage}\r\n            name={name}\r\n            epitaph={`${epitaph + \" \" + epitaph1} `}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}\r\n            ownedCards={ownedCards}\r\n            web3Provider={web3Provider}\r\n            tombstoneSelected={tombstoneSelected}\r\n          />\r\n          {/* End of Indiv Stats */}\r\n          {/* Buttons */}\r\n\r\n          <div className=\"font-mono text-white list-none flex pb-3 text-sm pl-2 pt-2\">\r\n            <div className=\"text-[red] pr-2 text-xl\">* </div>\r\n            TombStone not in your wallet.\r\n          </div>\r\n\r\n\r\n          {/* <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={activateTombstone}>Activate Tombstone {chosenTrait.TombStoneID}</button></div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pt-2'>\r\n\r\n                            Activate your tombstone to send ded nfts to it. You may only have 1 tombstone activate at a time.\r\n                        </div>*/}\r\n          <MintCollection\r\n            account={account}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}\r\n          />\r\n          <div className=\"font-mono text-white list-none flex pb-3 text-sm pl-2 pt-2\">\r\n\r\n            Send your NFTombstone to an address and get them NFTombstoned! When they get NFTombstoned they will receive your NFTombstone as a soulbound token!\r\n          </div><div className=\"pr-5\">\r\n            <SendNFTombstoned\r\n              id={chosenTrait.TombStoneID}\r\n              account={account}\r\n              txProcessing={txProcessing}\r\n              setTxProcessing={setTxProcessing}\r\n              chosenTrait={chosenTrait}\r\n            /></div>\r\n          <div className=\"flex pr-2 pt-6\">\r\n            <button\r\n              className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\"\r\n              onClick={() => {\r\n                setOwnedCards(!ownedCards);\r\n              }}\r\n            >\r\n              {!ownedCards ? \"My TombStones\" : \"View All TombStones\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"gap-4 pt-8 pl-2 grid grid-col-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-4\">Name: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinput}\r\n                onChange={textinputUser.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInput}\r\n                  onChange={(e) => setXInput(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInput}\r\n                  onChange={(e) => setYInput(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize1()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSize}\r\n                onChange={userFontSize.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptions}\r\n                onChange={handleChange}\r\n                defaultValue={{ label: \"Gala\", value: \"Gala\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptions}\r\n                onChange={handleChangeStyle}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-1\">Epitaph: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinputText}\r\n                onChange={textinputUserText.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInputText}\r\n                  onChange={(e) => setXInputText(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize2()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInputText}\r\n                  onChange={(e) => setYInputText(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize3()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSizeText}\r\n                onChange={userFontSizeText.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptionsText}\r\n                onChange={handleChangeText}\r\n                defaultValue={{ label: \"Durka\", value: \"Durka\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptionsText}\r\n                onChange={handleChangeStyleText}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-1\">Epitaph: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinputText1}\r\n                onChange={textinputUserText1.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInputText1}\r\n                  onChange={(e) => setXInputText1(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize4()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInputText1}\r\n                  onChange={(e) => setYInputText1(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize5()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSizeText1}\r\n                onChange={userFontSizeText1.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptionsText1}\r\n                onChange={handleChangeText1}\r\n                defaultValue={{ label: \"Durka\", value: \"Durka\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptionsText1}\r\n                onChange={handleChangeStyleText1}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Canvas Row Div Ends*/}\r\n      <div className='flex relative items-center overflow-hidden z-[0]'>\r\n        <MdChevronLeft onClick={slideLeft} size={40} className=' fill-gray-500 hover:scale-110 hover:fill-spot-yellow md:hidden sm:hidden lg:block xl:block 2xl:block' />\r\n        <div id='slidernav' className=\"p-10 flex gap-5 xl:flex-row font-mono text-spot-yellow w-full h-full overflow-x-scroll scroll whitespace-nowrap scroll-smooth scrollbar-hide\">\r\n          {ownedCards ? ownedFilter.map(createCard) : dataSearch.map(createCard)}\r\n        </div>\r\n        <MdChevronRight onClick={slideRight} size={40} className=' fill-gray-500 hover:scale-110 hover:fill-spot-yellow md:hidden sm:hidden lg:block xl:block 2xl:block' /></div>\r\n\r\n      <div className=\"blade text-slate-900\">T</div>\r\n      <div className=\"bombing text-slate-900\">H</div>\r\n      <div className=\"devil text-slate-900\">E</div>\r\n      <div className=\"drip text-slate-900\">S</div>\r\n      <div className=\"durka text-slate-900\">P</div>\r\n      <div className=\"emm text-slate-900\">O</div>\r\n      <div className=\"eternal text-slate-900\">T</div>\r\n      <div className=\"fresh text-slate-900\">2</div>\r\n      <div className=\"gala text-slate-900\">0</div>\r\n      <div className=\"metal text-slate-900\">2</div>\r\n      <div className=\"predator text-slate-900\">2</div>\r\n      <div className=\"simple text-slate-900\">!</div>\r\n      {/*} <div>\r\n        {showButton && (\r\n          <button onClick={scrollToTop} className=\"back-to-top\">\r\n            &#94;\r\n          </button>\r\n        )}\r\n        </div>*/}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Ded.jsx",["356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Card from '../Card';\r\nimport traits from '../../tombstoneTraits';\r\nimport unnamedData from '../../metadata.jsx'\r\nimport Authenticate from '../Authenticate';\r\nimport '../../Board.css'\r\nimport axios from 'axios';\r\n\r\nexport const Ded = ({ account }) => {\r\n    const isAuthenticated = Boolean(account);\r\n    const userAddress = account\r\n    const spotTraitsContract = \"0x6BDAd2A83a8e70F459786a96a0a9159574685c0e\";\r\n    const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n    const [filter, setFilter] = useState('');\r\n\r\n    function fetchUsersNfts() {\r\n        const options = {\r\n            method: 'GET',\r\n            url: `https://deep-index.moralis.io/api/v2/0x32bD2811Fb91BC46756232A0B8c6b2902D7d8763/nft`,\r\n            params: { chain: 'avalanche', format: 'decimal' },\r\n            headers: { accept: 'application/json', 'X-API-Key': 'dHttwdzMWC7XigAxZtqBpTet7Lih3MqBRzUAIjXne0TIhJzXG4wrpdDUmXPPQFXo' }\r\n        };\r\n\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data);\r\n                console.log(response.data.result[10].metadata['image']);\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsersNfts()\r\n\r\n    }\r\n        , [])\r\n\r\n\r\n    {/* For retrieval of traits */ }\r\n    const [walletTraits, setWalletTraits] = useState([])\r\n    const [apiLoaded, setApiLoaded] = useState(false)\r\n    const [checkMyTraits, setCheckMyTraits] = useState(false)\r\n    const unnamedNFTdata = unnamedData;\r\n\r\n    const [chosenTrait, setChosenTrait] = useState({\r\n        TombStone: '1',\r\n        TombStoneID: '1',\r\n        BackGround: '',\r\n        Base: '',\r\n        Behind: '',\r\n        Flair: '',\r\n        Ground: '',\r\n        Top: '',\r\n        Name: '',\r\n        Epitaph: '',\r\n    })\r\n\r\n    function createCard(trait) { //Building the card here from Card.jsx passing props and simultaneously fetching traits on click.\r\n        return (\r\n\r\n            <div key={trait.edition} onClick={() => {\r\n\r\n            }}> <Card\r\n                    nftName={trait.nftName}\r\n                    traitType={trait.traitType}\r\n                    traitName={trait.traitName}\r\n                    image={trait.image}\r\n                    id={trait.id}\r\n                /></div>\r\n        )\r\n    }\r\n\r\n    // For Searching traits\r\n    const searchText = (event) => {\r\n        setFilter(event.target.value);\r\n    }\r\n\r\n\r\n    let dataSearch = traits.filter(item => {\r\n        return Object.keys(item).some(key => item[key].toString().toLowerCase().includes(filter.toString().toLowerCase())\r\n        )\r\n    });\r\n    let ownedFilter = traits.filter(item => {\r\n\r\n        if (walletTraits.includes(item.id.toString())) {\r\n\r\n            return item\r\n        }\r\n\r\n    })\r\n\r\n    // Add feature: Filter owned trait cards\r\n    const [ownedCards, setOwnedCards] = useState(false)\r\n    //---------------------------------//\r\n\r\n\r\n    if (!isAuthenticated) {\r\n        return (\r\n            <Authenticate />\r\n        );\r\n    } else\r\n        // Main Component Return\r\n        return (\r\n            <div className='container flex-auto mx-auto w-full'>\r\n\r\n                {/* Canvas Row*/}\r\n                <div className=\"lg:sticky top-20 grid 2xl:grid-cols-2 xl:grid-cols-2 lg:grid-cols-2 md:grid-cols-1 sm:grid-cols-1 gap-4 mt-1 ml-6 sm:p-5 bg-slate-900 lg:pb-3\">\r\n                    {/* canvas div */}\r\n                    <img className=\"w-full\" src=\"../../tombstoneimages/1.png\"></img>\r\n\r\n                    {/* canvas div ends */}\r\n                    {/* Stats div*/}\r\n                    <div className='grow border-dashed border-4 border-slate-500 p-3 pl-5 m-1 text-left col-span-1 w-80 md:mt-10 lg:mt-2 mt-10 sm:mt-10 text-sm' style={{ height: \"25rem\", width: \"22rem\" }}>\r\n                        {/* Individual Stats */}\r\n                        <div className='font-mono text-white list-none flex pb-3'>\r\n                            <div className=\"text-red font-bold pr-3 pl-2\">TombStone: </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className='font-mono text-white list-none flex pb-3'>\r\n                            <div className='text-spot-yellow pl-2'>Name: </div>\r\n\r\n                        </div>\r\n                        {/* End of Indiv Stats */}\r\n                        {/* Buttons */}\r\n                        <div className=\"pt-1 pb-1 flex\">\r\n\r\n                            {/* <Mint\r\n\r\n                                walletTraits={walletTraits}\r\n\r\n                                userAddress={userAddress}\r\n\r\n\r\n\r\n                            /> */}\r\n                        </div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pl-2 pt-2'>\r\n                            <div className='text-[red] pr-2 text-xl'>* </div>\r\n                            TombStone not in your wallet.\r\n                        </div>\r\n                        <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                                setOwnedCards(!ownedCards)\r\n                            }}>{!ownedCards ? 'My TombStones' : 'View All TombStones'}</button></div>\r\n                        <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\">Activate Tombstone {chosenTrait.TombStoneID}</button></div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pt-2'>\r\n\r\n                            Activate your tombstone to send ded nfts to it. You may only have 1 tombstone activate at a time.\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>{/* Canvas Row Div Ends*/}\r\n                <div className='overflow-y-auto'>\r\n                    <div className=\"p-10 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-6 gap-5 font-mono text-spot-yellow\">\r\n                        {ownedCards ? ownedFilter.map(createCard) : dataSearch.map(createCard)}\r\n                    </div></div>\r\n            </div >\r\n\r\n        )\r\n\r\n}\r\nexport default Ded;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\SpotEcosystem.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\team.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\roadmap.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\helpers\\Web3Modal.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\metadata.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Logout.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Card.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\SetApproval.jsx",["372","373","374","375","376","377","378","379","380","381"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useMoralis, useWeb3ExecuteFunction, useChain } from \"react-moralis\";\r\nimport spotTraitsAbi from '../contracts/spotTraitsAbi.json';\r\n\r\n\r\nfunction SetApproval() {\r\n  //isApprovedForAll(account, operator) - function imported from OpenZeppelin IERC1155\r\n  //setApprovalForAll(operator, approved) - function imported from OpenZeppelin IERC1155\r\n  const spotTraitsContract = \"0x9521807adf320d1cdf87afdf875bf438d1d92d87\";\r\n  const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n    const { account } = useMoralis();\r\n    const { switchNetwork, chainId } = useChain()\r\n    const { data: approvalData, error: approvalError, fetch: approvalFetch, isFetching: approvalFetching, isLoading: approvalLoading } = useWeb3ExecuteFunction({\r\n        abi: spotTraitsAbi,\r\n        contractAddress: spotTraitsContract,\r\n        functionName: \"setApprovalForAll\",\r\n        params: {\r\n        operator: spotNFTContract,\r\n        approved: true\r\n             },\r\n         });\r\n\r\n    const { data: checkApprovedData, error: checkApprovedError, fetch: checkApprovedFetch, isFetching: checkApprovedFetching, isLoading: checkApprovedLoading } = useWeb3ExecuteFunction({\r\n    abi: spotTraitsAbi,\r\n    contractAddress: spotTraitsContract,\r\n    functionName: \"isApprovedForAll\",\r\n    params: {\r\n        account: account,\r\n        operator: spotNFTContract\r\n            },\r\n        });\r\n    const [traitsApproved, setTraitsApproved] = useState(false)\r\n    \r\n    function changeUITrue() {\r\n        setTraitsApproved(true)\r\n    }\r\n    function changeUIFalse() {\r\n        setTraitsApproved(false)\r\n    }\r\n    const handleSuccessfulApproval = async (tx) => {\r\n        await tx.wait(1)\r\n        changeUITrue()\r\n    }\r\n\r\n    useEffect(()=>{\r\n      const checkApproval = async ()=>{\r\n        const result = await checkApprovedFetch();\r\n        if (result) {\r\n          changeUITrue();\r\n        } else changeUIFalse();\r\n      }\r\n      checkApproval()\r\n    },[account, chainId])\r\n  \r\n  \r\n    return (\r\n    <div>\r\n        <button className={!traitsApproved?\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200 hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\":\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 bg-gray-500 text-gray-900 font-mono font-bold text-base\"} \r\n     onClick={async()=>{\r\n     if(traitsApproved){\r\n        return;\r\n     }\r\n     await approvalFetch({\r\n         onSuccess: handleSuccessfulApproval,\r\n     })\r\n     }}>{traitsApproved?'Traits Approved':'Approve My Traits'}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetApproval;","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Engrave.jsx",["382","383","384","385","386","387","388","389","390","391","392","393"],[],"import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport nfTombstoneABI from \"../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport {\r\n  TOMBSTONE_ADDRESS,\r\n  TOMBSTONE_ABI,\r\n} from \"./Contracts/TombstoneContract\";\r\nimport { ENGRAVER_ABI, ENGRAVER_ADDRESS } from \"./Contracts/EngraverContract\";\r\n\r\nexport default function Engrave({\r\n  props,\r\n  chosenTrait,\r\n  walletTraits,\r\n  background,\r\n  behind,\r\n  flair,\r\n  ground,\r\n  tombstone,\r\n  top,\r\n  id,\r\n  saveImage,\r\n  account,\r\n  canvas,\r\n  savedImage,\r\n  name,\r\n  epitaph,\r\n  txProcessing,\r\n  setTxProcessing,\r\n  ownedCards,\r\n  web3Provider,\r\n  tombstoneSelected,\r\n}) {\r\n\r\n  function checkTraits() {\r\n    // let isSafeBG = props.solidBG.some(\r\n    //   (ai) => props.chosenTrait.BackgroundID === ai\r\n    // );\r\n    if (\r\n      walletTraits.includes(String(chosenTrait.BackgroundID)) &&\r\n      walletTraits.includes(String(chosenTrait.BodyID)) &&\r\n      walletTraits.includes(String(chosenTrait.HeadID)) &&\r\n      walletTraits.includes(String(chosenTrait.MouthID)) &&\r\n      walletTraits.includes(String(chosenTrait.EyesID)) &&\r\n      (walletTraits.includes(String(chosenTrait.HeadwearID)) ||\r\n        chosenTrait.HeadwearID === \"599\")\r\n    ) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  async function uploadToMoralis(filename, contents) {\r\n    const options = {\r\n      method: \"POST\",\r\n      url: \"https://deep-index.moralis.io/api/v2/ipfs/uploadFolder\",\r\n      headers: {\r\n        accept: \"application/json\",\r\n        \"content-type\": \"application/json\",\r\n        \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n      },\r\n      data: [{ path: filename, content: contents }],\r\n    };\r\n\r\n    let response = await axios.request(options);\r\n    return response;\r\n  }\r\n\r\n  async function setTokenURI(tokenURI, id) {\r\n    setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (ENGRAVER_ABI && ENGRAVER_ADDRESS && signer) {\r\n          const contract = new Contract(ENGRAVER_ADDRESS, ENGRAVER_ABI, signer);\r\n          let options = {\r\n            value: ethers.utils.parseEther(\".1\"),\r\n          };\r\n          console.log(id);\r\n          console.log(tokenURI);\r\n\r\n          let tx = await contract.engraveTombstone(id, tokenURI);\r\n          console.log(tx.hash);\r\n          props.setTxProcessing(false);\r\n          alert(\r\n            \"Engraved! Refresh your metadata on Campfire, Kalao or Joepegs!\"\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  async function engraveTombstone() {\r\n    setTxProcessing(true);\r\n    try {\r\n      let signature = await web3Provider\r\n        .getSigner()\r\n        .signMessage(\r\n          `Allow The Spot to process metadata upload and token URI setting for token ${id}`\r\n        );\r\n      const base64ImgContents = await saveImage();\r\n      let imgResponse = await uploadToMoralis(\r\n        `${id}-img.png`,\r\n        base64ImgContents\r\n      );\r\n\r\n      let imgURL = imgResponse.data.length > 0 ? imgResponse.data[0].path : \"\";\r\n\r\n      const metadata = {\r\n        name: \"NFTombstone\",\r\n        description: \"Engraved NFTombstone\",\r\n        image: imgURL,\r\n        edition: id,\r\n        attributes: [\r\n          {\r\n            trait_type: \"Background:\",\r\n            value: background,\r\n          },\r\n          {\r\n            trait_type: \"Behind\",\r\n            value: behind,\r\n          },\r\n          {\r\n            trait_type: \"Flair\",\r\n            value: flair,\r\n          },\r\n          {\r\n            trait_type: \"Ground\",\r\n            value: ground,\r\n          },\r\n          {\r\n            trait_type: \"Tombstone\",\r\n            value: tombstone,\r\n          },\r\n          {\r\n            trait_type: \"Top\",\r\n            value: top,\r\n          },\r\n          {\r\n            trait_type: \"Name\",\r\n            value: name,\r\n          },\r\n          {\r\n            trait_type: \"Epitaph\",\r\n            value: epitaph,\r\n          },\r\n        ],\r\n      };\r\n\r\n      let jsonResponse = await uploadToMoralis(`${id}-json.json`, metadata);\r\n\r\n      let jsonURL =\r\n        jsonResponse.data.length > 0 ? jsonResponse.data[0].path : \"\";\r\n\r\n      await setTokenURI(jsonURL, id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  if (txProcessing) {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n          disabled\r\n        >\r\n          <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n            <circle\r\n              className=\"path\"\r\n              cx=\"12\"\r\n              cy=\"15\"\r\n              r=\"10\"\r\n              fill=\"yellow\"\r\n              stroke=\"yellow\"\r\n              strokeWidth=\"2\"\r\n            ></circle>\r\n          </svg>\r\n          Processing...\r\n        </button>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"flex w-full\">\r\n        <div className=\"w-full pr-5 pl-1\">\r\n          <button\r\n            className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base disabled:border-gray-600 disabled:hover:bg-gray-900 disabled:text-gray-600 disabled:hover:text-gray-600\"\r\n            disabled={!ownedCards || !tombstoneSelected}\r\n            onClick={() => engraveTombstone()}\r\n          >\r\n            Engrave\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MintCollection.jsx",["394","395","396","397","398","399","400"],[],"import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport Moralis from \"moralis\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport nfTombstoneABI from \"../contracts/nfTombstoneABI.json\";\r\nimport {\r\n  TOMBSTONE_ADDRESS,\r\n  TOMBSTONE_ABI,\r\n} from \"./Contracts/TombstoneContract\";\r\nimport { Contract, ethers } from \"ethers\";\r\n\r\nexport default function MintCollection(props) {\r\n  const [textinput, setTextinput] = useState(\"1\");\r\n\r\n  const textinputUser = (event) => {\r\n    setTextinput(event.target.value);\r\n  };\r\n\r\n  async function mintNFT() {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (TOMBSTONE_ABI && TOMBSTONE_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            TOMBSTONE_ADDRESS,\r\n            TOMBSTONE_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            // price is 0.666 avax\r\n            value: ethers.utils.parseEther(`${textinput * 0.666}`),\r\n          };\r\n\r\n          let tx = await contract.mint(textinput, options);\r\n          console.log(tx.hash);\r\n          props.setTxProcessing(false);\r\n          alert(\r\n            \"Minted Successfully! View your NFT on Campfire, Kalao or Joepegs!\"\r\n          );\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error on mint\");\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  if (props.txProcessing) {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n          disabled\r\n        >\r\n          <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n            <circle\r\n              className=\"path\"\r\n              cx=\"12\"\r\n              cy=\"15\"\r\n              r=\"10\"\r\n              fill=\"yellow\"\r\n              stroke=\"yellow\"\r\n              strokeWidth=\"2\"\r\n            ></circle>\r\n          </svg>\r\n          Processing...\r\n        </button>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"flex w-full\">\r\n        <div className=\"w-full flex pr-5 pl-1\">\r\n          <div className=\"flex pr-4 pt-2\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"border-2 h-3/4 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 pr-4 w-24\"\r\n              placeholder=\"Amount\"\r\n              value={textinput}\r\n              onChange={textinputUser.bind(this)}\r\n            />{\" \"}\r\n          </div>\r\n          <button\r\n            className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-sm\"\r\n            disabled={props.txProcesssing}\r\n            onClick={() => mintNFT()}\r\n          >\r\n            Mint New Tombstone\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TeamCard.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\teamData.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\TombstoneContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\EngraverContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Unnamed.jsx",["401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedMint.jsx",["426","427","428","429","430","431","432","433","434","435","436","437","438","439","440"],[],"import React, { useEffect, useState } from 'react'\r\nimport { UNNAMEDBRANDING_ABI, UNNAMEDBRANDING_ADDRESS } from './Contracts/UnnamedBrandedContract';\r\nimport unnamedData from '../components/Contracts/UnnamedMetaData';\r\nimport { UNNAMED_ABI, UNNAMED_ADDRESS } from './Contracts/UnnamednftContract';\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\n\r\n\r\nexport default function UnnamedMint({\r\n    props,\r\n    id,\r\n    saveImage,\r\n    account,\r\n    unnamedEyes,\r\n    unnamedMouth,\r\n    unnamedHat,\r\n    unnamedSkin,\r\n    unnamedNose,\r\n    unnamedSpecial,\r\n    unnamedLines,\r\n    unnamedBrand,\r\n    unnamedBackGround,\r\n    unnamedNFTID,\r\n    canvas,\r\n    savedImage,\r\n    name,\r\n    epitaph,\r\n    txProcessing,\r\n    setTxProcessing,\r\n    ownedCards,\r\n    web3Provider,\r\n}) {\r\n    const isAuthenticated = Boolean(account);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const unnamedNFTBrandingContract = \"0xB043aaEb4337EA4BbB20C2ec5D846b00a0825ba5\"; //unnamedbranding mainnet contract\r\n    const unnamedNFTContract = '0x6BDAd2A83a8e70F459786a96a0a9159574685c0e'; //unnamed mainnet contract\r\n    //const unnamedNFTdata = unnamedData;\r\n    const spotContract = '0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8' //thespot mainnet\r\n    const chosenTrait = useState();\r\n    const chosenBrand = useState();\r\n    const [isApproved, setIsApproved] = useState();\r\n    const [ownSpot, setOwnSpot] = useState();\r\n    const [freeMint, setFreeMint] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        const getSpots = async () => {\r\n            const options = {\r\n                method: \"GET\",\r\n                url: `https://deep-index.moralis.io/api/v2/${account}/nft`,\r\n                params: {\r\n                    chain: \"avalanche\",\r\n                    format: \"decimal\",\r\n                    token_addresses: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n                },\r\n                headers: {\r\n                    accept: \"application/json\",\r\n                    \"X-API-Key\": 'dHttwdzMWC7XigAxZtqBpTet7Lih3MqBRzUAIjXne0TIhJzXG4wrpdDUmXPPQFXo', //process.env.REACT_APP_MORALIS_API_KEY\r\n                },\r\n            };\r\n            try {\r\n                let response = await axios.request(options);\r\n                console.log(response);\r\n                let data = response.data;\r\n                setOwnSpot(data.result.length);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        getSpots();\r\n    }, [account]);\r\n\r\n    useEffect(() => {\r\n        const free = async () => {\r\n            if (ownSpot > \"1\") {\r\n                setFreeMint(\"1\")\r\n            }\r\n            else {\r\n                setFreeMint(\"0\")\r\n            }\r\n        };\r\n        free();\r\n    }, [ownSpot])\r\n    console.log(ownSpot);\r\n    console.log(freeMint);\r\n\r\n\r\n\r\n    async function uploadToMoralis(filename, contents) {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: \"https://deep-index.moralis.io/api/v2/ipfs/uploadFolder\",\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"content-type\": \"application/json\",\r\n                \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n            },\r\n            data: [{ path: filename, content: contents }],\r\n        };\r\n\r\n        let response = await axios.request(options);\r\n        return response;\r\n    }\r\n\r\n\r\n    /* async function isApprovedForAll() {\r\n         const approvedForAll = {\r\n             chain: \"avalanche\",\r\n             address: \"0x6BDAd2A83a8e70F459786a96a0a9159574685c0e\",\r\n             function_name: \"isApprovedForAll\",\r\n             abi: unnamedAbi,\r\n             params: {\r\n                 owner: userAddress,\r\n                 operator: \"0xB043aaEb4337EA4BbB20C2ec5D846b00a0825ba5\"\r\n             },\r\n         };\r\n         const areYouApproved = await Moralis.Web3API.native.runContractFunction(\r\n             approvedForAll\r\n         );\r\n         setIsApproved(areYouApproved);\r\n \r\n \r\n         /*await Moralis.enableWeb3();\r\n         const sendOptions = {\r\n           contractAddress: \"0x6BDAd2A83a8e70F459786a96a0a9159574685c0e\", //unnamed mainnet\r\n           functionName: \"isApprovedForAll\",\r\n           abi: unnamedAbi,\r\n       \r\n           params: {\r\n             owner: userAddress,\r\n             operator: \"0xB043aaEb4337EA4BbB20C2ec5D846b00a0825ba5\",\r\n           },\r\n         };\r\n         await Moralis.executeFunction(sendOptions);\r\n       \r\n         // setIsApproved(true);\r\n     }\r\n     useEffect(() => {\r\n         isApprovedForAll();\r\n     }, []);\r\n \r\n     console.log(isApproved, userAddress)\r\n */\r\n\r\n\r\n    /*function checkApproval() {\r\n      if (isApproved === false) {\r\n        setIsApproved(false);\r\n      }\r\n      else setIsApproved(true)\r\n    }\r\n    */\r\n\r\n    async function setApprovalForAll() {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (UNNAMED_ABI && UNNAMED_ADDRESS && signer) {\r\n                    const contract = new Contract(UNNAMED_ADDRESS, UNNAMED_ABI, signer);\r\n\r\n\r\n                    let tx = await contract.setApprovalForAll(\"0xB043aaEb4337EA4BbB20C2ec5D846b00a0825ba5\", \"1\");\r\n                    console.log(tx.hash);\r\n                    setTxProcessing(false);\r\n                    alert(\r\n                        \"UnnamedNFT Approved for Branding\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    async function mintUnnamedBranding(uri, unnamedNFTID) {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (UNNAMEDBRANDING_ABI && UNNAMEDBRANDING_ADDRESS && signer) {\r\n                    const contract = new Contract(UNNAMEDBRANDING_ADDRESS, UNNAMEDBRANDING_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".2\"),\r\n                    };\r\n                    console.log(unnamedNFTID);\r\n                    console.log(uri);\r\n\r\n                    let tx = await contract.mint(unnamedNFTID, uri, options);\r\n                    console.log(tx.hash);\r\n                    setTxProcessing(false);\r\n                    alert(\r\n                        \"Branded! Check out your NFT on Campfire, Kalao or Joepegs!\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    async function mintUnnamedBrandingFree(uri, unnamedNFTID) {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (UNNAMEDBRANDING_ABI && UNNAMEDBRANDING_ADDRESS && signer) {\r\n                    const contract = new Contract(UNNAMEDBRANDING_ADDRESS, UNNAMEDBRANDING_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".2\"),\r\n                    };\r\n                    console.log(unnamedNFTID);\r\n                    console.log(uri);\r\n\r\n                    let tx = await contract.mint(unnamedNFTID, uri);\r\n                    console.log(tx.hash);\r\n                    setTxProcessing(false);\r\n                    alert(\r\n                        \"Branded! Check out your NFT on Campfire, Kalao or Joepegs!\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    async function brandUnnamedNft() {\r\n        setTxProcessing(true);\r\n        try {\r\n            let signature = await web3Provider\r\n                .getSigner()\r\n                .signMessage(\r\n                    `Allow The Spot to process mint and set token URI setting for token ${unnamedNFTID}`\r\n                );\r\n            const base64ImgContents = await saveImage();\r\n            let imgResponse = await uploadToMoralis(\r\n                `${unnamedNFTID}-img.png`,\r\n                base64ImgContents\r\n            );\r\n\r\n            let imgURL = imgResponse.data.length > 0 ? imgResponse.data[0].path : \"\";\r\n\r\n\r\n            const metadata = {\r\n                \"name\": \"Branded\",\r\n                \"description\": \"Branded UnnamedNFT\",\r\n                \"image\": imgURL,\r\n                \"attributes\": [\r\n                    {\r\n                        \"trait_type\": \"Eyes:\",\r\n                        \"value\": unnamedEyes\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Mouth\",\r\n                        \"value\": unnamedMouth\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Hat\",\r\n                        \"value\": unnamedHat\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Skin\",\r\n                        \"value\": unnamedSkin\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Nose\",\r\n                        \"value\": unnamedNose\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Special\",\r\n                        \"value\": unnamedSpecial\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Lines\",\r\n                        \"value\": unnamedLines\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Background:\",\r\n                        \"value\": unnamedBackGround\r\n                    },\r\n                    {\r\n                        \"trait_type\": \"Brand\",\r\n                        \"value\": unnamedBrand\r\n                    },\r\n\r\n                ],\r\n            }\r\n\r\n            let jsonResponse = await uploadToMoralis(`${unnamedNFTID}-json.json`, metadata);\r\n\r\n            let jsonURL =\r\n                jsonResponse.data.length > 0 ? jsonResponse.data[0].path : \"\";\r\n            if (freeMint == \"1\") {\r\n                await mintUnnamedBrandingFree(jsonURL, unnamedNFTID);\r\n            }\r\n            else {\r\n                await mintUnnamedBranding(jsonURL, unnamedNFTID);\r\n            }\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* async function spotMintMyNFT() {\r\n \r\n         setIsLoading(true)\r\n         const base64 = await getImage()\r\n         const imageData = new Moralis.File(\"img.png\", { base64: base64 });\r\n         await imageData.saveIPFS();\r\n         const imgURL = await imageData.ipfs();\r\n         console.log(imgURL)\r\n \r\n         const metadata = {\r\n             \"name\": \"Branded\",\r\n             \"description\": \"Branded UnnamedNFT\",\r\n             \"image\": imgURL,\r\n             \"attributes\": [\r\n                 {\r\n                     \"trait_type\": \"Eyes:\",\r\n                     \"value\": props.unnamedEyes\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Mouth\",\r\n                     \"value\": props.unnamedMouth\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Hat\",\r\n                     \"value\": props.unnamedHat\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Skin\",\r\n                     \"value\": props.unnamedSkin\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Nose\",\r\n                     \"value\": props.unnamedNose\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Special\",\r\n                     \"value\": props.unnamedSpecial\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Lines\",\r\n                     \"value\": props.unnamedLines\r\n                 },\r\n                 {\r\n                     \"trait_type\": \"Brand\",\r\n                     \"value\": props.unnamedBrand\r\n                 },\r\n \r\n             ],\r\n         }\r\n         console.log(metadata)\r\n         console.log(props.unnamedBrand)\r\n \r\n         const metaDataFile = new Moralis.File(\"file.json\", { base64: btoa(JSON.stringify(metadata)) });\r\n         await metaDataFile.saveIPFS();\r\n         const metaDataUrl = await metaDataFile.ipfs();\r\n         console.log(metaDataUrl)\r\n         console.log(props.unnamedID)\r\n         await Moralis.enableWeb3();\r\n         const sendOptions = {\r\n             contractAddress: \"0xB043aaEb4337EA4BbB20C2ec5D846b00a0825ba5\", //unnamedbranding fuji\r\n             functionName: \"mint\",\r\n             //   abi: unnamedNFTBrandingAbi,\r\n             msgValue: Moralis.Units.ETH(0),\r\n             params: {\r\n                 unnamedId: props.unnamedID,\r\n                 uri: metaDataUrl,\r\n             },\r\n \r\n         };\r\n         const transaction = await contractProcessor.fetch({\r\n             params: sendOptions,\r\n             onError: (err) => {\r\n                 setIsLoading(false);\r\n                 alert(JSON.stringify(err.data.message));\r\n             },\r\n             onSuccess: (tx) => {\r\n                 tx.wait(5)\r\n                     .then(alert(\"Minted Successfully! View your NFT on Campfire, Kalao or Joepegs!\"))\r\n                     .then(setIsLoading(false))\r\n                     .then(console.log(tx));\r\n             },\r\n         });\r\n \r\n \r\n \r\n \r\n     }\r\n \r\n     /*useEffect(() => {\r\n       checkApproval();\r\n      \r\n     }, [])\r\n     */\r\n\r\n    if (txProcessing) {\r\n        return (\r\n            <div><button className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n      duration-300 font-mono font-bold text-base\" disabled>\r\n                <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n                    <circle className=\"path\" cx=\"12\" cy=\"15\" r=\"10\" fill=\"yellow\" stroke=\"yellow\" strokeWidth=\"2\"></circle>\r\n                </svg>\r\n                Processing...\r\n            </button>\r\n            </div>\r\n        )\r\n    } else\r\n        return (\r\n\r\n            <div className=\"flex\">\r\n                <div className=\"flex\">\r\n                    <button className=\"m-1 rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={setApprovalForAll}>Approve Unnamed</button>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <button className=\"m-1 rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={brandUnnamedNft}>{freeMint ? \"Mint (Free)\" : \"Mint (0.2)\"}</button>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n}\r\n\r\n\r\n{/*\r\n      <div className=\"flex\">\r\n        <div className={isApproved ? \"flex\" : \"hidden\"}>\r\n          <button className=\"m-1 rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={mintMyNFT}>Mint (0.2)</button>\r\n\r\n          <button className=\"m-1 rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={spotMintMyNFT}>Spot Holder Mint (0)</button>\r\n        </div>\r\n\r\n        <div className={isApproved ? \"hidden\" : \"flex\"}>\r\n          <button className=\"m-1 w-max rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={setApproval}>Approve</button>\r\n        </div>\r\n    </div>*/}","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\unnamedCardData.jsx",["441"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedMetaData.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamednftContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedBrandedContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Main.js",["442","443","444","445","446","447","448","449","450","451","452","453","454"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\learning.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Staking.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\AnalogCollection.js",["455","456","457","458","459"],[],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Card from \"../AnalogCards\";\r\nimport analogNfts from \"../../AnalogNfts\";\r\n\r\nconst renderCard = (analogNfts, index) => {\r\n  return (\r\n    <Card\r\n      key={analogNfts.id}\r\n      nftName={analogNfts.name}\r\n      image1={analogNfts.image1}\r\n      image2={analogNfts.image2}\r\n      image3={analogNfts.image3}\r\n      image4={analogNfts.image4}\r\n      variations={analogNfts.variations}\r\n      id={analogNfts.id}\r\n    />\r\n  );\r\n};\r\n\r\nconst AnalogCollection = () => {\r\n  const [filterButton, setFilterButton] = useState(1);\r\n\r\n  const onClickUrl = (url) => {\r\n    return () => openInNewTab(url);\r\n  };\r\n  const openInNewTab = (url) => {\r\n    const newWindow = window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n    if (newWindow) newWindow.opener = null;\r\n  };\r\n\r\n  let Links = [\r\n    { name: \"AnalogCampfire\", link: \"https://discord.com/invite/4wvC6xTFyB\" },\r\n    { name: \"AnalogNFTrade\", link: \"https://discord.com/invite/4wvC6xTFyB\" },\r\n  ];\r\n\r\n\r\n  return (\r\n    <div className=\"px-10 py-4 gap-10 font-mono text-spot-yellow bg-slate-900\">\r\n      Analog is a dNFT that you may change to a specific variation if you own a\r\n      Spot NFT and the 1/1 piece. Below you can browse all the variations of the\r\n      pieces and commit a variation once you own the piece. Get a Spot NFT at\r\n      <href\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={onClickUrl(\"https://thespot.art\")}\r\n      >\r\n        {\" \"}\r\n        thespot.art\r\n      </href>{\" \"}\r\n      and your Analog piece on{\" \"}\r\n      <href\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={onClickUrl(\r\n          \"https://campfire.exchange/collections/0xbe18cf471925d683c272aafe9d1aafda99612b69\"\r\n        )}\r\n      >\r\n        Campfire.exchange\r\n      </href>{\" \"}\r\n      or{\" \"}\r\n      <href\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={onClickUrl(\r\n          \"https://nftrade.com/assets/avalanche/0xbe18cf471925d683c272aafe9d1aafda99612b69\"\r\n        )}\r\n      >\r\n        NFTrade.com\r\n      </href>\r\n      <div className=\"py-6 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 xxl:grid-cols-6 gap-10 font-mono text-spot-yellow bg-slate-900\">\r\n        {analogNfts\r\n          .filter((renderCard) => {\r\n            if (filterButton === 1) {\r\n              return renderCard;\r\n            } else return renderCard.id.walletNFTs;\r\n          })\r\n          .map(renderCard)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalogCollection;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\StakingCollections.js",["460"],[],"import apeChain from \"./assets/apechain.png\";\r\nimport apeChainHover from \"./assets/apechainhover.png\";\r\nimport blobArtDrop from \"./assets/blobartdrop.png\";\r\nimport tbcBat from \"./assets/tbcartdrop.png\";\r\nimport image11 from \"./assets/traitcards/11.png\";\r\nimport random from \"./assets/traitcards/random.png\";\r\nimport image126 from \"./assets/traitcards/126.png\";\r\nimport image135 from \"./assets/traitcards/135.png\";\r\nimport image207 from \"./assets/traitcards/207.png\";\r\nimport image212 from \"./assets/traitcards/212.png\";\r\nimport image219 from \"./assets/traitcards/219.png\";\r\nimport image307 from \"./assets/traitcards/307.png\";\r\nimport image333 from \"./assets/traitcards/333.png\";\r\nimport image416 from \"./assets/traitcards/416.png\";\r\nimport image429 from \"./assets/traitcards/429.png\";\r\nimport image425 from \"./assets/traitcards/425.png\";\r\nimport image612 from \"./assets/traitcards/612.png\";\r\nimport image613 from \"./assets/traitcards/613.png\";\r\nimport image621 from \"./assets/traitcards/621.png\";\r\nimport image624 from \"./assets/traitcards/624.png\";\r\nimport image629 from \"./assets/traitcards/629.png\";\r\nimport image143 from \"./assets/traitcards/143.png\";\r\nimport image127 from \"./assets/traitcards/127.png\";\r\nimport image209 from \"./assets/traitcards/209.png\";\r\nimport image332 from \"./assets/traitcards/332.png\";\r\nimport image339 from \"./assets/traitcards/339.png\";\r\nimport image431 from \"./assets/traitcards/431.png\";\r\nimport image423 from \"./assets/traitcards/423.png\";\r\nimport image620 from \"./assets/traitcards/620.png\";\r\nimport image623 from \"./assets/traitcards/623.png\";\r\nimport image625 from \"./assets/traitcards/625.png\";\r\nimport image637 from \"./assets/traitcards/637.png\";\r\nimport image643 from \"./assets/traitcards/643.png\";\r\nimport image206 from \"./assets/traitcards/206.png\";\r\nimport image215 from \"./assets/traitcards/215.png\";\r\nimport image418 from \"./assets/traitcards/418.png\";\r\nimport image419 from \"./assets/traitcards/419.png\";\r\nimport image430 from \"./assets/traitcards/430.png\"; \r\nimport image12 from \"./assets/traitcards/12.png\";\r\nimport image113 from \"./assets/traitcards/113.png\";\r\nimport image115 from \"./assets/traitcards/115.png\";\r\nimport image161 from \"./assets/traitcards/161.png\";\r\nimport image204 from \"./assets/traitcards/204.png\";\r\nimport image205 from \"./assets/traitcards/205.png\";\r\nimport image314 from \"./assets/traitcards/314.png\";\r\nimport image320 from \"./assets/traitcards/320.png\";\r\nimport image324 from \"./assets/traitcards/324.png\";\r\nimport image410 from \"./assets/traitcards/410.png\";\r\nimport image414 from \"./assets/traitcards/414.png\";\r\nimport image607 from \"./assets/traitcards/607.png\";\r\nimport image631 from \"./assets/traitcards/631.png\";\r\nimport image638 from \"./assets/traitcards/638.png\";\r\nimport image648 from \"./assets/traitcards/648.png\";\r\n\r\n\r\nconst collection = [\r\n  {\r\n    image: apeChain,\r\n    hoverimage: apeChainHover,\r\n    id: \"0\",\r\n    name: \"Avax Apes - Spot\",\r\n    contract: \"0x6d5087B3082f73D42a32D85e38BC95dcceDe39Bb\",\r\n    contractIndex: \"0\",\r\n    masterIndex: \"0\",\r\n    rewardContract: \"0xc3b9834567e6469074f6e385236c0991D238CE61\",\r\n    stakingTokenId: \"0\",\r\n    rewardName: \"Avax Apes OG Chains\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\"\r\n  },\r\n  {\r\n    image: blobArtDrop,\r\n    id: \"1\",\r\n    name: \"Blobs - Spot\",\r\n    contract: \"0xC0EEf2BaC6469Bd1c89796E712349A1DF2dc1298\",\r\n    contractIndex: \"0\",\r\n    masterIndex: \"1\",\r\n    rewardContract: \"0xc3b9834567e6469074f6e385236c0991D238CE61\",\r\n    stakingTokenId: \"1\",\r\n    rewardName: \"Blob Art Drops\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\"\r\n  },\r\n  {\r\n    image: tbcBat,\r\n    id: \"2\",\r\n    name: \"Tiny Bones - Spot\",\r\n    contract: \"0x4A8E6A9B93e55AF71882f3aFAA10141715ce5Fd2\",\r\n    contractIndex: \"1\",\r\n    masterIndex: \"3\",\r\n    rewardContract: \"0xc3b9834567e6469074f6e385236c0991D238CE61\",\r\n    stakingTokenId: \"2\",\r\n    rewardName: \"Tiny Bones Bats\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\"\r\n  },\r\n  /*{\r\n    image: image11,\r\n    id: \"3\",\r\n    name: \"Spot NFT\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"0\",\r\n    masterIndex: \"4\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"11\",\r\n    rewardName: \"11000101\",\r\n    stakingTime: \"24 hours\",\r\n  },*/\r\n  {\r\n    image: random,\r\n    id: \"4\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"37\",\r\n    masterIndex: \"41\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"12\",\r\n    rewardName: \"????\",\r\n    stakingTime: \"30 mins\",\r\n    stakingTimeSecs: \"1800\"\r\n  },\r\n  {\r\n    image: image126,\r\n    id: \"5\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"3\",\r\n    masterIndex: \"7\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"126\",\r\n    rewardName: \"Goatd Mania Body\",\r\n    stakingTime: \"48 hrs\",\r\n    stakingTimeSecs: \"172800\"\r\n  },\r\n  {\r\n    image: image135,\r\n    id: \"6\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"4\",\r\n    masterIndex: \"8\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"135\",\r\n    rewardName: \"Itsa Mee Body\",\r\n    stakingTime: \"48 hrs\",\r\n    stakingTimeSecs: \"172800\"\r\n  },\r\n  {\r\n    image: image207,\r\n    id: \"7\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"5\",\r\n    masterIndex: \"9\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"207\",\r\n    rewardName: \"Grey Head\",\r\n    stakingTime: \"24 hrs\",\r\n    stakingTimeSecs: \"86400\"\r\n  },\r\n  {\r\n    image: image212,\r\n    id: \"8\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"6\",\r\n    masterIndex: \"10\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"212\",\r\n    rewardName: \"White Bearded Head\",\r\n    stakingTime: \"24 hrs\",\r\n    stakingTimeSecs: \"86400\"\r\n  },\r\n  {\r\n    image: image219,\r\n    id: \"9\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"7\",\r\n    masterIndex: \"11\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"219\",\r\n    rewardName: \"Android Head\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image307,\r\n    id: \"10\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"8\",\r\n    masterIndex: \"12\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"307\",\r\n    rewardName: \"Cold Chillin Eyes\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image12,\r\n    id: \"11\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"9\",\r\n    masterIndex: \"13\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"324\",\r\n    rewardName: \"Goat Sinister Eyes\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image333,\r\n    id: \"12\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"10\",\r\n    masterIndex: \"14\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"333\",\r\n    rewardName: \"Ruby Eyes\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image416,\r\n    id: \"13\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"11\",\r\n    masterIndex: \"15\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"416\",\r\n    rewardName: \"Goatd Mania Mouth\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image429,\r\n    id: \"14\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"12\",\r\n    masterIndex: \"16\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"429\",\r\n    rewardName: \"Shut It Mouth\",\r\n    stakingTime: \"48 hrs\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image425,\r\n    id: \"15\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"13\",\r\n    masterIndex: \"17\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"425\",\r\n    rewardName: \"Neutral Mouth\",\r\n    stakingTime: \"24 hrs\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image612,\r\n    id: \"16\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"14\",\r\n    masterIndex: \"18\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"612\",\r\n    rewardName: \"Tattoo\",\r\n    stakingTime: \"48 hrs\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image613,\r\n    id: \"17\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"15\",\r\n    masterIndex: \"19\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"613\",\r\n    rewardName: \"Nightmare Headwear\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image621,\r\n    id: \"18\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"16\",\r\n    masterIndex: \"20\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"621\",\r\n    rewardName: \"Halo Headwear\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image624,\r\n    id: \"19\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"17\",\r\n    masterIndex: \"21\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"624\",\r\n    rewardName: \"Mask Headwear\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image629,\r\n    id: \"20\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"18\",\r\n    masterIndex: \"22\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"629\",\r\n    rewardName: \"Itsa Mee Headwear\",\r\n    stakingTime: \"24 hrs\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image143,\r\n    id: \"21\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"19\",\r\n    masterIndex: \"23\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"143\",\r\n    rewardName: \"Pins\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image127,\r\n    id: \"22\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"20\",\r\n    masterIndex: \"24\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"127\",\r\n    rewardName: \"Iron Goat\",\r\n    stakingTime: \"48 hrs\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image209,\r\n    id: \"23\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"21\",\r\n    masterIndex: \"25\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"209\",\r\n    rewardName: \"Brown Head\",\r\n    stakingTime: \"24 hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image332,\r\n    id: \"24\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"22\",\r\n    masterIndex: \"26\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"332\",\r\n    rewardName: \"Robogoat Eyes\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image339,\r\n    id: \"25\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"23\",\r\n    masterIndex: \"27\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"339\",\r\n    rewardName: \"Infinity Eyes\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image431,\r\n    id: \"26\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"24\",\r\n    masterIndex: \"28\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"431\",\r\n    rewardName: \"Infinity Mouth\",\r\n    stakingTime: \"24 hrs\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image423,\r\n    id: \"27\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"25\",\r\n    masterIndex: \"29\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"423\",\r\n    rewardName: \"Baller Mouth\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image620,\r\n    id: \"28\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"26\",\r\n    masterIndex: \"30\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"620\",\r\n    rewardName: \"Fighter Headwear\",\r\n    stakingTime: \"48 hours\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image623,\r\n    id: \"29\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"27\",\r\n    masterIndex: \"31\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"623\",\r\n    rewardName: \"Goatd Mania Headwear\",\r\n    stakingTime: \"48 hours\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image625,\r\n    id: \"30\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"28\",\r\n    masterIndex: \"32\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"625\",\r\n    rewardName: \"HaHaHa Headwear\",\r\n    stakingTime: \"48 hours\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image637,\r\n    id: \"31\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"29\",\r\n    masterIndex: \"33\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"637\",\r\n    rewardName: \"Cold Chillin Headwear\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image643,\r\n    id: \"32\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"30\",\r\n    masterIndex: \"34\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"643\",\r\n    rewardName: \"Suited Up Headwear\",\r\n    stakingTime: \"5 days\",\r\n    stakingTimeSecs: \"432000\",\r\n  },\r\n  {\r\n    image: image418,\r\n    id: \"33\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"32\",\r\n    masterIndex: \"36\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"418\",\r\n    rewardName: \"Demigod Mouth\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image419,\r\n    id: \"34\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"33\",\r\n    masterIndex: \"37\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"419\",\r\n    rewardName: \"HaHaHa Mouth\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image430,\r\n    id: \"35\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"34\",\r\n    masterIndex: \"38\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"430\",\r\n    rewardName: \"Farmer Mouth\",\r\n    stakingTime: \"24 Hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image206,\r\n    id: \"36\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"35\",\r\n    masterIndex: \"39\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"206\",\r\n    rewardName: \"Bow Head\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image215,\r\n    id: \"37\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"36\",\r\n    masterIndex: \"40\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"215\",\r\n    rewardName: \"Pins Head\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image113,\r\n    id: \"38\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"38\",\r\n    masterIndex: \"42\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"113\",\r\n    rewardName: \"Bat Goat Body\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image115,\r\n    id: \"39\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"39\",\r\n    masterIndex: \"43\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"115\",\r\n    rewardName: \"Bow Body\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image161,\r\n    id: \"40\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"40\",\r\n    masterIndex: \"44\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"161\",\r\n    rewardName: \"Baller Body\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image204,\r\n    id: \"41\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"41\",\r\n    masterIndex: \"45\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"204\",\r\n    rewardName: \"Nightmare Head\",\r\n    stakingTime: \"48 hours\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image205,\r\n    id: \"42\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"42\",\r\n    masterIndex: \"46\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"205\",\r\n    rewardName: \"Zombie Head\",\r\n    stakingTime: \"48 hours\",\r\n    stakingTimeSecs: \"172800\",\r\n  },\r\n  {\r\n    image: image314,\r\n    id: \"43\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"43\",\r\n    masterIndex: \"47\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"314\",\r\n    rewardName: \"Bow Eyes\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image320,\r\n    id: \"44\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"44\",\r\n    masterIndex: \"48\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"320\",\r\n    rewardName: \"Bow Body\",\r\n    stakingTime: \"3 days\",\r\n    stakingTimeSecs: \"259200\",\r\n  },\r\n  {\r\n    image: image324,\r\n    id: \"45\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"45\",\r\n    masterIndex: \"49\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"324\",\r\n    rewardName: \"Goat Sinister Eyes\",\r\n    stakingTime: \"5 days\",\r\n    stakingTimeSecs: \"432000\",\r\n  },\r\n  {\r\n    image: image410,\r\n    id: \"46\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"46\",\r\n    masterIndex: \"50\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"410\",\r\n    rewardName: \"Blunt Mouth\",\r\n    stakingTime: \"24 hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image414,\r\n    id: \"47\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"47\",\r\n    masterIndex: \"51\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"414\",\r\n    rewardName: \"Cigar Mouth\",\r\n    stakingTime: \"24 hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image607,\r\n    id: \"48\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"48\",\r\n    masterIndex: \"52\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"607\",\r\n    rewardName: \"Goat Man Headwear\",\r\n    stakingTime: \"24 hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image631,\r\n    id: \"49\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"49\",\r\n    masterIndex: \"53\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"631\",\r\n    rewardName: \"MyKill Headwear\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n  {\r\n    image: image638,\r\n    id: \"50\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"50\",\r\n    masterIndex: \"54\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"638\",\r\n    rewardName: \"Headphones Headwear\",\r\n    stakingTime: \"24 hours\",\r\n    stakingTimeSecs: \"86400\",\r\n  },\r\n  {\r\n    image: image648,\r\n    id: \"51\",\r\n    name: \"Spot\",\r\n    contract: \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\",\r\n    contractIndex: \"51\",\r\n    masterIndex: \"55\",\r\n    rewardContract: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n    stakingTokenId: \"648\",\r\n    rewardName: \"Victor Von Doom Headwear\",\r\n    stakingTime: \"7 days\",\r\n    stakingTimeSecs: \"604800\",\r\n  },\r\n];\r\nexport default collection;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\AnalogNfts.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\StakingCards.jsx",["461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { STAKING_ABI, STAKING_ADDRESS } from \"../components/Contracts/StakingAbi\"\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\n\r\n//Production\r\nfunction Card(\r\n  props,\r\n  account,\r\n  txProcessing,\r\n  setTxProcessing,\r\n  web3Provider,\r\n) {\r\n  const isAuthenticated = Boolean(account);\r\n  const userAddress = account;\r\n  const chain = \"avalanche\";\r\n  //mainnet address const spotContract = \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\";\r\n  //testnet address const stakingContract = \"0xAf8c4E9c77df06245F3718977f67a60CA7EAfF3D\";\r\n  const spotContract = \"0x0C6945E825fc3c80F0a1eA1d3E24d6854F7460d8\"; //mainnet\r\n  const stakingContract = \"0xfe5C0c66986Be8Fb16A5186Fd047eb035468db74\"; //mainnet\r\n  const [spotNftCount, setSpotNftCount] = useState([]);\r\n  const [nftContractCount, setNftContractCount] = useState([]);\r\n  const [timeLeftSecs, setTimeLeftSecs] = useState([]);\r\n  const [displayTime, setDisplayTime] = useState([]);\r\n  const [userClaimed, setUserClaimed] = useState([\"0\"]);\r\n  const [claimButton, setClaimButton] = useState([]);\r\n  const [stakeButton, setStakeButton] = useState([]);\r\n  //const [userStaked, setUserStaked] = useState([]);\r\n  //const [userStaking, setUserStaking] = useState([]);\r\n  //const userStaked = \"0\";\r\n  //const userStaking = \"0\";\r\n  const [updateTimeButton, setUpdateTimeButton] = useState([]);\r\n  const [isLoading, setIsLoading] = useState([]);\r\n  const [NFTsRemaining, setNFTsRemaining] = useState([]);\r\n  const [hide, setHide] = useState([]);\r\n  const [display, setDisplay] = useState([]);\r\n\r\n  //timefetch\r\n  //setTxProcessing not a function error?\r\n  async function getTimeLeft() {\r\n    //setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (STAKING_ABI && STAKING_ADDRESS && signer) {\r\n          const contract = new Contract(STAKING_ADDRESS, STAKING_ABI, signer);\r\n\r\n          let timeRemaining = await contract.timeUntilClaimable(props.account, props.contract, props.contractIndex);\r\n\r\n          setTimeLeftSecs(timeRemaining.toNumber());\r\n\r\n          let d = Math.floor(timeRemaining / (3600 * 24));\r\n          let h = Math.floor((timeRemaining % (3600 * 24)) / 3600);\r\n          let m = Math.floor((timeRemaining % 3600) / 60);\r\n          let s = Math.floor(timeRemaining % 60);\r\n\r\n          if (h > 0 || m > 0 || s > 0) {\r\n            return setDisplayTime(`${d}d:${h}h:${m}m:${s}s`);\r\n          } else {\r\n            return setDisplayTime(\"Start Staking!\");\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //MORALIS\r\n  /*async function getTimeLeft() {\r\n    const options = {\r\n      chain: chain,\r\n      address: stakingContract,\r\n      function_name: \"timeUntilClaimable\",\r\n      abi: [\r\n        {\r\n          inputs: [\r\n            {\r\n              internalType: \"address\",\r\n              name: \"_account\",\r\n              type: \"address\",\r\n            },\r\n            {\r\n              internalType: \"address\",\r\n              name: \"_contract\",\r\n              type: \"address\",\r\n            },\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"_contractIndex\",\r\n              type: \"uint256\",\r\n            },\r\n          ],\r\n          name: \"timeUntilClaimable\",\r\n          outputs: [\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"\",\r\n              type: \"uint256\",\r\n            },\r\n          ],\r\n          stateMutability: \"view\",\r\n          type: \"function\",\r\n        },\r\n      ],\r\n      params: {\r\n        _account: userAddress,\r\n        _contract: props.contract,\r\n        _contractIndex: props.contractIndex,\r\n      },\r\n    };\r\n\r\n    const timeRemaining = await Moralis.Web3API.native.runContractFunction(\r\n      options\r\n    );\r\n\r\n    setTimeLeftSecs(timeRemaining);\r\n\r\n    let d = Math.floor(timeRemaining / (3600 * 24));\r\n    let h = Math.floor((timeRemaining % (3600 * 24)) / 3600);\r\n    let m = Math.floor((timeRemaining % 3600) / 60);\r\n    let s = Math.floor(timeRemaining % 60);\r\n\r\n    if (h > 0 || m > 0 || s > 0) {\r\n      return setDisplayTime(`${d}d:${h}h:${m}m:${s}s`);\r\n    } else {\r\n      return setDisplayTime(\"Start Staking!\");\r\n    }\r\n  }\r\n*/\r\n\r\n  async function getUserClaimed() {\r\n    //setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (STAKING_ABI && STAKING_ADDRESS && signer) {\r\n          const contract = new Contract(STAKING_ADDRESS, STAKING_ABI, signer);\r\n          let hasClaimed = await contract.userToIndexClaimed(props.account, props.masterIndex);\r\n          setUserClaimed(hasClaimed.toNumber());\r\n          if (userClaimed === 0 && timeLeftSecs === 0) {\r\n            return setDisplay(\r\n              <div>\r\n                <div className=\"flex flex-col space-y-4 py-4\">\r\n                  <button\r\n                    className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n font-mono text-l\"\r\n                  >\r\n                    Staking Complete\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\nhover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                    onClick={claim}\r\n                  >\r\n                    Claim\r\n                  </button>\r\n\r\n                </div>\r\n              </div>\r\n            )\r\n          }\r\n          else if (userClaimed === 0 && timeLeftSecs < props.stakingTimeSecs) {\r\n            return setDisplay(\r\n              <div>\r\n                <div className=\"flex flex-col space-y-4 py-4\">\r\n                  <button\r\n                    className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow hover:bg-spot-yellow hover:text-black duration-300 hover:border-white \r\n font-mono text-l\"\r\n                    onClick={stake}\r\n                  >\r\n                    Stake\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\nhover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                    onClick={getTimeLeft}\r\n                  >\r\n                    Update Time Remaining\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\nhover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                    onClick={claim}\r\n                  >\r\n                    Claim\r\n                  </button>\r\n\r\n                </div>\r\n              </div>\r\n            )\r\n          }\r\n          else\r\n            if (userClaimed === 0) {\r\n              return setDisplay(\r\n                <div>\r\n                  <div className=\"flex flex-col space-y-4 py-4\">\r\n                    <button\r\n                      className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n  hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                      onClick={stake}\r\n                    >\r\n                      Stake\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n  hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                      onClick={getTimeLeft}\r\n                    >\r\n                      Update Time Remaining\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n  hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\"\r\n                      onClick={claim}\r\n                    >\r\n                      Claim\r\n                    </button>\r\n\r\n                  </div>\r\n                </div>\r\n              )\r\n            }\r\n            else if (userClaimed === 1) {\r\n              return setDisplay(<div className=\"flex flex-col space-y-4 py-4\">\r\n                <button\r\n                  className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\nfont-mono text-l\"\r\n                >\r\n                  Claimed\r\n                </button>\r\n              </div>)\r\n            }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUserClaimed();\r\n  }, []);\r\n\r\n\r\n  async function getNFTsRemaining() {\r\n    //setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const balanceOfAbi = [\r\n          {\r\n            inputs: [\r\n              { internalType: \"address\", name: \"account\", type: \"address\" },\r\n              { internalType: \"uint256\", name: \"id\", type: \"uint256\" },\r\n            ],\r\n            name: \"balanceOf\",\r\n            outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n            stateMutability: \"view\",\r\n            type: \"function\",\r\n          },\r\n        ];\r\n        if (balanceOfAbi && STAKING_ADDRESS && signer) {\r\n          const contract = new Contract(props.rewardContract, balanceOfAbi, signer);\r\n\r\n          let NFTsLeft = await contract.balanceOf(stakingContract, props.stakingTokenId);\r\n          setNFTsRemaining(parseInt(NFTsLeft, 16));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      //setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  /* MORALIS\r\n  async function getNFTsRemaining() {\r\n    const options = {\r\n      chain: chain,\r\n      address: props.rewardContract,\r\n      function_name: \"balanceOf\",\r\n      abi: [\r\n        {\r\n          inputs: [\r\n            { internalType: \"address\", name: \"account\", type: \"address\" },\r\n            { internalType: \"uint256\", name: \"id\", type: \"uint256\" },\r\n          ],\r\n          name: \"balanceOf\",\r\n          outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n          stateMutability: \"view\",\r\n          type: \"function\",\r\n        },\r\n      ],\r\n      params: {\r\n        account: stakingContract,\r\n        id: props.stakingTokenId,\r\n      },\r\n    };\r\n    const NFTsLeft = await Moralis.Web3API.native.runContractFunction(options);\r\n    setNFTsRemaining(NFTsLeft);\r\n  }*/\r\n\r\n  async function stake() {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (STAKING_ABI && STAKING_ADDRESS && signer) {\r\n          const contract = new Contract(STAKING_ADDRESS, STAKING_ABI, signer);\r\n\r\n          let staking = await contract.stake(props.contract, props.contractIndex);\r\n\r\n          props.setTxProcessing(false);\r\n\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  /* MORALIS\r\n    async function stake() {\r\n      let options = {\r\n        contractAddress: stakingContract,\r\n        functionName: \"stake\",\r\n        abi: [\r\n          {\r\n            inputs: [\r\n              {\r\n                internalType: \"address\",\r\n                name: \"_contract\",\r\n                type: \"address\",\r\n              },\r\n              {\r\n                internalType: \"uint256\",\r\n                name: \"_contractIndex\",\r\n                type: \"uint256\",\r\n              },\r\n            ],\r\n            name: \"stake\",\r\n            outputs: [],\r\n            stateMutability: \"nonpayable\",\r\n            type: \"function\",\r\n          },\r\n        ],\r\n        params: {\r\n          _contract: props.contract,\r\n          _contractIndex: props.contractIndex,\r\n        },\r\n      };\r\n  \r\n      await contractProcessor.fetch({\r\n        params: options,\r\n        onError: (err) => {\r\n          setIsLoading(false);\r\n          alert(JSON.stringify(err.data.message));\r\n        },\r\n        onSuccess: (tx) => {\r\n          tx.wait(5)\r\n            .then(alert(\"Staking Successful\"))\r\n            .then(setIsLoading(false))\r\n            .then(console.log(tx));\r\n        },\r\n      });\r\n    }\r\n  */\r\n  async function claim() {\r\n    //setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (STAKING_ABI && STAKING_ADDRESS && signer) {\r\n          const contract = new Contract(STAKING_ADDRESS, STAKING_ABI, signer);\r\n\r\n          let claim = await contract.claimStake(props.contract, props.contractIndex);\r\n\r\n          //setTxProcessing(false);\r\n\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      //setTxProcessing(false);\r\n    }\r\n  }\r\n  /*\r\n    async function claim() {\r\n      let options = {\r\n        contractAddress: stakingContract,\r\n        functionName: \"claimStake\",\r\n        abi: [\r\n          {\r\n            inputs: [\r\n              {\r\n                internalType: \"address\",\r\n                name: \"_contract\",\r\n                type: \"address\",\r\n              },\r\n              {\r\n                internalType: \"uint256\",\r\n                name: \"_contractIndex\",\r\n                type: \"uint256\",\r\n              },\r\n            ],\r\n            name: \"claimStake\",\r\n            outputs: [],\r\n            stateMutability: \"nonpayable\",\r\n            type: \"function\",\r\n          },\r\n        ],\r\n        params: {\r\n          _contract: props.contract,\r\n          _contractIndex: props.contractIndex,\r\n        },\r\n      };\r\n  \r\n      await contractProcessor.fetch({\r\n        params: options,\r\n        onError: (err) => {\r\n          setIsLoading(false);\r\n          alert(JSON.stringify(err.data.message));\r\n        },\r\n        onSuccess: (tx) => {\r\n          tx.wait(5)\r\n            .then(alert(\"Claimed!\"))\r\n            .then(setIsLoading(false))\r\n            .then(console.log(tx));\r\n        },\r\n      });\r\n      console.log(\"Claiming\");\r\n    }\r\n  */\r\n  function showInfo() {\r\n    if (hide === false) {\r\n      setHide(true);\r\n    } else setHide(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTimeLeft();\r\n    getNFTsRemaining();\r\n    getUserClaimed();\r\n  }, [hide])\r\n\r\n\r\n  return (\r\n    <div className=\"w-full rounded overflow-hidden shadow-lg bg-slate-700 hover: hover:scale-105 hover:bg-slate-500 duration-300\">\r\n      <img className=\"w-full\" src={props.image} alt={props.nftName}></img>\r\n      {\r\n        <div className=\"px-6 py-4\">\r\n          <div className=\"font-bold text-xl mb-2\"></div>\r\n\r\n          <div className=\"flex flex-col space-y-4 py-4\">\r\n            <button\r\n              className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\nhover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-xl\"\r\n              onClick={showInfo}\r\n            >\r\n              Stake Your {props.nftName}\r\n            </button>\r\n\r\n          </div>\r\n          <div className={hide ? \"hidden\" : \"text-slate-50 text-base\"}>\r\n            <h5>Left to Claim: {NFTsRemaining}</h5>\r\n            <h5>Total Staking Time: {props.stakingTime}</h5>\r\n            <h5>Your Time Remaining: {displayTime}</h5>\r\n            {display}\r\n          </div>\r\n        </div>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\AnalogCards.jsx",["483","484","485","486","487","488","489","490"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { ANALOG_ABI, ANALOG_ADDRESS } from '../components/Contracts/AnalogAbi';\r\n\r\nfunction Card(\r\n  props,\r\n  account,\r\n  txProcessing,\r\n  setTxProcessing,\r\n  web3Provider,) {\r\n\r\n  const [variation, setVariation] = useState(props.image1);\r\n  const [variationSelection, setVariationSelection] = useState(\"1\");\r\n  const analogContract = \"0xBe18CF471925d683c272AAFe9d1aaFDA99612B69\";\r\n  const userAddress = account;\r\n  const [isLoading, setIsLoading] = useState([]);\r\n  const [variation2, setVariation2] = useState([]);\r\n\r\n  function showVariation() {\r\n    if (props.variations === \"2\") {\r\n      setVariation2(false);\r\n    } else setVariation2(true);\r\n  }\r\n  console.log(variation2);\r\n\r\n  function changeVariation1() {\r\n    setVariation(props.image1);\r\n    setVariationSelection(\"1\");\r\n  }\r\n  function changeVariation2() {\r\n    setVariation(props.image2);\r\n    setVariationSelection(\"2\");\r\n  }\r\n  function changeVariation3() {\r\n    setVariation(props.image3);\r\n    setVariationSelection(\"3\");\r\n  }\r\n  function changeVariation4() {\r\n    setVariation(props.image4);\r\n    setVariationSelection(\"4\");\r\n  }\r\n\r\n  async function commitVar() {\r\n    //setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (ANALOG_ABI && ANALOG_ADDRESS && signer) {\r\n          const contract = new Contract(ANALOG_ADDRESS, ANALOG_ABI, signer);\r\n          let options = {\r\n            value: ethers.utils.parseEther(\"1\"),\r\n          };\r\n          console.log(props.id, variationSelection);\r\n\r\n\r\n          let tx = await contract.changeVariation(props.id, variationSelection, options);\r\n          console.log(tx.hash);\r\n          //setTxProcessing(false);\r\n          alert(\r\n            \"Variation Committed! Check out your NFT on Campfire, Kalao or Joepegs!\"\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      //setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full rounded overflow-hidden shadow-lg bg-slate-700 hover: hover:scale-105 hover:bg-slate-500 duration-300\"\r\n      onMouseLeave={changeVariation1}\r\n    >\r\n      <img className=\"w-full\" src={variation} alt={props.nftName}></img>\r\n      <div className=\"px-6 py-4\">\r\n        <div className=\"font-bold text-xl mb-2\">\r\n          <h3>NFT Name: {props.nftName}</h3>\r\n        </div>\r\n        <div className=\"text-slate-50 text-base\">\r\n          <h5>ID: {props.id}</h5>\r\n          <div className=\"font-mono text-white list-none flex pb-3\"></div>\r\n          <div className=\"flex flex-col grid gap-4 grid-cols-4 py-6 place-contents-center\">\r\n            <button\r\n              className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n      hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l flex justify-center\"\r\n\r\n              onClick={changeVariation1}\r\n            >\r\n              1\r\n            </button>\r\n            <button\r\n              className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n      hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l flex justify-center\"\r\n\r\n              onClick={changeVariation2}\r\n            >\r\n              2\r\n            </button>\r\n            <div className={props.variations === \"2\" ? \"hidden\" : \"flex grid gap-4\"}>\r\n              <button\r\n                className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n      hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l flex justify-center\"\r\n\r\n                onClick={changeVariation3}\r\n              >\r\n                3\r\n              </button></div>\r\n            <div className={props.variations === \"2\" ? \"hidden\" : \"flex grid gap-4\"}>\r\n              <button\r\n                className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n      hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l flex justify-center\"\r\n\r\n                onClick={changeVariation4}\r\n              >\r\n                4\r\n              </button></div>\r\n          </div>\r\n          <div className=\"flex grid grid-cols-1 justify-center\">\r\n\r\n            <h5></h5> <button\r\n              className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n      hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l flex justify-center\"\r\n\r\n              onClick={commitVar}\r\n            >\r\n              Click to Commit Variation {variationSelection}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"px-6 pt-4 pb-2\"></div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\StakingAbi.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\AnalogAbi.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\tombstoneTraits.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Goatd.jsx",["491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Card from '../GoatdCard';\r\nimport traits from '../../goatdTraits';\r\nimport Mint from '../GoatdMint';\r\nimport axios from 'axios';\r\nimport { GOATD_ADDRESS, GOATD_ABI } from '../Contracts/GoatdContract';\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\r\n\r\nexport const Goatd = ({\r\n    props,\r\n    account,\r\n    web3Modal,\r\n    loadWeb3Modal,\r\n    web3Provider,\r\n    setWeb3Provider,\r\n    logoutOfWeb3Modal,\r\n    txProcessing,\r\n    setTxProcessing,\r\n}) => {\r\n\r\n    const userAddress = account\r\n    const spotTraitsContract = \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\";\r\n    const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n\r\n    const [filter, setFilter] = useState('');\r\n    const onClickUrl = (url) => {\r\n        return () => openInNewTab(url);\r\n    };\r\n    const openInNewTab = (url) => {\r\n        const newWindow = window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n        if (newWindow) newWindow.opener = null;\r\n    };\r\n\r\n    {/* For Image retrieval */ }\r\n    const [canvasImage, setCanvasImage] = useState({\r\n        Background: '',\r\n        Body: '',\r\n        Head: '',\r\n        Headwear: '',\r\n        Eyes: '',\r\n        Mouth: ''\r\n    });\r\n    {/* For Traits retrieval */ }\r\n    const [chosenTrait, setChosenTrait] = useState({\r\n        Background: '',\r\n        BackgroundID: '',\r\n        Body: '',\r\n        BodyID: '',\r\n        Head: '',\r\n        HeadID: '',\r\n        Headwear: 'None',\r\n        HeadwearID: '599',\r\n        Eyes: '',\r\n        EyesID: '',\r\n        Mouth: '',\r\n        MouthID: ''\r\n    })\r\n\r\n    //Set an array of save background traits which are unburnable and available to all.\r\n    const start = 3;\r\n    const end = 9;\r\n    const solidBG = [...Array(end - start + 1).keys()].map(x => x + start);\r\n\r\n    {/* For retrieval of traits */ }\r\n    const [walletTraits, setWalletTraits] = useState([])\r\n    const [apiLoaded, setApiLoaded] = useState(false)\r\n    const [checkMyTraits, setCheckMyTraits] = useState(false)\r\n\r\n    //Moralis\r\n    /*function getTraits() {\r\n        const options = { chain: \"0xa86a\", address: userAddress, token_address: spotTraitsContract };\r\n        Moralis.Web3API.account.getNFTsForContract(options).then((data) => {\r\n            const result = data.result\r\n            setWalletTraits(result.map(nft => nft.token_id))\r\n            setApiLoaded(true)\r\n\r\n        });\r\n\r\n    }*/\r\n\r\n    useEffect(() => {\r\n        const getTraits = async () => {\r\n            const options = {\r\n                method: \"GET\",\r\n                url: `https://deep-index.moralis.io/api/v2/${account}/nft`,\r\n                params: {\r\n                    chain: \"avalanche\",\r\n                    format: \"decimal\",\r\n                    token_addresses: \"0x9521807ADF320D1CDF87AFDf875Bf438d1D92d87\",\r\n                },\r\n                headers: {\r\n                    accept: \"application/json\",\r\n                    \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n                },\r\n            };\r\n            try {\r\n                let response = await axios.request(options);\r\n                let data = response.data;\r\n                setWalletTraits(data.result.map((nft) => nft.token_id));\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        getTraits();\r\n    }, [account]);\r\n\r\n\r\n    function updateCanvasTraits(trait) {\r\n        setCanvasImage(prevImage => ({ ...prevImage, [trait.traitType]: trait.image }))\r\n        setChosenTrait(prevTrait => ({ ...prevTrait, [trait.traitType]: trait.traitName, [trait.traitType + 'ID']: trait.id }))\r\n    }\r\n\r\n    function createCard(trait) { //Building the card here from Card.jsx passing props and simultaneously fetching traits on click.\r\n        return (\r\n\r\n            <div key={trait.id} onClick={() => {\r\n                updateCanvasTraits(trait)\r\n            }}> <Card\r\n                    traitName={trait.traitName}\r\n                    traitType={trait.traitType}\r\n                    rarity={trait.rarity}\r\n                    image={trait.image}\r\n                    id={trait.id}\r\n                /></div>\r\n        )\r\n    }\r\n\r\n    // For Searching traits\r\n    const searchText = (event) => {\r\n        setFilter(event.target.value);\r\n    }\r\n    let dataSearch = traits.filter(item => {\r\n        return Object.keys(item).some(key => item[key].toString().toLowerCase().includes(filter.toString().toLowerCase())\r\n        )\r\n    });\r\n    let ownedFilter = traits.filter(item => {\r\n\r\n        if (walletTraits.includes(item.id.toString()) || solidBG.includes(item.id)) {\r\n\r\n            return item\r\n        }\r\n\r\n    })\r\n\r\n    // Putting stuff on Canvas\r\n    const canvas = useRef(null)\r\n    const hiddenCanvas = useRef(null)\r\n    const [height, setHeight] = useState(null);\r\n    const [width, setWidth] = useState(null);\r\n    const { windowWidth } = useState(window.innerWidth)\r\n    const { windowHeight } = useState(window.innerHeight)\r\n\r\n    const div = useCallback(node => {\r\n\r\n        if (node !== null) {\r\n\r\n            setHeight(node.getBoundingClientRect().height); //set height and width of canvas relative to parent div.\r\n            setWidth(node.getBoundingClientRect().width);\r\n        }\r\n    }, [windowWidth, windowHeight]);\r\n\r\n    function drawImage(layer) {\r\n        const img = new Image();\r\n        //img.setAttribute('crossOrigin', '*');\r\n        img.src = layer\r\n        img.onload = () => {\r\n            const ctx = canvas.current.getContext(\"2d\")\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(img, 0, 0, width, height)\r\n        }\r\n\r\n        const imgHidden = new Image();\r\n        imgHidden.src = layer\r\n        imgHidden.onload = () => {\r\n            const ctxHidden = hiddenCanvas.current.getContext(\"2d\")\r\n            ctxHidden.clearRect(0, 0, hiddenCanvas.width, hiddenCanvas.height);\r\n            ctxHidden.drawImage(imgHidden, 0, 0, 900, 900)\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        drawImage(canvasImage.Background);\r\n        drawImage(canvasImage.Body);\r\n        drawImage(canvasImage.Head);\r\n        drawImage(canvasImage.Eyes);\r\n        drawImage(canvasImage.Mouth);\r\n        drawImage(canvasImage.Headwear);\r\n    }\r\n        , [canvasImage, canvas, windowWidth, windowHeight])\r\n    const [savedImage, setSavedImage] = useState('empty image') //Saving image for sending to IPFS. This part isn't active yet!\r\n    function saveImage() {\r\n        const result = (new Promise((resolve, reject) => {\r\n            const imageToSave = new Image();\r\n            imageToSave.src = hiddenCanvas.current.toDataURL('image/png', 1.0);\r\n            imageToSave.onload = function () {\r\n                resolve(this.src);\r\n            };\r\n        }));\r\n\r\n        return result;\r\n    }\r\n\r\n    //Junk attempt to do checkDNA with ethers. Crashes once you select 4 traits.\r\n\r\n    const [traitFetch, setTraitFetch] = useState();\r\n\r\n    async function checkDNA(currentDNA) {\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (GOATD_ABI && GOATD_ADDRESS && signer) {\r\n                    const contract = new Contract(GOATD_ADDRESS, GOATD_ABI, signer);\r\n\r\n                    let fetch = await contract.checkDNA(currentDNA);\r\n\r\n                    return fetch;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    const [pfpFecth, setPfpFetch] = useState();\r\n\r\n    //Calling Traits Contract and PFP Contract using Moralis below.\r\n    const currentDNA =\r\n        \"\" +\r\n        chosenTrait.BodyID +\r\n        chosenTrait.HeadID +\r\n        chosenTrait.EyesID +\r\n        chosenTrait.MouthID +\r\n        chosenTrait.HeadwearID;\r\n\r\n    useEffect(() => {\r\n        const handleDNA = async () => {\r\n            if (currentDNA) {\r\n                let fetch = await checkDNA(currentDNA);\r\n                //console.log(\"Fetch: \" + fetch);\r\n                //let fetchString = fetch.toString();\r\n                if (fetch) {\r\n                    setTraitFetch(fetch);\r\n                    setPfpFetch(fetch);\r\n                    setTraitsAvailability(fetch);\r\n                }\r\n            }\r\n        };\r\n\r\n        handleDNA();\r\n    }, [chosenTrait]);\r\n\r\n    //Pass current DNA of selected traits in checkDNA function of NFT contract. Set Availability to 0 if available.\r\n    const [traitsAvailability, setTraitsAvailability] = useState('1')\r\n    useEffect(function () {\r\n        if (currentDNA.length > 14) {\r\n            checkDNA()\r\n                .then((data) => setTraitsAvailability(JSON.stringify(data)))\r\n        }\r\n    }, [chosenTrait])\r\n\r\n    // Add feature: Filter owned trait cards\r\n    const [ownedCards, setOwnedCards] = useState(false)\r\n    //---------------------------------//\r\n\r\n    //Slider\r\n    const slideLeft = () => {\r\n        var slider = document.getElementById('slider')\r\n        slider.scrollLeft = slider.scrollLeft - 500\r\n    }\r\n    const slideRight = () => {\r\n        var slider = document.getElementById('slider')\r\n        slider.scrollLeft = slider.scrollLeft + 500\r\n    }\r\n\r\n    // Main Component Return\r\n    return (\r\n        <div className='container flex-auto mx-auto w-full pt-6'>\r\n\r\n            {/* Canvas Row*/}\r\n            <div className=\"xl:sticky top-30 grid 2xl:grid-cols-5 xl:grid-cols-5 lg:grid-cols-5 md:grid-cols-4 sm:grid-cols-1 gap-4 mt-1 md:ml-4 sm:ml-0 sm:p-0 sm:pt-0 md:pt-4 lg:pt-10 xl-pt-10 2xl:pt-10 bg-slate-900 lg:pb-3\">\r\n                {/* canvas div */}\r\n\r\n                <div className=\"col-span-2 p-1 mb-10 sm:mb-2\" ref={div} style={{ height: \"22rem\", width: \"22rem\" }}>\r\n                    <canvas\r\n                        ref={canvas}\r\n                        width={width}\r\n                        height={height}\r\n                        className='mt-1 border-1 border-4 border-slate-500 text-center content-center p-5 lg:p-3 xl-p-5 2xl:p-5 md:p-2 sm:p-1'\r\n                    />\r\n                    <div className=\"text-center md: pl-10\"><h1 className='font-mono text-lg text-yellow-400 pt-1 sm:hidden md:block'>Transmorphisizer</h1></div>\r\n                    <canvas\r\n                        ref={hiddenCanvas}\r\n                        width='900px'\r\n                        height='900px'\r\n                        className='hidden' />\r\n                </div>\r\n                {/* canvas div ends */}\r\n                {/* Stats div*/}\r\n                <div className='grow border-dashed border-4 border-slate-500 p-3 m-1 text-left col-span-2 w-96 md:mt-2 lg:mt-1 mt-10 sm:mt-10 text-sm md:block sm:hidden lg:block xl:block 2xl:block'\r\n                    style={{ height: \"24rem\", width: \"22rem\" }}>\r\n                    {/* Individual Stats */}\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${(walletTraits.includes(`${chosenTrait.BackgroundID}`)) || (solidBG.some(ai => chosenTrait.BackgroundID === ai)) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Background: </div>\r\n                        {chosenTrait.Background} (ID: {chosenTrait.BackgroundID}) <div className={`${(walletTraits.includes(`${chosenTrait.BackgroundID}`)) || (solidBG.some(ai => chosenTrait.BackgroundID === ai)) || (solidBG.some(ai => chosenTrait.BackgroundID === \"\")) ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.BackgroundID}/`)} > Buy Now!</div>\r\n                    </div>\r\n\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${walletTraits.includes(`${chosenTrait.BodyID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Body: </div>\r\n                        {chosenTrait.Body} (ID: {chosenTrait.BodyID})<div className={`${walletTraits.includes(`${chosenTrait.BodyID}`) || chosenTrait.BodyID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.BodyID}/`)} > Buy Now!</div>\r\n                    </div>\r\n\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${walletTraits.includes(`${chosenTrait.HeadID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Head: </div>\r\n                        {chosenTrait.Head} (ID: {chosenTrait.HeadID})<div className={`${walletTraits.includes(`${chosenTrait.HeadID}`) || chosenTrait.HeadID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.HeadID}/`)} > Buy Now!</div>\r\n                    </div>\r\n\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${walletTraits.includes(`${chosenTrait.EyesID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Eyes: </div>\r\n                        {chosenTrait.Eyes} (ID: {chosenTrait.EyesID})<div className={`${walletTraits.includes(`${chosenTrait.EyesID}`) || chosenTrait.EyesID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.EyesID}/`)} > Buy Now!</div>\r\n                    </div>\r\n\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${walletTraits.includes(`${chosenTrait.MouthID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Mouth: </div>\r\n                        {chosenTrait.Mouth} (ID: {chosenTrait.MouthID})<div className={`${walletTraits.includes(`${chosenTrait.MouthID}`) || chosenTrait.MouthID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.MouthID}/`)} > Buy Now!</div>\r\n                    </div>\r\n\r\n                    <div className='font-mono text-white list-none flex pb-3'>\r\n                        <div className={`text-${walletTraits.includes(`${chosenTrait.HeadwearID}`) || chosenTrait.HeadwearID === '599' ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Headwear: </div>\r\n                        {chosenTrait.Headwear} (ID: {chosenTrait.HeadwearID})<div className={`${walletTraits.includes(`${chosenTrait.HeadwearID}`) || chosenTrait.HeadwearID === '599' ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.HeadwearID}/`)} > Buy Now!</div>\r\n                    </div>\r\n                    {/* End of Indiv Stats */}\r\n                    {/* Buttons */}\r\n                    <div className=\"pt-1 pb-1 flex\">\r\n\r\n                        <Mint\r\n                            chosenTrait={chosenTrait}\r\n                            walletTraits={walletTraits}\r\n                            saveImage={saveImage}\r\n                            userAddress={userAddress}\r\n                            canvas={chosenTrait}\r\n                            savedImage={savedImage}\r\n                            solidBG={solidBG}\r\n                            traitsAvailability={traitsAvailability}\r\n                            txProcessing={txProcessing}\r\n                            setTxProcessing={setTxProcessing}\r\n                            ownedCards={ownedCards}\r\n                            web3Provider={web3Provider}\r\n                            account={account}\r\n                        />\r\n                        <button className=\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                                setCheckMyTraits(!checkMyTraits)\r\n                            }}>My Owned Traits</button>\r\n\r\n                    </div>\r\n                    {/* End of Buttons */}\r\n                    {/* Two bottom text lines */}\r\n                    <div className='font-mono text-white list-none flex pb-0 pt-3 text-sm'>\r\n                        <div className='text-spot-yellow font-bold pr-3 text-xl'>* </div>\r\n                        Traits in your wallet:  {apiLoaded, checkMyTraits && walletTraits.length + ' nos.'} {apiLoaded, checkMyTraits && 'IDs: ' + walletTraits.map(trait => ' ' + trait)}\r\n                    </div>\r\n                    <div className='font-mono text-white list-none flex pb-3 text-sm'>\r\n                        <div className='text-[red] pr-3 text-xl'>* </div>\r\n                        Traits not in your wallet.\r\n                    </div>\r\n                    <div className='font-mono text-white list-none flex pb-3 text-sm'><span className={traitsAvailability === '0' ? \"text-green-300\" : \"text-[#fa2121]\"}>\r\n                        {traitsAvailability === '0' && currentDNA.length >= 14 ? 'Trait Combo is Unique!' : null}\r\n                        {traitsAvailability === '1' && currentDNA.length >= 14 ? \"Trait Combo's Been Minted!\" : null}</span>\r\n                    </div> {/* End of btm text lines */}\r\n                </div>{/* Stats div Ends*/}\r\n                {/* SearchBox */}\r\n                <div className=\"grid grid-rows-1 col-span-1 grid-cols-1 gap-4 pt-10 pl-5 self-end sm:hidden md:block\">\r\n                    <div className='col-span-1'><input type=\"text\"\r\n                        className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2\" placeholder=\"search trait/ID...\"\r\n                        value={filter}\r\n                        onChange={searchText.bind(this)}\r\n                    /></div>\r\n\r\n                    <div className='self-end'>\r\n                        <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                                setOwnedCards(!ownedCards)\r\n                            }}>{!ownedCards ? 'My Traits' : 'All Traits'}</button></div>\r\n                </div>{/* SearchBox Ends */}\r\n\r\n            </div>{/* Canvas Row Div Ends*/}\r\n            <div className='flex relative items-center overflow-hidden z-[0]'>\r\n                <MdChevronLeft onClick={slideLeft} size={40} className=' fill-gray-500 hover:scale-110 hover:fill-spot-yellow md:hidden sm:hidden lg:block xl:block 2xl:block' />\r\n                <div id='slider' className=\"p-10 flex gap-5 xl:flex-row font-mono text-spot-yellow w-full h-full overflow-x-scroll scroll whitespace-nowrap scroll-smooth scrollbar-hide\">\r\n                    {ownedCards ? ownedFilter.map(createCard) : dataSearch.map(createCard)}\r\n                </div>\r\n                <MdChevronRight onClick={slideRight} size={40} className=' fill-gray-500 hover:scale-110 hover:fill-spot-yellow md:hidden sm:hidden lg:block xl:block 2xl:block' /></div>\r\n            {/* <div className='overflow-y-auto'>\r\n                <div className=\"p-10 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-4 xl:grid-cols-6 gap-5 font-mono text-spot-yellow\">\r\n                    {ownedCards ? ownedFilter.map(createCard) : dataSearch.map(createCard)}\r\n                </div></div> */}\r\n\r\n\r\n            {/* SearchBox */}\r\n            <div className=\"grid grid-rows-1 col-span-1 grid-cols-1 gap-4 pt-0 pl-0 self-end sm:block md:hidden\">\r\n                <div className='col-span-1'><input type=\"text\"\r\n                    className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2\" placeholder=\"search trait/ID...\"\r\n                    value={filter}\r\n                    onChange={searchText.bind(this)}\r\n                /></div>\r\n\r\n                <div className='self-end pt-4'>\r\n                    <button className=\"w-full pt-1 rounded-lg py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                            setOwnedCards(!ownedCards)\r\n                        }}>{!ownedCards ? 'My Traits' : 'All Traits'}</button></div>\r\n            </div>{/* SearchBox Ends */}\r\n\r\n\r\n            <div className='grow w-full border-dashed border-4 border-slate-500 p-3 m-1 text-left col-span-2 md:mt-2 lg:mt-1 mt-10 sm:mt-10 text-sm md:hidden sm:block'\r\n                style={{ height: \"24rem\" }}>\r\n                {/* Individual Stats */}\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${(walletTraits.includes(`${chosenTrait.BackgroundID}`)) || (solidBG.some(ai => chosenTrait.BackgroundID === ai)) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Background: </div>\r\n                    {chosenTrait.Background} (ID: {chosenTrait.BackgroundID}) <div className={`${(walletTraits.includes(`${chosenTrait.BackgroundID}`)) || (solidBG.some(ai => chosenTrait.BackgroundID === ai)) || (solidBG.some(ai => chosenTrait.BackgroundID === \"\")) ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.BackgroundID}/`)} > Buy Now!</div>\r\n                </div>\r\n\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${walletTraits.includes(`${chosenTrait.BodyID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Body: </div>\r\n                    {chosenTrait.Body} (ID: {chosenTrait.BodyID})<div className={`${walletTraits.includes(`${chosenTrait.BodyID}`) || chosenTrait.BodyID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.BodyID}/`)} > Buy Now!</div>\r\n                </div>\r\n\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${walletTraits.includes(`${chosenTrait.HeadID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Head: </div>\r\n                    {chosenTrait.Head} (ID: {chosenTrait.HeadID})<div className={`${walletTraits.includes(`${chosenTrait.HeadID}`) || chosenTrait.HeadID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.HeadID}/`)} > Buy Now!</div>\r\n                </div>\r\n\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${walletTraits.includes(`${chosenTrait.EyesID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Eyes: </div>\r\n                    {chosenTrait.Eyes} (ID: {chosenTrait.EyesID})<div className={`${walletTraits.includes(`${chosenTrait.EyesID}`) || chosenTrait.EyesID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.EyesID}/`)} > Buy Now!</div>\r\n                </div>\r\n\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${walletTraits.includes(`${chosenTrait.MouthID}`) ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Mouth: </div>\r\n                    {chosenTrait.Mouth} (ID: {chosenTrait.MouthID})<div className={`${walletTraits.includes(`${chosenTrait.MouthID}`) || chosenTrait.MouthID === \"\" ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.MouthID}/`)} > Buy Now!</div>\r\n                </div>\r\n\r\n                <div className='font-mono text-white list-none flex pb-3'>\r\n                    <div className={`text-${walletTraits.includes(`${chosenTrait.HeadwearID}`) || chosenTrait.HeadwearID === '599' ? \"spot-yellow\" : \"[red]\"} font-bold pr-3`}>Headwear: </div>\r\n                    {chosenTrait.Headwear} (ID: {chosenTrait.HeadwearID})<div className={`${walletTraits.includes(`${chosenTrait.HeadwearID}`) || chosenTrait.HeadwearID === '599' ? \"hidden\" : \"pl-2 cursor-pointer text-[red] font-bold\"}`} onClick={onClickUrl(`https://joepegs.com/item/0x9521807adf320d1cdf87afdf875bf438d1d92d87/${chosenTrait.HeadwearID}/`)} > Buy Now!</div>\r\n                </div>\r\n                {/* End of Indiv Stats */}\r\n                {/* Buttons */}\r\n                <div className=\"pt-1 pb-1 flex\">\r\n\r\n                    <Mint\r\n                        chosenTrait={chosenTrait}\r\n                        walletTraits={walletTraits}\r\n                        saveImage={saveImage}\r\n                        userAddress={userAddress}\r\n                        canvas={chosenTrait}\r\n                        savedImage={savedImage}\r\n                        solidBG={solidBG}\r\n                        traitsAvailability={traitsAvailability}\r\n                        txProcessing={txProcessing}\r\n                        setTxProcessing={setTxProcessing}\r\n                        ownedCards={ownedCards}\r\n                        web3Provider={web3Provider}\r\n                        account={account}\r\n                    />\r\n                    <button className=\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                            setCheckMyTraits(!checkMyTraits)\r\n                        }}>My Owned Traits</button>\r\n\r\n                </div>\r\n                {/* End of Buttons */}\r\n                {/* Two bottom text lines */}\r\n                <div className='font-mono text-white list-none flex pb-0 pt-3 text-sm'>\r\n                    <div className='text-spot-yellow font-bold pr-3 text-xl'>* </div>\r\n                    Traits in your wallet:  {apiLoaded, checkMyTraits && walletTraits.length + ' nos.'} {apiLoaded, checkMyTraits && 'IDs: ' + walletTraits.map(trait => ' ' + trait)}\r\n                </div>\r\n                <div className='font-mono text-white list-none flex pb-3 text-sm'>\r\n                    <div className='text-[red] pr-3 text-xl'>* </div>\r\n                    Traits not in your wallet.\r\n                </div>\r\n                <div className='font-mono text-white list-none flex pb-3 text-sm'><span className={traitsAvailability === '0' ? \"text-green-300\" : \"text-[#fa2121]\"}>\r\n                    {traitsAvailability === '0' && currentDNA.length >= 14 ? 'Trait Combo is Unique!' : null}\r\n                    {traitsAvailability === '1' && currentDNA.length >= 14 ? \"Trait Combo's Been Minted!\" : null}</span>\r\n                </div> {/* End of btm text lines */}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\goatdTraits.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\GoatdMint.jsx",["509","510","511","512","513","514","515","516","517"],[],"import { stringify } from 'postcss';\r\nimport React, { useEffect, useState } from 'react'\r\nimport spotNFTAbi from '../components/Contracts/SpotNFTAbi.json';\r\nimport { GOATD_ADDRESS, GOATD_ABI } from '../components/Contracts/GoatdContract';\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\nexport default function Mint(\r\n  props,\r\n  id,\r\n  saveImage,\r\n  account,\r\n  txProcessing,\r\n  setTxProcessing,\r\n  ownedCards,\r\n  web3Provider,\r\n) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const spotTraitsContract = \"0x9521807adf320d1cdf87afdf875bf438d1d92d87\";\r\n  const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n\r\n  let userAddress = props.userAddress\r\n\r\n  function getImage() {\r\n    return props.saveImage()\r\n  }\r\n\r\n  function checkTraits() {\r\n    let isSafeBG = props.solidBG.some(ai => props.chosenTrait.BackgroundID === ai)\r\n    if ((props.walletTraits.includes(String(props.chosenTrait.BackgroundID)) || isSafeBG) && props.walletTraits.includes(String(props.chosenTrait.BodyID)) && props.walletTraits.includes(String(props.chosenTrait.HeadID)) &&\r\n      props.walletTraits.includes(String(props.chosenTrait.MouthID)) && props.walletTraits.includes(String(props.chosenTrait.EyesID)) && (props.walletTraits.includes(String(props.chosenTrait.HeadwearID)) || props.chosenTrait.HeadwearID === '599')) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n  //upload to ipfs via moralis\r\n  async function uploadToMoralis(filename, contents) {\r\n    const options = {\r\n      method: \"POST\",\r\n      url: \"https://deep-index.moralis.io/api/v2/ipfs/uploadFolder\",\r\n      headers: {\r\n        accept: \"application/json\",\r\n        \"content-type\": \"application/json\",\r\n        \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n      },\r\n      data: [{ path: filename, content: contents }],\r\n    };\r\n\r\n    let response = await axios.request(options);\r\n    return response;\r\n  }\r\n\r\n  //Ethers\r\n  async function mint(uri, id) {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (GOATD_ABI && GOATD_ADDRESS && signer) {\r\n          const contract = new Contract(GOATD_ADDRESS, GOATD_ABI, signer);\r\n          let options = {\r\n            value: ethers.utils.parseEther(\".3\"),\r\n          };\r\n          console.log(id);\r\n          console.log(uri);\r\n\r\n          let goatdMint = await contract.mint(props.chosenTrait.BackgroundID, props.chosenTrait.BodyID, props.chosenTrait.HeadID, props.chosenTrait.EyesID, props.chosenTrait.MouthID, props.chosenTrait.HeadwearID, uri, options);\r\n          console.log(goatdMint);\r\n          props.setTxProcessing(false);\r\n          alert(\r\n            \"Minted! Check out your Goatd NFT on Campfire, Kalao or Joepegs!\"\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  async function mintMyNFT() {\r\n    if (!checkTraits()) {\r\n      alert(\"Some of the selected traits are not in your wallet. Ensure all trait-titles are yellow. Click 'My Owned Traits' again to refresh wallet traits.\")\r\n    }\r\n\r\n    else {\r\n      props.setTxProcessing(true);\r\n      try {\r\n        let signature = await props.web3Provider\r\n          .getSigner()\r\n          .signMessage(\r\n            `Allow The Spot to burn ERC-1155 and create a goatd pfp`\r\n          );\r\n        const base64ImgContents = await props.saveImage();\r\n        let imgResponse = await uploadToMoralis(\r\n          `img.png`,\r\n          base64ImgContents\r\n        );\r\n\r\n        let imgURL = imgResponse.data.length > 0 ? imgResponse.data[0].path : \"\";\r\n\r\n        const metadata = {\r\n          name: \"Goatd\",\r\n          description: \"Customizable PFP on Avax\",\r\n          image: imgURL,\r\n          edition: id,\r\n          attributes: [\r\n            {\r\n              trait_type: \"Background\",\r\n              value: props.chosenTrait.Background\r\n            },\r\n            {\r\n              trait_type: \"Body\",\r\n              value: props.chosenTrait.Body\r\n            },\r\n            {\r\n              trait_type: \"Head\",\r\n              value: props.chosenTrait.Head\r\n            },\r\n            {\r\n              trait_type: \"Eyes\",\r\n              value: props.chosenTrait.Eyes\r\n            },\r\n            {\r\n              trait_type: \"Mouth\",\r\n              value: props.chosenTrait.Mouth\r\n            },\r\n            {\r\n              trait_type: \"Headwear\",\r\n              value: props.chosenTrait.Headwear\r\n            }\r\n          ],\r\n        };\r\n\r\n        let jsonResponse = await uploadToMoralis(`goatd.json`, metadata);\r\n\r\n        let jsonURL =\r\n          jsonResponse.data.length > 0 ? jsonResponse.data[0].path : \"\";\r\n\r\n        await mint(jsonURL, id);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        props.setTxProcessing(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div><button className=\"inline-flex m-2 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\" disabled>\r\n        <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n          <circle className=\"path\" cx=\"12\" cy=\"15\" r=\"10\" fill=\"yellow\" stroke=\"yellow\" strokeWidth=\"2\"></circle>\r\n        </svg>\r\n        Processing...\r\n      </button>\r\n      </div>\r\n    )\r\n  } else\r\n    return (\r\n      <div>\r\n        <button className=\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={mintMyNFT} disabled={props.traitsAvailability === '1'}>Mint (0.3)</button>\r\n      </div>\r\n    );\r\n}","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\GoatdContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\sendNFTombstoned.jsx",["518","519","520","521","522","523","524","525"],[],"import React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport {\r\n  NFTOMBSTONED_ADDRESS,\r\n  NFTOMBSTONED_ABI,\r\n} from \"./Contracts/NFTombstonedContract\";\r\nimport {\r\n  TOMBSTONE_ADDRESS,\r\n  TOMBSTONE_ABI,\r\n} from \"./Contracts/TombstoneContract\";\r\nimport { ENGRAVER_ABI, ENGRAVER_ADDRESS } from \"./Contracts/EngraverContract\";\r\nimport { Contract, ethers } from \"ethers\";\r\n\r\nexport default function SendNFTombstoned(props) {\r\n\r\n  const [textinput, setTextinput] = useState(\"\");\r\n\r\n  const textinputUser = (event) => {\r\n    setTextinput(event.target.value);\r\n  };\r\n\r\n  async function setApprovalForAll() {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (TOMBSTONE_ABI && TOMBSTONE_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            TOMBSTONE_ADDRESS,\r\n            TOMBSTONE_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            value: ethers.utils.parseEther(\"0.25\"),\r\n          };\r\n\r\n          let tx = await contract.setApprovalForAll(NFTOMBSTONED_ADDRESS, \"1\");\r\n          console.log(tx.hash);\r\n          alert(\r\n            \"NFTombstone approved to be used to get NFTombstoned!\"\r\n          );\r\n          props.setTxProcessing(false);\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(\"Error on mint\");\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  async function getUri() {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (TOMBSTONE_ABI && TOMBSTONE_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            TOMBSTONE_ADDRESS,\r\n            TOMBSTONE_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            value: ethers.utils.parseEther(\"0.25\"),\r\n          };\r\n          console.log(props.id)\r\n          let uri = await contract.tokenURI(props.id);\r\n          let uriFinal = uri.substring(8);\r\n          console.log(uriFinal);\r\n          console.log(uri.hash);\r\n          props.setTxProcessing(false);\r\n          await sendNFT(uriFinal);\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(\"Error on mint\");\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n  const [hasBeen, setHasBeen] = useState(\"0\");\r\n\r\n  async function checkEngraved(props) {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (ENGRAVER_ABI && ENGRAVER_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            ENGRAVER_ADDRESS,\r\n            ENGRAVER_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            value: ethers.utils.parseEther(\"0.25\"),\r\n          };\r\n          //console.log(props.id)\r\n          let engraved = await contract.hasBeenEngraved(props.id);\r\n          setHasBeen(engraved);\r\n\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n\r\n      }\r\n\r\n    } catch (error) {\r\n\r\n      console.log(error);\r\n    } finally {\r\n\r\n    }\r\n  }\r\n  useEffect(() => { checkEngraved(props) }, [props.id])\r\n\r\n\r\n  async function sendNFT(uriFinal) {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (NFTOMBSTONED_ABI && NFTOMBSTONED_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            NFTOMBSTONED_ADDRESS,\r\n            NFTOMBSTONED_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            // price is 0.666 avax\r\n            value: ethers.utils.parseEther(\"0.1\"),\r\n          };\r\n          console.log(props.id, uriFinal, textinput);\r\n          let tx = await contract.mint(props.id, uriFinal, textinput, options);\r\n          console.log(tx.hash);\r\n          props.setTxProcessing(false);\r\n          alert(\r\n            \"Minted Successfully! You just NFTOMBSTONED someone!!!\"\r\n          );\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error on mint\");\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  if (props.txProcessing) {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n          disabled\r\n        >\r\n          <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n            <circle\r\n              className=\"path\"\r\n              cx=\"12\"\r\n              cy=\"15\"\r\n              r=\"10\"\r\n              fill=\"yellow\"\r\n              stroke=\"yellow\"\r\n              strokeWidth=\"2\"\r\n            ></circle>\r\n          </svg>\r\n          Processing...\r\n        </button>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"w-full\">\r\n        <button\r\n          className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-sm\"\r\n          disabled={props.txProcesssing}\r\n          onClick={() => setApprovalForAll()}\r\n        >\r\n          APPROVE NFTOMBSTONE\r\n        </button>\r\n        <div className=\"flex w-full\">\r\n\r\n          <div className=\"w-full flex pr-5 pl-1\">\r\n\r\n            <div className=\"flex pr-2 pt-2 pr-6\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 h-3/4 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 pr-4 w-40\"\r\n                placeholder=\"receiving address\"\r\n                value={textinput}\r\n                onChange={textinputUser.bind(this)}\r\n              />{\" \"}\r\n            </div>\r\n\r\n            <button\r\n              className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-sm\"\r\n              disabled={props.txProcesssing}\r\n              onClick={() => getUri()}\r\n            >\r\n              SEND NFTOMBSTONED\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\NFTombstonedContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\ScribbleCustoms.jsx",["526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleMint.jsx",["561","562","563","564","565","566","567","568","569","570","571","572","573"],[],"import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport nfTombstoneABI from \"../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport {\r\n    TOMBSTONE_ADDRESS,\r\n    TOMBSTONE_ABI,\r\n} from \"./Contracts/TombstoneContract\";\r\nimport { SCRIBBLECLAIM_ABI, SCRIBBLECLAIM_ADDRESS } from \"./Contracts/ScribbleContract\";\r\nimport image1 from \"../assets/scribble/CARD_PLACEHOLDER.jpg\"\r\n\r\nexport default function ScribbleMint({\r\n    props,\r\n    chosenTrait,\r\n    walletTraits,\r\n    background,\r\n    behind,\r\n    flair,\r\n    ground,\r\n    tombstone,\r\n    top,\r\n    id,\r\n    saveImage,\r\n    account,\r\n    noun,\r\n    name,\r\n    color,\r\n    collection,\r\n    collectorName,\r\n    collectionDescription,\r\n    nftSelected,\r\n    txProcessing,\r\n    setTxProcessing,\r\n    ownedCards,\r\n    mintEnabled,\r\n    web3Provider,\r\n    tombstoneSelected,\r\n}) {\r\n\r\n\r\n    function alertClick() {\r\n        alert(\"Wen Mint??! Follow @ScribbleWarl0ck on bird app to find out more..\");\r\n    }\r\n\r\n\r\n    async function uploadToMoralis(filename, contents) {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: \"https://deep-index.moralis.io/api/v2/ipfs/uploadFolder\",\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"content-type\": \"application/json\",\r\n                \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n            },\r\n            data: [{ path: filename, content: contents }],\r\n        };\r\n\r\n        let response = await axios.request(options);\r\n        return response;\r\n    }\r\n\r\n    async function mint(tokenURI, id) {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (SCRIBBLECLAIM_ABI && SCRIBBLECLAIM_ADDRESS && signer) {\r\n                    const contract = new Contract(SCRIBBLECLAIM_ADDRESS, SCRIBBLECLAIM_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".1\"),\r\n                    };\r\n                    console.log(tokenURI);\r\n\r\n                    let tx = await contract.mint(id, tokenURI, collection);\r\n                    console.log(tx.hash);\r\n                    props.setTxProcessing(false);\r\n                    alert(\r\n                        \"Your Custom Token Has Been Minted! Join the Discord to Chat with Scribble Warlock!!!\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    async function scribbleMint() {\r\n        setTxProcessing(true);\r\n        try {\r\n            let signature = await web3Provider\r\n                .getSigner()\r\n\r\n            const metadata = {\r\n                name: \"Scribble Custom Card\",\r\n                description: \"Scribble Custom Card\",\r\n                image: \"https://thespot.mypinata.cloud/ipfs/QmYnmKqh8ahh1hVY5z4o5c5RJG34BC6fHKyuQnRiYQPpHH\", //ipfs CID\r\n                attributes: [\r\n                    {\r\n                        trait_type: \"Collector Name:\",\r\n                        value: collectorName,\r\n                    },\r\n                    {\r\n                        trait_type: \"Custom Name:\",\r\n                        value: name,\r\n                    },\r\n                    {\r\n                        trait_type: \"Color\",\r\n                        value: color,\r\n                    },\r\n                    {\r\n                        trait_type: \"Noun\",\r\n                        value: noun,\r\n                    },\r\n                    {\r\n                        trait_type: \"Collection Claimed With\",\r\n                        value: collectionDescription,\r\n                    },\r\n                    {\r\n                        trait_type: \"Claimed With ID\",\r\n                        value: id,\r\n                    },\r\n\r\n                ],\r\n            };\r\n\r\n            let jsonResponse = await uploadToMoralis(`${id}-json.json`, metadata);\r\n\r\n            let jsonURL =\r\n                jsonResponse.data.length > 0 ? jsonResponse.data[0].path : \"\";\r\n\r\n            await mint(jsonURL, id);\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    if (txProcessing) {\r\n        return (\r\n            <div>\r\n                <button\r\n                    className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n                    disabled\r\n                >\r\n                    <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n                        <circle\r\n                            className=\"path\"\r\n                            cx=\"12\"\r\n                            cy=\"15\"\r\n                            r=\"10\"\r\n                            fill=\"yellow\"\r\n                            stroke=\"yellow\"\r\n                            strokeWidth=\"2\"\r\n                        ></circle>\r\n                    </svg>\r\n                    Processing...\r\n                </button>\r\n            </div>\r\n        );\r\n    } else\r\n        return (\r\n            <div className=\"flex w-full\">\r\n                <div className=\"w-full pr-5 pl-1\">\r\n                    <button\r\n                        className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base disabled:border-gray-600 disabled:hover:bg-gray-900 disabled:text-gray-600 disabled:hover:text-gray-600\"\r\n                        disabled={mintEnabled === false}\r\n                        onClick={scribbleMint}\r\n                    >\r\n                        Mint Custom Card\r\n                    </button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n\r\n}","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\traits.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\ScribbleUpdateCustoms.jsx",["574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610"],[],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Select from \"react-select\";\r\nimport Card from \"../Card\";\r\nimport traits from \"../../traits\";\r\nimport nftombstoneData from \"../../contracts/nftombstoneMetadata.json\";\r\nimport Authenticate from \"../Authenticate\";\r\nimport spotNFTAbi from \"../../contracts/spotNFTAbi.json\";\r\nimport spotTraitsAbi from \"../../contracts/spotTraitsAbi.json\";\r\nimport SetApproval from \"../SetApproval\";\r\nimport ScribbleUpdateMetadata from \"../ScribbleUpdateMeta\";\r\nimport \"../../Board.css\";\r\nimport nfTombstoneABI from \"../../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { SCRIBBLECLAIM_ABI, SCRIBBLECLAIM_ADDRESS } from \"../Contracts/ScribbleContract\";\r\nimport { json } from \"react-router-dom\";\r\n\r\n\r\nexport const ScribbleUpdate = ({\r\n    account,\r\n    web3Modal,\r\n    loadWeb3Modal,\r\n    web3Provider,\r\n    setWeb3Provider,\r\n    logoutOfWeb3Modal,\r\n    txProcessing,\r\n    setTxProcessing,\r\n}) => {\r\n\r\n    //user input text vars\r\n\r\n    const textinputUser = (event) => {\r\n        setTextinput(event.target.value);\r\n    };\r\n    const textinputUserText = (event) => {\r\n        setTextinputText(event.target.value);\r\n    };\r\n    const textinputUserText1 = (event) => {\r\n        setTextinputText1(event.target.value);\r\n    };\r\n\r\n\r\n    const [filter, setFilter] = useState(\"\");\r\n    const [savedImage, setSavedImage] = useState(\"empty image\"); //Saving image for sending to IPFS. This part isn't active yet!\r\n\r\n\r\n    //Metadata\r\n    const [collectorName, setCollectorName] = useState(\"\");\r\n    const [collectionUsedToClaim, setCollectionUsedToClaim] = useState(\"\");\r\n    const [idClaimedWith, setIdClaimedWith] = useState(\"\");\r\n    const [customColor, setCustomColor] = useState(\"\");\r\n    const [customNoun, setCustomNoun] = useState(\"\");\r\n    const [jsonMetaData, setJsonMetaData] = useState([]);\r\n    const [displayNfts, setDisplayNfts] = useState([]);\r\n    let response;\r\n\r\n    const [currentID, setCurrentID] = useState(\"1\");\r\n    const [nftId, setNftId] = useState(\"1\");\r\n    const [imageUrl, setImageUrl] = useState(\"https://thespot.mypinata.cloud/ipfs/QmYnmKqh8ahh1hVY5z4o5c5RJG34BC6fHKyuQnRiYQPpHH\");\r\n\r\n    //for text on canvas\r\n    const [textinput, setTextinput] = useState(\"1\");\r\n    const [collection, setCollection] = useState(\"0xC3C831b19B85FdC2D3E07DE348E7111BE1095Ba1\");\r\n    const [textinputText, setTextinputText] = useState(\"1\");\r\n    const [textinputText1, setTextinputText1] = useState(\"\");\r\n\r\n    const [pauseStateFlipped, setPauseStateFlipped] = useState();\r\n\r\n\r\n    //name font info\r\n    const collectionOptions = [\r\n        { value: \"0xC3C831b19B85FdC2D3E07DE348E7111BE1095Ba1\", label: \"Mind Matter\" },\r\n        { value: \"0x424F2C77341d692496544197Cc39708F214EEfc4\", label: \"Overload\" },\r\n        { value: \"0x5DF36A4E61800e8cc7e19d6feA2623926C8EF960\", label: \"Tales\" },\r\n        { value: \"0x8d17f8Ca6EFE4c85981A4C73c5927beEe2Ad1168\", label: \"Peaches and Strawbs\" },\r\n        { value: \"0x8f1e73AA735A33e3E01573665dc7aB66DDFBa4B2\", label: \"Abstract\" },\r\n        { value: \"0xeCf0d76AF401E400CBb5C4395C76e771b358FE06\", label: \"Unfinished\" },\r\n        { value: \"0xbc54D075a3b5F10Cc3F1bA69Ee5eDA63d3fB6154\", label: \"Wasteland\" },\r\n        { value: \"0xF3544a51b156a3A24a754Cad7d48a901dDbD83d2\", label: \"Resonate\" },\r\n    ];\r\n    const [collectionDescription, setCollectionDescription] = useState(\"Mind Matter\")\r\n\r\n    const handleChange = (selectedOption) => {\r\n        console.log(\"handleChange\", selectedOption.value);\r\n        setCollection(selectedOption.value);\r\n        setCollectionDescription(selectedOption.label);\r\n    };\r\n    let pausedState;\r\n    const [isPaused, setIsPaused] = useState(\"\");\r\n\r\n    async function getPausedState() {\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (SCRIBBLECLAIM_ABI && SCRIBBLECLAIM_ADDRESS && signer) {\r\n                    const contract = new Contract(SCRIBBLECLAIM_ADDRESS, SCRIBBLECLAIM_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".1\"),\r\n                    };\r\n\r\n                    pausedState = await contract.paused();\r\n                    if (pausedState) {\r\n                        setIsPaused(\"Minting is Currently Paused\")\r\n                    }\r\n                    if (!pausedState) {\r\n                        setIsPaused(\"Minting is Currently Live\")\r\n                    }\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPausedState();\r\n    }, [txProcessing])\r\n\r\n    async function flipPauseState() {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (SCRIBBLECLAIM_ABI && SCRIBBLECLAIM_ADDRESS && signer) {\r\n                    const contract = new Contract(SCRIBBLECLAIM_ADDRESS, SCRIBBLECLAIM_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".1\"),\r\n                    };\r\n\r\n                    let tx = await contract.flipPausedState();\r\n                    console.log(tx.hash);\r\n                    setTxProcessing(false);\r\n                    alert(\r\n                        \"Flipped Pause State!\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n\r\n    {\r\n        /* For retrieval of traits */\r\n    }\r\n    const [walletTraits, setWalletTraits] = useState([]);\r\n    const [nftSelected, setNftSelected] = useState(false);\r\n\r\n    async function getTraits() {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `https://deep-index.moralis.io/api/v2/nft/0x4b819687607f0772a1fa81ff550758B4024cD531`,\r\n            params: {\r\n                chain: \"avalanche\",\r\n                format: \"decimal\",\r\n                normalizeMetadata: \"true\",\r\n            },\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"X-API-Key\": \"dHttwdzMWC7XigAxZtqBpTet7Lih3MqBRzUAIjXne0TIhJzXG4wrpdDUmXPPQFXo\", //process.env.REACT_APP_MORALIS_API_KEY\r\n            },\r\n        };\r\n        try {\r\n            response = await axios.request(options);\r\n            setDisplayNfts(response.data.result);\r\n            setCurrentID(textinputText - 1);\r\n            setJsonMetaData(response.data.result);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTraits();\r\n    }, []);\r\n\r\n    function displayPausedState() {\r\n        if (pausedState) {\r\n            return (\r\n                <div>Minting is Currently Paused</div>\r\n            )\r\n        }\r\n        if (!pausedState) {\r\n            return (\r\n                <div>Minting is Currently Live</div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // For Searching traits\r\n    const searchText = (event) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    let dataSearch = traits.filter((item) => {\r\n        return Object.keys(item).some((key) =>\r\n            item[key]\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(filter.toString().toLowerCase())\r\n        );\r\n    });\r\n    let ownedFilter = traits.filter((item) => {\r\n        if (walletTraits.includes(item.id.toString())) {\r\n            return item;\r\n        }\r\n    });\r\n\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [imgURLHash, setImgURLHash] = useState(\"\");\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleSubmission = async () => {\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('file', selectedFile)\r\n\r\n        const metadata = JSON.stringify({\r\n            name: 'File name',\r\n        });\r\n        formData.append('pinataMetadata', metadata);\r\n\r\n        try {\r\n            const res = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\r\n                maxBodyLength: \"Infinity\",\r\n                headers: {\r\n                    'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\r\n                    Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIwZmQ5MzgwYy1mYmI2LTQ1OWQtYjkzYy00Mzk3ZjNmMWVlZjYiLCJlbWFpbCI6ImpqemltbWVyQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiTllDMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiIzMmY5YWY0YzIwNTE2NTMxOWYyYyIsInNjb3BlZEtleVNlY3JldCI6Ijg3MWYwODVmMGEyM2FiZmU3YjMzOWNkODBiMzNmNGMwOTM5NGMzMTNjODRlYmViNDNkZGY0ZDYwMGFjNjgzYjkiLCJpYXQiOjE2NjY1NjcyMzB9.6GHJUEgK0W_Cc-z9ZxGBGbETjvSUKo8h6yh7u4__t_k`,\r\n                }\r\n            });\r\n            console.log(res.data);\r\n            console.log(res.data.IpfsHash);\r\n            setImgURLHash(res.data.IpfsHash);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    function updateTraitMetaData(nfts) {\r\n        setCollectorName(\r\n            nfts.normalized_metadata.attributes[0].value\r\n        );\r\n        setTextinput(\r\n            nfts.normalized_metadata.attributes[1].value\r\n        );\r\n        setCustomColor(\r\n            nfts.normalized_metadata.attributes[2].value\r\n        );\r\n        setCustomNoun(\r\n            nfts.normalized_metadata.attributes[3].value\r\n        );\r\n        setCollectionUsedToClaim(\r\n            nfts.normalized_metadata.attributes[4].value\r\n        );\r\n        setIdClaimedWith(\r\n            nfts.normalized_metadata.attributes[5].value\r\n        );\r\n        setImageUrl(nfts.normalized_metadata.image);\r\n\r\n    }\r\n\r\n\r\n    // Add feature: Filter owned trait cards\r\n    const [ownedCards, setOwnedCards] = useState(true);\r\n    //---------------------------------//\r\n\r\n\r\n    // Main Component Return\r\n    return (\r\n        <div className=\"flex-auto mx-auto w-full\">\r\n            {/* Canvas Row*/}\r\n            <div className=\"grid 2xl:grid-cols-2 xl:grid-cols-1 lg:grid-cols-1 md:grid-cols-1 sm:grid-cols-1 gap-4 mt-1 ml-6 sm:p-5 bg-slate-900 lg:pb-3\">\r\n                {/* canvas div */}\r\n\r\n                <div\r\n                    className=\"grid grid-cols-3 p-1 mb-10 sm:mb-10\">\r\n\r\n                    <div className=\"w-max\">\r\n                        <img src={imageUrl} alt=\"logo\" className=\"m-0 h-96 pr-6 pt-2\"></img>\r\n                    </div>\r\n                    <div\r\n                        className=\"grow border-dashed border-4 border-slate-500 p-3 pt-2 pl-5 m-1 text-left col-span-1 w-80 md:mt-10 lg:mt-2 mt-10 sm:mt-10 text-sm\"\r\n                        style={{ height: \"15rem\", width: \"18rem\" }}\r\n                    >\r\n\r\n                        <div\r\n                            className={`text-spot-yellow text-lg font-bold pr-3 pl-2`}\r\n                        >\r\n                            Upload Image\r\n                        </div>\r\n                        <div className=\"pr-2\">\r\n                            <div className=\"w-full flex\">\r\n                                <div className=\"w-full pl-1 pr-3\">\r\n\r\n                                    <div className=\"container\">\r\n                                        <div className=\"pl-1 pb-2\"><label className=\"text-white form-label\">Choose File</label></div>\r\n                                        <input className=\"text-white pb-2 pl-1\" type=\"file\" onChange={changeHandler} />\r\n                                        <button className=\"m-1 w-full rounded-lg py-1 border-2 border-gray-200 text-gray-200\r\n       hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base disabled:border-gray-600 disabled:hover:bg-gray-900 disabled:text-gray-600 disabled:hover:text-gray-600\" onClick={handleSubmission}>Upload Custom Image</button>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            </div></div>\r\n\r\n                        <ScribbleUpdateMetadata\r\n                            id={textinputText}\r\n                            imgURL={`https://ipfs.moralis.io:2053/ipfs/${imgURLHash}`}\r\n                            account={account}\r\n                            pieceName={textinput}\r\n                            collectorName={collectorName}\r\n                            customColor={customColor}\r\n                            customNoun={customNoun}\r\n                            collectionClaimedWith={collectionUsedToClaim}\r\n                            idClaimedWith={idClaimedWith}\r\n                            nftId={nftId}\r\n                            scribbleNote={textinputText1}\r\n                            txProcessing={txProcessing}\r\n                            setTxProcessing={setTxProcessing}\r\n                            ownedCards={ownedCards}\r\n                            web3Provider={web3Provider}\r\n                            nftSelected={nftSelected}\r\n                        />\r\n                        <div className=\"pl-1 pr-5 pt-10\"><button\r\n                            className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base disabled:border-gray-600 disabled:hover:bg-gray-900 disabled:text-gray-600 disabled:hover:text-gray-600\"\r\n\r\n                            onClick={flipPauseState}\r\n                        >\r\n                            Flip Paused State for Minting: {isPaused}\r\n                        </button></div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"pb-6 bg-slate-800\">\r\n                        <h1 className=\"text-center font-mono text-lg text-yellow-400 pt-1 pb-6\">\r\n                            Scribble Customs Metadata Update\r\n                        </h1>\r\n\r\n                        <div className=\"grid grid-cols-1 gap-4 pt-1 pl-4\">\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">NFT ID: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {nftId}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Collector's Name: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {collectorName}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-5\">Piece Name: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-48 h-6\"\r\n                                        placeholder=\"Piece Name\"\r\n                                        value={textinput}\r\n                                        onChange={textinputUser.bind(this)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Color: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {customColor}\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Noun: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {customNoun}\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Collection Used to Claim: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {collectionUsedToClaim}\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Id Claimed With: </div>\r\n                                <div className=\"text-spot-yellow font-mono\">\r\n                                    {idClaimedWith}\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">Lore: </div>\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-48 h-6\"\r\n                                        placeholder=\"Scribble Field\"\r\n                                        value={textinputText1}\r\n                                        onChange={textinputUserText1.bind(this)}\r\n                                    />\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className=\"flex\">\r\n                                <div className=\" text-white pr-6\">ImgUrl: </div>\r\n                                <div className=\"text-white\">\r\n                                    <a href={`https://ipfs.moralis.io:2053/ipfs/${imgURLHash}`} target=\"_blank\"> https://ipfs.moralis.io:2053/ipfs/{imgURLHash}</a>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div><img src={`https://ipfs.moralis.io:2053/ipfs/${imgURLHash}`} alt=\"New Image\" className=\"m-0 h-96 pr-6 pt-2 text-white\"></img></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                {/* canvas div ends */}\r\n                {/* Stats div*/}\r\n                <div className=\"\">\r\n                    <div className=\"flex\">\r\n                        <div className=\"p-10 grid grid-cols-2 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-3 gap-5 font-mono text-spot-yellow\">{jsonMetaData.map((nfts) => {\r\n                            return (\r\n                                <div onClick={() => {\r\n                                    setNftId(nfts.token_id)\r\n                                    updateTraitMetaData(nfts)\r\n                                }}>\r\n                                    <div className=\"hover:z-0 rounded overflow-hidden shadow-lg bg-slate-700 hover: hover:scale-105 hover:bg-slate-500 duration-300\">\r\n                                        <div className=\"grid grid-cols-1\">\r\n                                            <img className=\"h-48 mx-auto pt-4\" src={nfts.normalized_metadata.image} alt={nfts.normalized_metadata.attributes[0].value}></img>\r\n                                            <div className=\"pt-4 pr-2 pl-2\">\r\n                                                <div className=\"font-bold text-md mb-2\">\r\n                                                    <div className=\"bg-slate-600\"> <h1>ID: {nfts.token_id}</h1></div>\r\n                                                    <h5 className=\"text-white\">Collector Name: {nfts.normalized_metadata.attributes[0].value}</h5>\r\n                                                    <div className=\"bg-slate-600\"><h5>Piece Name: {nfts.normalized_metadata.attributes[1].value}</h5></div>\r\n                                                    <h5 className=\"text-white\">Color: {nfts.normalized_metadata.attributes[2].value}</h5>\r\n                                                    <div className=\"bg-slate-600\"><h5>Noun: {nfts.normalized_metadata.attributes[3].value}</h5></div>\r\n                                                    <h5 className=\"text-white\">Collection Claimed with: {nfts.normalized_metadata.attributes[4].value}</h5>\r\n                                                    <div className=\"bg-slate-600\"><h5>ID Claimed with: {nfts.normalized_metadata.attributes[5].value}</h5></div>\r\n                                                </div>\r\n                                            </div></div>\r\n                                        <div className=\"px-6 pt-4 pb-2\">\r\n                                        </div>\r\n                                    </div></div>\r\n\r\n\r\n                            )\r\n                        })}</div>\r\n                    </div></div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\FileUpload.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleUpdateMeta.jsx",["611","612","613","614","615","616","617","618","619","620","621","622","623","624"],[],"import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport Moralis from \"moralis\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport nfTombstoneABI from \"../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { SCRIBBLECLAIM_ABI, SCRIBBLECLAIM_ADDRESS } from \"./Contracts/ScribbleContract\";\r\nimport { ENGRAVER_ABI, ENGRAVER_ADDRESS } from \"./Contracts/EngraverContract\";\r\nimport image1 from \"../assets/scribble/CARD_PLACEHOLDER.jpg\"\r\n\r\nexport default function ScribbleUpdateMetadata({\r\n    props,\r\n    chosenTrait,\r\n    walletTraits,\r\n    background,\r\n    behind,\r\n    flair,\r\n    ground,\r\n    tombstone,\r\n    top,\r\n    id,\r\n    saveImage,\r\n    account,\r\n    customNoun,\r\n    customColor,\r\n    pieceName,\r\n    collectorName,\r\n    imgURL,\r\n    scribbleNote,\r\n    collectionClaimedWith,\r\n    idClaimedWith,\r\n    nftId,\r\n    nftSelected,\r\n    txProcessing,\r\n    setTxProcessing,\r\n    ownedCards,\r\n    web3Provider,\r\n    tombstoneSelected,\r\n}) {\r\n\r\n\r\n\r\n    async function uploadToMoralis(filename, contents) {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: \"https://deep-index.moralis.io/api/v2/ipfs/uploadFolder\",\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"content-type\": \"application/json\",\r\n                \"X-API-Key\": process.env.REACT_APP_MORALIS_API_KEY,\r\n            },\r\n            data: [{ path: filename, content: contents }],\r\n        };\r\n\r\n        let response = await axios.request(options);\r\n\r\n        return response;\r\n    }\r\n\r\n    async function setTokenURI(tokenURI, nftId) {\r\n        setTxProcessing(true);\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                if (SCRIBBLECLAIM_ABI && SCRIBBLECLAIM_ADDRESS && signer) {\r\n                    const contract = new Contract(SCRIBBLECLAIM_ADDRESS, SCRIBBLECLAIM_ABI, signer);\r\n                    let options = {\r\n                        value: ethers.utils.parseEther(\".1\"),\r\n                    };\r\n\r\n                    let tx = await contract.changeURI(nftId, tokenURI);\r\n                    props.setTxProcessing(false);\r\n                    alert(\r\n                        \"Customized! Refresh the metadata on Campfire, Kalao or Joepegs!\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    async function customizeScribbleCard() {\r\n        setTxProcessing(true);\r\n        try {\r\n            let signature = await web3Provider\r\n                .getSigner()\r\n\r\n            const metadata = {\r\n                name: `SCRIBBLE CARD CUSTOM - ${nftId}`,\r\n                description: \"The official collectable trading cards of SCRIBBLE WARLOCK. \\n \\nA special subseries of claimable CUSTOMS that can be unlocked through the owning of a piece from one of SCRIBBLE WARLOCK'S listed collections: ABSTRACT, MIND MATTER, OVERLOAD, PEACHES N STRAWBS, RESONATE, TALES FROM THE SCRIBBLE WARLOCK, UNFINISHED, & WASTELAND. \\n \\nCUSTOMS claimable at: https://thespot.art/scribble\",\r\n                image: imgURL, //ipfs CID\r\n                attributes: [\r\n                    {\r\n                        trait_type: \"Collector's Name:\",\r\n                        value: collectorName,\r\n                    },\r\n                    {\r\n                        trait_type: \"Piece Name:\",\r\n                        value: pieceName,\r\n                    },\r\n                    {\r\n                        trait_type: \"Color\",\r\n                        value: customColor,\r\n                    },\r\n                    {\r\n                        trait_type: \"Noun\",\r\n                        value: customNoun,\r\n                    },\r\n                    {\r\n                        trait_type: \"Collection Claimed With\",\r\n                        value: collectionClaimedWith,\r\n                    },\r\n                    {\r\n                        trait_type: \"Claimed With ID\",\r\n                        value: idClaimedWith,\r\n                    },\r\n                    {\r\n                        trait_type: \"Lore\",\r\n                        value: scribbleNote,\r\n                    },\r\n                ],\r\n            };\r\n\r\n            let jsonResponse = await uploadToMoralis(`${nftId}-json.json`, metadata);\r\n\r\n            let jsonURL =\r\n                jsonResponse.data.length > 0 ? jsonResponse.data[0].path : \"\";\r\n            console.log(jsonURL);\r\n            await setTokenURI(jsonURL, nftId);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setTxProcessing(false);\r\n        }\r\n    }\r\n\r\n    if (txProcessing) {\r\n        return (\r\n            <div>\r\n                <button\r\n                    className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n                    disabled\r\n                >\r\n                    <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n                        <circle\r\n                            className=\"path\"\r\n                            cx=\"12\"\r\n                            cy=\"15\"\r\n                            r=\"10\"\r\n                            fill=\"yellow\"\r\n                            stroke=\"yellow\"\r\n                            strokeWidth=\"2\"\r\n                        ></circle>\r\n                    </svg>\r\n                    Processing...\r\n                </button>\r\n            </div>\r\n        );\r\n    } else\r\n        return (\r\n            <div className=\"flex w-full\">\r\n                <div className=\"w-full pr-5 pl-1\">\r\n                    <button\r\n                        className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base disabled:border-gray-600 disabled:hover:bg-gray-900 disabled:text-gray-600 disabled:hover:text-gray-600\"\r\n                        onClick={() => customizeScribbleCard()}\r\n                    >\r\n                        Update Metadata for Token {nftId}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n}","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\scribbleCustoms.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleCard.jsx",["625","626"],[],"import React from 'react'\r\nimport traits from '../traits';\r\n\r\nfunction Card(props) {\r\n  return (\r\n\r\n\r\n    <div className=\"rounded overflow-hidden shadow-lg bg-slate-700 hover: hover:scale-105 hover:bg-slate-500 duration-300 md:w-[200px] sm:w-[150px]\">\r\n      <img className=\"w-full\" src={props.image}></img>\r\n      <div className=\"px-6 py-4\">\r\n        <div className=\"font-bold text-l mb-2 pt-6\">\r\n          <div className=\"text-white text-xl pb-2\">Claim with</div>\r\n          <h4>{props.nftName}</h4>\r\n          <h4>ID: {props.id}</h4>\r\n        </div>\r\n      </div>\r\n      <div className=\"px-6 pt-4 pb-2\">\r\n      </div>\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\nexport default Card;","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\ScribbleContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\ScribbleCard1.jsx",["627","628"],[],"import React from 'react'\r\nimport traits from '../traits';\r\n\r\nfunction Card(props) {\r\n  return (\r\n\r\n\r\n    <div className=\"hover:z-0 rounded overflow-hidden shadow-lg bg-slate-700 hover:text-bold hover:scale-105 hover:bg-slate-500 duration-300\">\r\n      <img className=\"w-full\" src={props.image}></img>\r\n      <div className=\"px-6 py-4\">\r\n        <div className=\"font-bold text-l mb-2 pt-6\">\r\n          <div className=\"text-white text-xl pb-2\">Check if This NFT has Claimed a Custom</div>\r\n          <h4>{props.nftName}</h4>\r\n          <h4>ID: {props.id}</h4>\r\n        </div>\r\n      </div>\r\n      <div className=\"px-6 pt-4 pb-2\">\r\n      </div>\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\nexport default Card;","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\GoatdCard.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MainCard.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\NotActiveCard.jsx",["629"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TombStoneCard.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedCard.jsx",[],[],{"ruleId":"630","severity":1,"message":"631","line":77,"column":6,"nodeType":"632","endLine":77,"endColumn":21,"suggestions":"633"},{"ruleId":"630","severity":1,"message":"634","line":71,"column":6,"nodeType":"632","endLine":71,"endColumn":23,"suggestions":"635","suppressions":"636"},{"ruleId":"637","severity":1,"message":"638","line":2,"column":10,"nodeType":"639","messageId":"640","endLine":2,"endColumn":20},{"ruleId":"637","severity":1,"message":"641","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":20},{"ruleId":"637","severity":1,"message":"642","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":18},{"ruleId":"637","severity":1,"message":"643","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":21},{"ruleId":"637","severity":1,"message":"644","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":19},{"ruleId":"637","severity":1,"message":"645","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":22},{"ruleId":"637","severity":1,"message":"646","line":15,"column":8,"nodeType":"639","messageId":"640","endLine":15,"endColumn":15},{"ruleId":"637","severity":1,"message":"647","line":30,"column":9,"nodeType":"639","messageId":"640","endLine":30,"endColumn":24},{"ruleId":"637","severity":1,"message":"648","line":31,"column":9,"nodeType":"639","messageId":"640","endLine":31,"endColumn":28},{"ruleId":"637","severity":1,"message":"649","line":32,"column":9,"nodeType":"639","messageId":"640","endLine":32,"endColumn":24},{"ruleId":"637","severity":1,"message":"650","line":34,"column":22,"nodeType":"639","messageId":"640","endLine":34,"endColumn":35},{"ruleId":"637","severity":1,"message":"651","line":35,"column":9,"nodeType":"639","messageId":"640","endLine":35,"endColumn":28},{"ruleId":"637","severity":1,"message":"652","line":231,"column":10,"nodeType":"639","messageId":"640","endLine":231,"endColumn":21},{"ruleId":"653","severity":1,"message":"654","line":236,"column":3,"nodeType":"655","messageId":"656","endLine":238,"endColumn":4},{"ruleId":"653","severity":1,"message":"654","line":243,"column":3,"nodeType":"655","messageId":"656","endLine":245,"endColumn":4},{"ruleId":"653","severity":1,"message":"654","line":284,"column":3,"nodeType":"655","messageId":"656","endLine":286,"endColumn":4},{"ruleId":"637","severity":1,"message":"657","line":288,"column":10,"nodeType":"639","messageId":"640","endLine":288,"endColumn":19},{"ruleId":"637","severity":1,"message":"658","line":288,"column":21,"nodeType":"639","messageId":"640","endLine":288,"endColumn":33},{"ruleId":"637","severity":1,"message":"659","line":289,"column":10,"nodeType":"639","messageId":"640","endLine":289,"endColumn":23},{"ruleId":"637","severity":1,"message":"660","line":289,"column":25,"nodeType":"639","messageId":"640","endLine":289,"endColumn":41},{"ruleId":"637","severity":1,"message":"661","line":292,"column":18,"nodeType":"639","messageId":"640","endLine":292,"endColumn":27},{"ruleId":"637","severity":1,"message":"662","line":344,"column":12,"nodeType":"639","messageId":"640","endLine":344,"endColumn":22},{"ruleId":"637","severity":1,"message":"663","line":383,"column":9,"nodeType":"639","messageId":"640","endLine":383,"endColumn":19},{"ruleId":"664","severity":1,"message":"665","line":395,"column":42,"nodeType":"666","messageId":"667","endLine":395,"endColumn":44},{"ruleId":"637","severity":1,"message":"668","line":404,"column":10,"nodeType":"639","messageId":"640","endLine":404,"endColumn":16},{"ruleId":"637","severity":1,"message":"669","line":405,"column":10,"nodeType":"639","messageId":"640","endLine":405,"endColumn":15},{"ruleId":"630","severity":1,"message":"670","line":415,"column":5,"nodeType":"632","endLine":415,"endColumn":32,"suggestions":"671"},{"ruleId":"630","severity":1,"message":"672","line":456,"column":6,"nodeType":"632","endLine":474,"endColumn":4,"suggestions":"673"},{"ruleId":"630","severity":1,"message":"674","line":478,"column":6,"nodeType":"632","endLine":478,"endColumn":19,"suggestions":"675"},{"ruleId":"637","severity":1,"message":"676","line":505,"column":10,"nodeType":"639","messageId":"640","endLine":505,"endColumn":20},{"ruleId":"637","severity":1,"message":"677","line":516,"column":9,"nodeType":"639","messageId":"640","endLine":516,"endColumn":20},{"ruleId":"637","severity":1,"message":"678","line":1,"column":38,"nodeType":"639","messageId":"640","endLine":1,"endColumn":44},{"ruleId":"637","severity":1,"message":"679","line":1,"column":46,"nodeType":"639","messageId":"640","endLine":1,"endColumn":57},{"ruleId":"637","severity":1,"message":"680","line":11,"column":11,"nodeType":"639","messageId":"640","endLine":11,"endColumn":22},{"ruleId":"637","severity":1,"message":"681","line":12,"column":11,"nodeType":"639","messageId":"640","endLine":12,"endColumn":29},{"ruleId":"637","severity":1,"message":"649","line":13,"column":11,"nodeType":"639","messageId":"640","endLine":13,"endColumn":26},{"ruleId":"653","severity":1,"message":"654","line":43,"column":5,"nodeType":"655","messageId":"656","endLine":43,"endColumn":37},{"ruleId":"637","severity":1,"message":"682","line":44,"column":26,"nodeType":"639","messageId":"640","endLine":44,"endColumn":41},{"ruleId":"637","severity":1,"message":"657","line":45,"column":12,"nodeType":"639","messageId":"640","endLine":45,"endColumn":21},{"ruleId":"637","severity":1,"message":"658","line":45,"column":23,"nodeType":"639","messageId":"640","endLine":45,"endColumn":35},{"ruleId":"637","severity":1,"message":"659","line":46,"column":12,"nodeType":"639","messageId":"640","endLine":46,"endColumn":25},{"ruleId":"637","severity":1,"message":"660","line":46,"column":27,"nodeType":"639","messageId":"640","endLine":46,"endColumn":43},{"ruleId":"637","severity":1,"message":"683","line":47,"column":11,"nodeType":"639","messageId":"640","endLine":47,"endColumn":25},{"ruleId":"637","severity":1,"message":"684","line":49,"column":25,"nodeType":"639","messageId":"640","endLine":49,"endColumn":39},{"ruleId":"637","severity":1,"message":"663","line":78,"column":11,"nodeType":"639","messageId":"640","endLine":78,"endColumn":21},{"ruleId":"664","severity":1,"message":"665","line":87,"column":42,"nodeType":"666","messageId":"667","endLine":87,"endColumn":44},{"ruleId":"685","severity":1,"message":"686","line":113,"column":21,"nodeType":"687","endLine":113,"endColumn":79},{"ruleId":"637","severity":1,"message":"688","line":12,"column":13,"nodeType":"639","messageId":"640","endLine":12,"endColumn":26},{"ruleId":"637","severity":1,"message":"689","line":13,"column":19,"nodeType":"639","messageId":"640","endLine":13,"endColumn":31},{"ruleId":"637","severity":1,"message":"690","line":13,"column":40,"nodeType":"639","messageId":"640","endLine":13,"endColumn":53},{"ruleId":"637","severity":1,"message":"691","line":13,"column":89,"nodeType":"639","messageId":"640","endLine":13,"endColumn":105},{"ruleId":"637","severity":1,"message":"692","line":13,"column":118,"nodeType":"639","messageId":"640","endLine":13,"endColumn":133},{"ruleId":"637","severity":1,"message":"693","line":23,"column":19,"nodeType":"639","messageId":"640","endLine":23,"endColumn":36},{"ruleId":"637","severity":1,"message":"694","line":23,"column":45,"nodeType":"639","messageId":"640","endLine":23,"endColumn":63},{"ruleId":"637","severity":1,"message":"695","line":23,"column":104,"nodeType":"639","messageId":"640","endLine":23,"endColumn":125},{"ruleId":"637","severity":1,"message":"696","line":23,"column":138,"nodeType":"639","messageId":"640","endLine":23,"endColumn":158},{"ruleId":"630","severity":1,"message":"697","line":53,"column":7,"nodeType":"632","endLine":53,"endColumn":25,"suggestions":"698"},{"ruleId":"637","severity":1,"message":"699","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":19},{"ruleId":"637","severity":1,"message":"700","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":26},{"ruleId":"637","severity":1,"message":"701","line":2,"column":28,"nodeType":"639","messageId":"640","endLine":2,"endColumn":36},{"ruleId":"637","severity":1,"message":"642","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":18},{"ruleId":"637","severity":1,"message":"702","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":18},{"ruleId":"637","severity":1,"message":"645","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":22},{"ruleId":"637","severity":1,"message":"704","line":10,"column":3,"nodeType":"639","messageId":"640","endLine":10,"endColumn":20},{"ruleId":"637","severity":1,"message":"705","line":11,"column":3,"nodeType":"639","messageId":"640","endLine":11,"endColumn":16},{"ruleId":"637","severity":1,"message":"706","line":39,"column":12,"nodeType":"639","messageId":"640","endLine":39,"endColumn":23},{"ruleId":"637","severity":1,"message":"707","line":81,"column":15,"nodeType":"639","messageId":"640","endLine":81,"endColumn":22},{"ruleId":"637","severity":1,"message":"708","line":105,"column":11,"nodeType":"639","messageId":"640","endLine":105,"endColumn":20},{"ruleId":"637","severity":1,"message":"699","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":19},{"ruleId":"637","severity":1,"message":"700","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":26},{"ruleId":"637","severity":1,"message":"642","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":18},{"ruleId":"637","severity":1,"message":"709","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":15},{"ruleId":"637","severity":1,"message":"702","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":18},{"ruleId":"637","severity":1,"message":"645","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":22},{"ruleId":"637","severity":1,"message":"641","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":20},{"ruleId":"637","severity":1,"message":"642","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":18},{"ruleId":"637","severity":1,"message":"643","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":21},{"ruleId":"637","severity":1,"message":"644","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":19},{"ruleId":"637","severity":1,"message":"710","line":11,"column":10,"nodeType":"639","messageId":"640","endLine":11,"endColumn":21},{"ruleId":"637","severity":1,"message":"711","line":12,"column":10,"nodeType":"639","messageId":"640","endLine":12,"endColumn":29},{"ruleId":"637","severity":1,"message":"712","line":12,"column":31,"nodeType":"639","messageId":"640","endLine":12,"endColumn":54},{"ruleId":"637","severity":1,"message":"647","line":25,"column":11,"nodeType":"639","messageId":"640","endLine":25,"endColumn":26},{"ruleId":"637","severity":1,"message":"713","line":26,"column":11,"nodeType":"639","messageId":"640","endLine":26,"endColumn":29},{"ruleId":"637","severity":1,"message":"649","line":27,"column":11,"nodeType":"639","messageId":"640","endLine":27,"endColumn":26},{"ruleId":"637","severity":1,"message":"714","line":67,"column":12,"nodeType":"639","messageId":"640","endLine":67,"endColumn":21},{"ruleId":"653","severity":1,"message":"654","line":70,"column":5,"nodeType":"655","messageId":"656","endLine":70,"endColumn":33},{"ruleId":"653","severity":1,"message":"654","line":75,"column":5,"nodeType":"655","messageId":"656","endLine":75,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":100,"column":5,"nodeType":"655","messageId":"656","endLine":100,"endColumn":37},{"ruleId":"637","severity":1,"message":"657","line":102,"column":12,"nodeType":"639","messageId":"640","endLine":102,"endColumn":21},{"ruleId":"637","severity":1,"message":"658","line":102,"column":23,"nodeType":"639","messageId":"640","endLine":102,"endColumn":35},{"ruleId":"637","severity":1,"message":"659","line":103,"column":12,"nodeType":"639","messageId":"640","endLine":103,"endColumn":25},{"ruleId":"637","severity":1,"message":"660","line":103,"column":27,"nodeType":"639","messageId":"640","endLine":103,"endColumn":43},{"ruleId":"637","severity":1,"message":"683","line":104,"column":11,"nodeType":"639","messageId":"640","endLine":104,"endColumn":25},{"ruleId":"630","severity":1,"message":"674","line":111,"column":8,"nodeType":"632","endLine":111,"endColumn":21,"suggestions":"715"},{"ruleId":"637","severity":1,"message":"663","line":215,"column":11,"nodeType":"639","messageId":"640","endLine":215,"endColumn":21},{"ruleId":"664","severity":1,"message":"665","line":222,"column":48,"nodeType":"666","messageId":"667","endLine":222,"endColumn":50},{"ruleId":"630","severity":1,"message":"670","line":246,"column":8,"nodeType":"632","endLine":246,"endColumn":35,"suggestions":"716"},{"ruleId":"630","severity":1,"message":"717","line":277,"column":11,"nodeType":"632","endLine":277,"endColumn":59,"suggestions":"718"},{"ruleId":"637","severity":1,"message":"650","line":278,"column":24,"nodeType":"639","messageId":"640","endLine":278,"endColumn":37},{"ruleId":"637","severity":1,"message":"702","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":19},{"ruleId":"637","severity":1,"message":"647","line":34,"column":11,"nodeType":"639","messageId":"640","endLine":34,"endColumn":26},{"ruleId":"637","severity":1,"message":"719","line":35,"column":12,"nodeType":"639","messageId":"640","endLine":35,"endColumn":21},{"ruleId":"637","severity":1,"message":"720","line":35,"column":23,"nodeType":"639","messageId":"640","endLine":35,"endColumn":35},{"ruleId":"637","severity":1,"message":"721","line":36,"column":11,"nodeType":"639","messageId":"640","endLine":36,"endColumn":37},{"ruleId":"637","severity":1,"message":"713","line":37,"column":11,"nodeType":"639","messageId":"640","endLine":37,"endColumn":29},{"ruleId":"637","severity":1,"message":"722","line":39,"column":11,"nodeType":"639","messageId":"640","endLine":39,"endColumn":23},{"ruleId":"637","severity":1,"message":"723","line":40,"column":11,"nodeType":"639","messageId":"640","endLine":40,"endColumn":22},{"ruleId":"637","severity":1,"message":"724","line":41,"column":11,"nodeType":"639","messageId":"640","endLine":41,"endColumn":22},{"ruleId":"637","severity":1,"message":"725","line":42,"column":12,"nodeType":"639","messageId":"640","endLine":42,"endColumn":22},{"ruleId":"637","severity":1,"message":"726","line":42,"column":24,"nodeType":"639","messageId":"640","endLine":42,"endColumn":37},{"ruleId":"637","severity":1,"message":"707","line":220,"column":25,"nodeType":"639","messageId":"640","endLine":220,"endColumn":32},{"ruleId":"637","severity":1,"message":"708","line":244,"column":17,"nodeType":"639","messageId":"640","endLine":244,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":307,"column":26,"nodeType":"729","messageId":"730","endLine":307,"endColumn":28},{"ruleId":"653","severity":1,"message":"731","line":453,"column":1,"nodeType":"655","messageId":"732","endLine":467,"endColumn":14},{"ruleId":"637","severity":1,"message":"733","line":3035,"column":8,"nodeType":"639","messageId":"640","endLine":3035,"endColumn":17},{"ruleId":"637","severity":1,"message":"700","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":36},{"ruleId":"637","severity":1,"message":"734","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":17},{"ruleId":"637","severity":1,"message":"735","line":11,"column":8,"nodeType":"639","messageId":"640","endLine":11,"endColumn":14},{"ruleId":"637","severity":1,"message":"736","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":14},{"ruleId":"637","severity":1,"message":"737","line":13,"column":8,"nodeType":"639","messageId":"640","endLine":13,"endColumn":14},{"ruleId":"637","severity":1,"message":"738","line":14,"column":8,"nodeType":"639","messageId":"640","endLine":14,"endColumn":14},{"ruleId":"637","severity":1,"message":"739","line":15,"column":8,"nodeType":"639","messageId":"640","endLine":15,"endColumn":14},{"ruleId":"637","severity":1,"message":"740","line":30,"column":10,"nodeType":"639","messageId":"640","endLine":30,"endColumn":21},{"ruleId":"637","severity":1,"message":"741","line":30,"column":23,"nodeType":"639","messageId":"640","endLine":30,"endColumn":37},{"ruleId":"637","severity":1,"message":"719","line":31,"column":10,"nodeType":"639","messageId":"640","endLine":31,"endColumn":19},{"ruleId":"637","severity":1,"message":"720","line":31,"column":21,"nodeType":"639","messageId":"640","endLine":31,"endColumn":33},{"ruleId":"637","severity":1,"message":"742","line":40,"column":7,"nodeType":"639","messageId":"640","endLine":40,"endColumn":15},{"ruleId":"637","severity":1,"message":"743","line":44,"column":12,"nodeType":"639","messageId":"640","endLine":44,"endColumn":22},{"ruleId":"637","severity":1,"message":"700","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":36},{"ruleId":"637","severity":1,"message":"678","line":1,"column":38,"nodeType":"639","messageId":"640","endLine":1,"endColumn":44},{"ruleId":"637","severity":1,"message":"679","line":1,"column":46,"nodeType":"639","messageId":"640","endLine":1,"endColumn":57},{"ruleId":"637","severity":1,"message":"744","line":21,"column":24,"nodeType":"639","messageId":"640","endLine":21,"endColumn":39},{"ruleId":"637","severity":1,"message":"745","line":31,"column":7,"nodeType":"639","messageId":"640","endLine":31,"endColumn":12},{"ruleId":"637","severity":1,"message":"746","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":15},{"ruleId":"637","severity":1,"message":"747","line":1,"column":17,"nodeType":"639","messageId":"640","endLine":1,"endColumn":27},{"ruleId":"637","severity":1,"message":"748","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":13},{"ruleId":"637","severity":1,"message":"647","line":15,"column":9,"nodeType":"639","messageId":"640","endLine":15,"endColumn":24},{"ruleId":"637","severity":1,"message":"680","line":16,"column":9,"nodeType":"639","messageId":"640","endLine":16,"endColumn":20},{"ruleId":"637","severity":1,"message":"749","line":17,"column":9,"nodeType":"639","messageId":"640","endLine":17,"endColumn":14},{"ruleId":"637","severity":1,"message":"722","line":20,"column":9,"nodeType":"639","messageId":"640","endLine":20,"endColumn":21},{"ruleId":"637","severity":1,"message":"750","line":22,"column":10,"nodeType":"639","messageId":"640","endLine":22,"endColumn":22},{"ruleId":"637","severity":1,"message":"751","line":22,"column":24,"nodeType":"639","messageId":"640","endLine":22,"endColumn":39},{"ruleId":"637","severity":1,"message":"752","line":23,"column":10,"nodeType":"639","messageId":"640","endLine":23,"endColumn":26},{"ruleId":"637","severity":1,"message":"753","line":23,"column":28,"nodeType":"639","messageId":"640","endLine":23,"endColumn":47},{"ruleId":"637","severity":1,"message":"754","line":27,"column":10,"nodeType":"639","messageId":"640","endLine":27,"endColumn":21},{"ruleId":"637","severity":1,"message":"755","line":27,"column":23,"nodeType":"639","messageId":"640","endLine":27,"endColumn":37},{"ruleId":"637","severity":1,"message":"756","line":28,"column":10,"nodeType":"639","messageId":"640","endLine":28,"endColumn":21},{"ruleId":"637","severity":1,"message":"757","line":28,"column":23,"nodeType":"639","messageId":"640","endLine":28,"endColumn":37},{"ruleId":"637","severity":1,"message":"758","line":33,"column":10,"nodeType":"639","messageId":"640","endLine":33,"endColumn":26},{"ruleId":"637","severity":1,"message":"759","line":33,"column":28,"nodeType":"639","messageId":"640","endLine":33,"endColumn":47},{"ruleId":"637","severity":1,"message":"719","line":34,"column":10,"nodeType":"639","messageId":"640","endLine":34,"endColumn":19},{"ruleId":"637","severity":1,"message":"720","line":34,"column":21,"nodeType":"639","messageId":"640","endLine":34,"endColumn":33},{"ruleId":"630","severity":1,"message":"760","line":258,"column":6,"nodeType":"632","endLine":258,"endColumn":8,"suggestions":"761"},{"ruleId":"637","severity":1,"message":"762","line":331,"column":15,"nodeType":"639","messageId":"640","endLine":331,"endColumn":22},{"ruleId":"637","severity":1,"message":"763","line":401,"column":15,"nodeType":"639","messageId":"640","endLine":401,"endColumn":20},{"ruleId":"630","severity":1,"message":"764","line":470,"column":6,"nodeType":"632","endLine":470,"endColumn":12,"suggestions":"765"},{"ruleId":"637","severity":1,"message":"700","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":36},{"ruleId":"637","severity":1,"message":"748","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"637","severity":1,"message":"766","line":15,"column":9,"nodeType":"639","messageId":"640","endLine":15,"endColumn":23},{"ruleId":"637","severity":1,"message":"680","line":16,"column":9,"nodeType":"639","messageId":"640","endLine":16,"endColumn":20},{"ruleId":"637","severity":1,"message":"719","line":17,"column":10,"nodeType":"639","messageId":"640","endLine":17,"endColumn":19},{"ruleId":"637","severity":1,"message":"720","line":17,"column":21,"nodeType":"639","messageId":"640","endLine":17,"endColumn":33},{"ruleId":"637","severity":1,"message":"767","line":20,"column":12,"nodeType":"639","messageId":"640","endLine":20,"endColumn":25},{"ruleId":"768","severity":1,"message":"769","line":125,"column":13,"nodeType":"687","endLine":125,"endColumn":17},{"ruleId":"637","severity":1,"message":"681","line":23,"column":11,"nodeType":"639","messageId":"640","endLine":23,"endColumn":29},{"ruleId":"637","severity":1,"message":"649","line":24,"column":11,"nodeType":"639","messageId":"640","endLine":24,"endColumn":26},{"ruleId":"653","severity":1,"message":"654","line":35,"column":5,"nodeType":"655","messageId":"656","endLine":35,"endColumn":33},{"ruleId":"653","severity":1,"message":"654","line":44,"column":5,"nodeType":"655","messageId":"656","endLine":44,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":65,"column":5,"nodeType":"655","messageId":"656","endLine":65,"endColumn":37},{"ruleId":"637","severity":1,"message":"658","line":67,"column":23,"nodeType":"639","messageId":"640","endLine":67,"endColumn":35},{"ruleId":"664","severity":1,"message":"665","line":137,"column":42,"nodeType":"666","messageId":"667","endLine":137,"endColumn":44},{"ruleId":"630","severity":1,"message":"670","line":161,"column":8,"nodeType":"632","endLine":161,"endColumn":35,"suggestions":"770"},{"ruleId":"630","severity":1,"message":"717","line":190,"column":11,"nodeType":"632","endLine":190,"endColumn":59,"suggestions":"771"},{"ruleId":"637","severity":1,"message":"650","line":191,"column":24,"nodeType":"639","messageId":"640","endLine":191,"endColumn":37},{"ruleId":"637","severity":1,"message":"772","line":206,"column":12,"nodeType":"639","messageId":"640","endLine":206,"endColumn":22},{"ruleId":"637","severity":1,"message":"773","line":230,"column":12,"nodeType":"639","messageId":"640","endLine":230,"endColumn":20},{"ruleId":"630","severity":1,"message":"774","line":256,"column":8,"nodeType":"632","endLine":256,"endColumn":21,"suggestions":"775"},{"ruleId":"630","severity":1,"message":"776","line":265,"column":8,"nodeType":"632","endLine":265,"endColumn":21,"suggestions":"777"},{"ruleId":"778","severity":1,"message":"779","line":366,"column":59,"nodeType":"780","messageId":"781","endLine":366,"endColumn":60},{"ruleId":"778","severity":1,"message":"779","line":366,"column":119,"nodeType":"780","messageId":"781","endLine":366,"endColumn":120},{"ruleId":"778","severity":1,"message":"779","line":482,"column":55,"nodeType":"780","messageId":"781","endLine":482,"endColumn":56},{"ruleId":"778","severity":1,"message":"779","line":482,"column":115,"nodeType":"780","messageId":"781","endLine":482,"endColumn":116},{"ruleId":"637","severity":1,"message":"699","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":19},{"ruleId":"637","severity":1,"message":"700","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":26},{"ruleId":"637","severity":1,"message":"642","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":18},{"ruleId":"637","severity":1,"message":"720","line":18,"column":21,"nodeType":"639","messageId":"640","endLine":18,"endColumn":33},{"ruleId":"637","severity":1,"message":"681","line":19,"column":9,"nodeType":"639","messageId":"640","endLine":19,"endColumn":27},{"ruleId":"637","severity":1,"message":"649","line":20,"column":9,"nodeType":"639","messageId":"640","endLine":20,"endColumn":24},{"ruleId":"637","severity":1,"message":"680","line":22,"column":7,"nodeType":"639","messageId":"640","endLine":22,"endColumn":18},{"ruleId":"637","severity":1,"message":"782","line":24,"column":12,"nodeType":"639","messageId":"640","endLine":24,"endColumn":20},{"ruleId":"637","severity":1,"message":"708","line":91,"column":13,"nodeType":"639","messageId":"640","endLine":91,"endColumn":22},{"ruleId":"637","severity":1,"message":"642","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":18},{"ruleId":"637","severity":1,"message":"702","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":18},{"ruleId":"637","severity":1,"message":"707","line":38,"column":15,"nodeType":"639","messageId":"640","endLine":38,"endColumn":22},{"ruleId":"637","severity":1,"message":"707","line":76,"column":15,"nodeType":"639","messageId":"640","endLine":76,"endColumn":22},{"ruleId":"637","severity":1,"message":"783","line":99,"column":10,"nodeType":"639","messageId":"640","endLine":99,"endColumn":17},{"ruleId":"637","severity":1,"message":"707","line":114,"column":15,"nodeType":"639","messageId":"640","endLine":114,"endColumn":22},{"ruleId":"630","severity":1,"message":"784","line":134,"column":45,"nodeType":"632","endLine":134,"endColumn":55,"suggestions":"785"},{"ruleId":"637","severity":1,"message":"678","line":1,"column":38,"nodeType":"639","messageId":"640","endLine":1,"endColumn":44},{"ruleId":"637","severity":1,"message":"679","line":1,"column":46,"nodeType":"639","messageId":"640","endLine":1,"endColumn":57},{"ruleId":"637","severity":1,"message":"786","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":21},{"ruleId":"637","severity":1,"message":"787","line":10,"column":8,"nodeType":"639","messageId":"640","endLine":10,"endColumn":20},{"ruleId":"637","severity":1,"message":"647","line":25,"column":11,"nodeType":"639","messageId":"640","endLine":25,"endColumn":26},{"ruleId":"637","severity":1,"message":"680","line":26,"column":11,"nodeType":"639","messageId":"640","endLine":26,"endColumn":22},{"ruleId":"637","severity":1,"message":"788","line":31,"column":12,"nodeType":"639","messageId":"640","endLine":31,"endColumn":28},{"ruleId":"637","severity":1,"message":"789","line":31,"column":30,"nodeType":"639","messageId":"640","endLine":31,"endColumn":49},{"ruleId":"637","severity":1,"message":"790","line":32,"column":11,"nodeType":"639","messageId":"640","endLine":32,"endColumn":30},{"ruleId":"637","severity":1,"message":"791","line":33,"column":11,"nodeType":"639","messageId":"640","endLine":33,"endColumn":27},{"ruleId":"637","severity":1,"message":"792","line":34,"column":11,"nodeType":"639","messageId":"640","endLine":34,"endColumn":24},{"ruleId":"637","severity":1,"message":"793","line":35,"column":11,"nodeType":"639","messageId":"640","endLine":35,"endColumn":35},{"ruleId":"637","severity":1,"message":"794","line":36,"column":11,"nodeType":"639","messageId":"640","endLine":36,"endColumn":27},{"ruleId":"637","severity":1,"message":"795","line":37,"column":11,"nodeType":"639","messageId":"640","endLine":37,"endColumn":29},{"ruleId":"637","severity":1,"message":"796","line":38,"column":11,"nodeType":"639","messageId":"640","endLine":38,"endColumn":28},{"ruleId":"637","severity":1,"message":"797","line":39,"column":11,"nodeType":"639","messageId":"640","endLine":39,"endColumn":27},{"ruleId":"653","severity":1,"message":"654","line":95,"column":5,"nodeType":"655","messageId":"656","endLine":97,"endColumn":6},{"ruleId":"653","severity":1,"message":"654","line":107,"column":5,"nodeType":"655","messageId":"656","endLine":109,"endColumn":6},{"ruleId":"630","severity":1,"message":"798","line":179,"column":8,"nodeType":"632","endLine":179,"endColumn":20,"suggestions":"799"},{"ruleId":"727","severity":1,"message":"728","line":183,"column":24,"nodeType":"729","messageId":"730","endLine":183,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":200,"column":24,"nodeType":"729","messageId":"730","endLine":200,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":217,"column":24,"nodeType":"729","messageId":"730","endLine":217,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":234,"column":24,"nodeType":"729","messageId":"730","endLine":234,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":251,"column":24,"nodeType":"729","messageId":"730","endLine":251,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":268,"column":24,"nodeType":"729","messageId":"730","endLine":268,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":285,"column":24,"nodeType":"729","messageId":"730","endLine":285,"endColumn":26},{"ruleId":"727","severity":1,"message":"728","line":302,"column":24,"nodeType":"729","messageId":"730","endLine":302,"endColumn":26},{"ruleId":"637","severity":1,"message":"663","line":323,"column":11,"nodeType":"639","messageId":"640","endLine":323,"endColumn":21},{"ruleId":"664","severity":1,"message":"665","line":335,"column":44,"nodeType":"666","messageId":"667","endLine":335,"endColumn":46},{"ruleId":"727","severity":1,"message":"800","line":343,"column":34,"nodeType":"729","messageId":"730","endLine":343,"endColumn":36},{"ruleId":"727","severity":1,"message":"800","line":343,"column":57,"nodeType":"729","messageId":"730","endLine":343,"endColumn":59},{"ruleId":"630","severity":1,"message":"801","line":353,"column":8,"nodeType":"632","endLine":353,"endColumn":39,"suggestions":"802"},{"ruleId":"637","severity":1,"message":"803","line":355,"column":14,"nodeType":"639","messageId":"640","endLine":355,"endColumn":23},{"ruleId":"637","severity":1,"message":"707","line":376,"column":25,"nodeType":"639","messageId":"640","endLine":376,"endColumn":32},{"ruleId":"630","severity":1,"message":"804","line":425,"column":8,"nodeType":"632","endLine":425,"endColumn":32,"suggestions":"805"},{"ruleId":"637","severity":1,"message":"699","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":19},{"ruleId":"637","severity":1,"message":"700","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":26},{"ruleId":"637","severity":1,"message":"701","line":2,"column":28,"nodeType":"639","messageId":"640","endLine":2,"endColumn":36},{"ruleId":"637","severity":1,"message":"642","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":18},{"ruleId":"637","severity":1,"message":"702","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":18},{"ruleId":"637","severity":1,"message":"645","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":22},{"ruleId":"637","severity":1,"message":"704","line":10,"column":5,"nodeType":"639","messageId":"640","endLine":10,"endColumn":22},{"ruleId":"637","severity":1,"message":"705","line":11,"column":5,"nodeType":"639","messageId":"640","endLine":11,"endColumn":18},{"ruleId":"637","severity":1,"message":"806","line":14,"column":8,"nodeType":"639","messageId":"640","endLine":14,"endColumn":14},{"ruleId":"637","severity":1,"message":"743","line":45,"column":14,"nodeType":"639","messageId":"640","endLine":45,"endColumn":24},{"ruleId":"637","severity":1,"message":"707","line":75,"column":25,"nodeType":"639","messageId":"640","endLine":75,"endColumn":32},{"ruleId":"637","severity":1,"message":"708","line":98,"column":17,"nodeType":"639","messageId":"640","endLine":98,"endColumn":26},{"ruleId":"637","severity":1,"message":"678","line":1,"column":38,"nodeType":"639","messageId":"640","endLine":1,"endColumn":44},{"ruleId":"637","severity":1,"message":"679","line":1,"column":46,"nodeType":"639","messageId":"640","endLine":1,"endColumn":57},{"ruleId":"637","severity":1,"message":"807","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":14},{"ruleId":"637","severity":1,"message":"808","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":12},{"ruleId":"637","severity":1,"message":"809","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":23},{"ruleId":"637","severity":1,"message":"641","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":20},{"ruleId":"637","severity":1,"message":"642","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":18},{"ruleId":"637","severity":1,"message":"643","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":21},{"ruleId":"637","severity":1,"message":"644","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":19},{"ruleId":"637","severity":1,"message":"645","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":22},{"ruleId":"637","severity":1,"message":"810","line":16,"column":10,"nodeType":"639","messageId":"640","endLine":16,"endColumn":14},{"ruleId":"637","severity":1,"message":"811","line":35,"column":11,"nodeType":"639","messageId":"640","endLine":35,"endColumn":28},{"ruleId":"637","severity":1,"message":"812","line":44,"column":12,"nodeType":"639","messageId":"640","endLine":44,"endColumn":22},{"ruleId":"637","severity":1,"message":"650","line":44,"column":24,"nodeType":"639","messageId":"640","endLine":44,"endColumn":37},{"ruleId":"637","severity":1,"message":"813","line":54,"column":12,"nodeType":"639","messageId":"640","endLine":54,"endColumn":23},{"ruleId":"637","severity":1,"message":"814","line":57,"column":12,"nodeType":"639","messageId":"640","endLine":57,"endColumn":21},{"ruleId":"637","severity":1,"message":"815","line":63,"column":12,"nodeType":"639","messageId":"640","endLine":63,"endColumn":22},{"ruleId":"637","severity":1,"message":"816","line":67,"column":12,"nodeType":"639","messageId":"640","endLine":67,"endColumn":29},{"ruleId":"637","severity":1,"message":"817","line":67,"column":31,"nodeType":"639","messageId":"640","endLine":67,"endColumn":51},{"ruleId":"637","severity":1,"message":"818","line":71,"column":11,"nodeType":"639","messageId":"640","endLine":71,"endColumn":28},{"ruleId":"637","severity":1,"message":"819","line":81,"column":12,"nodeType":"639","messageId":"640","endLine":81,"endColumn":33},{"ruleId":"637","severity":1,"message":"820","line":83,"column":11,"nodeType":"639","messageId":"640","endLine":83,"endColumn":23},{"ruleId":"637","severity":1,"message":"707","line":99,"column":25,"nodeType":"639","messageId":"640","endLine":99,"endColumn":32},{"ruleId":"630","severity":1,"message":"821","line":122,"column":8,"nodeType":"632","endLine":122,"endColumn":22,"suggestions":"822"},{"ruleId":"637","severity":1,"message":"707","line":133,"column":25,"nodeType":"639","messageId":"640","endLine":133,"endColumn":32},{"ruleId":"653","severity":1,"message":"654","line":153,"column":5,"nodeType":"655","messageId":"656","endLine":155,"endColumn":6},{"ruleId":"637","severity":1,"message":"682","line":156,"column":26,"nodeType":"639","messageId":"640","endLine":156,"endColumn":41},{"ruleId":"637","severity":1,"message":"823","line":157,"column":25,"nodeType":"639","messageId":"640","endLine":157,"endColumn":39},{"ruleId":"630","severity":1,"message":"824","line":185,"column":8,"nodeType":"632","endLine":185,"endColumn":10,"suggestions":"825"},{"ruleId":"637","severity":1,"message":"826","line":187,"column":14,"nodeType":"639","messageId":"640","endLine":187,"endColumn":32},{"ruleId":"637","severity":1,"message":"663","line":202,"column":11,"nodeType":"639","messageId":"640","endLine":202,"endColumn":21},{"ruleId":"637","severity":1,"message":"827","line":206,"column":9,"nodeType":"639","messageId":"640","endLine":206,"endColumn":19},{"ruleId":"637","severity":1,"message":"828","line":214,"column":9,"nodeType":"639","messageId":"640","endLine":214,"endColumn":20},{"ruleId":"664","severity":1,"message":"665","line":214,"column":44,"nodeType":"666","messageId":"667","endLine":214,"endColumn":46},{"ruleId":"637","severity":1,"message":"829","line":281,"column":24,"nodeType":"639","messageId":"640","endLine":281,"endColumn":37},{"ruleId":"830","severity":1,"message":"831","line":433,"column":37,"nodeType":"687","messageId":"832","endLine":433,"endColumn":113,"fix":"833"},{"ruleId":"834","severity":1,"message":"835","line":438,"column":34,"nodeType":"687","endLine":438,"endColumn":153},{"ruleId":"637","severity":1,"message":"699","line":1,"column":10,"nodeType":"639","messageId":"640","endLine":1,"endColumn":19},{"ruleId":"637","severity":1,"message":"700","line":2,"column":17,"nodeType":"639","messageId":"640","endLine":2,"endColumn":26},{"ruleId":"637","severity":1,"message":"701","line":2,"column":28,"nodeType":"639","messageId":"640","endLine":2,"endColumn":36},{"ruleId":"637","severity":1,"message":"642","line":3,"column":8,"nodeType":"639","messageId":"640","endLine":3,"endColumn":18},{"ruleId":"637","severity":1,"message":"709","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":15},{"ruleId":"637","severity":1,"message":"702","line":5,"column":8,"nodeType":"639","messageId":"640","endLine":5,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":18},{"ruleId":"637","severity":1,"message":"645","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":22},{"ruleId":"637","severity":1,"message":"836","line":11,"column":10,"nodeType":"639","messageId":"640","endLine":11,"endColumn":22},{"ruleId":"637","severity":1,"message":"837","line":11,"column":24,"nodeType":"639","messageId":"640","endLine":11,"endColumn":40},{"ruleId":"637","severity":1,"message":"806","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":14},{"ruleId":"637","severity":1,"message":"707","line":72,"column":25,"nodeType":"639","messageId":"640","endLine":72,"endColumn":32},{"ruleId":"637","severity":1,"message":"838","line":76,"column":25,"nodeType":"639","messageId":"640","endLine":76,"endColumn":27},{"ruleId":"637","severity":1,"message":"708","line":93,"column":17,"nodeType":"639","messageId":"640","endLine":93,"endColumn":26},{"ruleId":"637","severity":1,"message":"839","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":14},{"ruleId":"685","severity":1,"message":"686","line":9,"column":7,"nodeType":"687","endLine":9,"endColumn":49},{"ruleId":"637","severity":1,"message":"839","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":14},{"ruleId":"685","severity":1,"message":"686","line":9,"column":7,"nodeType":"687","endLine":9,"endColumn":49},{"ruleId":"637","severity":1,"message":"840","line":7,"column":9,"nodeType":"639","messageId":"640","endLine":7,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'web3Modal'. Either include it or remove the dependency array.","ArrayExpression",["841"],"React Hook useCallback has missing dependencies: 'logoutOfWeb3Modal' and 'web3Modal'. Either include them or remove the dependency array.",["842"],["843"],"no-unused-vars","'useMoralis' is defined but never used.","Identifier","unusedVar","'Authenticate' is defined but never used.","'spotNFTAbi' is defined but never used.","'spotTraitsAbi' is defined but never used.","'SetApproval' is defined but never used.","'nfTombstoneABI' is defined but never used.","'sendNFT' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'nfTombstoneContract' is assigned a value but never used.","'spotNFTContract' is assigned a value but never used.","'setSavedImage' is assigned a value but never used.","'nfTombstoneMetaData' is assigned a value but never used.","'tombstoneId' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'apiLoaded' is assigned a value but never used.","'setApiLoaded' is assigned a value but never used.","'checkMyTraits' is assigned a value but never used.","'setCheckMyTraits' is assigned a value but never used.","'getTraits' is defined but never used.","'updateText' is defined but never used.","'searchText' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'height' is assigned a value but never used.","'width' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'windowHeight' and 'windowWidth'. Either exclude them or remove the dependency array.",["844"],"React Hook useEffect has missing dependencies: 'drawImage' and 'valueX2'. Either include them or remove the dependency array.",["845"],"React Hook useEffect has a missing dependency: 'updateTraitMetaData'. Either include it or remove the dependency array.",["846"],"'showButton' is assigned a value but never used.","'scrollToTop' is assigned a value but never used.","'useRef' is defined but never used.","'useCallback' is defined but never used.","'userAddress' is assigned a value but never used.","'spotTraitsContract' is assigned a value but never used.","'setWalletTraits' is assigned a value but never used.","'unnamedNFTdata' is assigned a value but never used.","'setChosenTrait' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'switchNetwork' is assigned a value but never used.","'approvalData' is assigned a value but never used.","'approvalError' is assigned a value but never used.","'approvalFetching' is assigned a value but never used.","'approvalLoading' is assigned a value but never used.","'checkApprovedData' is assigned a value but never used.","'checkApprovedError' is assigned a value but never used.","'checkApprovedFetching' is assigned a value but never used.","'checkApprovedLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkApprovedFetch'. Either include it or remove the dependency array.",["847"],"'stringify' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'unnamedData' is defined but never used.","'unnamedAbi' is defined but never used.","'TOMBSTONE_ADDRESS' is defined but never used.","'TOMBSTONE_ABI' is defined but never used.","'checkTraits' is defined but never used.","'options' is assigned a value but never used.","'signature' is assigned a value but never used.","'Moralis' is defined but never used.","'UNNAMED_ABI' is defined but never used.","'UNNAMEDBRANDING_ABI' is defined but never used.","'UNNAMEDBRANDING_ADDRESS' is defined but never used.","'unnamedNFTContract' is assigned a value but never used.","'unnamedID' is assigned a value but never used.",["848"],["849"],"React Hook useEffect has a missing dependency: 'drawImage'. Either include it or remove the dependency array.",["850"],"'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'unnamedNFTBrandingContract' is assigned a value but never used.","'spotContract' is assigned a value but never used.","'chosenTrait' is assigned a value but never used.","'chosenBrand' is assigned a value but never used.","'isApproved' is assigned a value but never used.","'setIsApproved' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Block is redundant.","redundantBlock","'image3035' is defined but never used.","'fragments' is defined but never used.","'goatd1' is defined but never used.","'goatd2' is defined but never used.","'goatd3' is defined but never used.","'goatd4' is defined but never used.","'goatd5' is defined but never used.","'spotsMinted' is assigned a value but never used.","'setSpotsMinted' is assigned a value but never used.","'observer' is assigned a value but never used.","'alertClick' is defined but never used.","'setFilterButton' is assigned a value but never used.","'Links' is assigned a value but never used.","'image11' is defined but never used.","'useContext' is defined but never used.","'axios' is defined but never used.","'chain' is assigned a value but never used.","'spotNftCount' is assigned a value but never used.","'setSpotNftCount' is assigned a value but never used.","'nftContractCount' is assigned a value but never used.","'setNftContractCount' is assigned a value but never used.","'claimButton' is assigned a value but never used.","'setClaimButton' is assigned a value but never used.","'stakeButton' is assigned a value but never used.","'setStakeButton' is assigned a value but never used.","'updateTimeButton' is assigned a value but never used.","'setUpdateTimeButton' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserClaimed'. Either include it or remove the dependency array.",["851"],"'staking' is assigned a value but never used.","'claim' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNFTsRemaining', 'getTimeLeft', and 'getUserClaimed'. Either include them or remove the dependency array.",["852"],"'analogContract' is assigned a value but never used.","'showVariation' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",["853"],["854"],"'traitFetch' is assigned a value but never used.","'pfpFecth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentDNA'. Either include it or remove the dependency array.",["855"],"React Hook useEffect has a missing dependency: 'currentDNA.length'. Either include it or remove the dependency array.",["856"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'getImage' is defined but never used.","'hasBeen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["857"],"'traitsCustoms' is defined but never used.","'DisplayCards' is defined but never used.","'contractSelected' is assigned a value but never used.","'setContractSelected' is assigned a value but never used.","'mindMattersContract' is assigned a value but never used.","'overloadContract' is assigned a value but never used.","'talesContract' is assigned a value but never used.","'peachesAndStrabsContract' is assigned a value but never used.","'abstractContract' is assigned a value but never used.","'unfinishedContract' is assigned a value but never used.","'wastelandContract' is assigned a value but never used.","'resonateContract' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNfts'. Either include it or remove the dependency array.",["858"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'colorAndNameEntered'. Either include it or remove the dependency array.",["859"],"'drawCards' is defined but never used.","React Hook useEffect has a missing dependency: 'getHasClaimed'. Either include it or remove the dependency array.",["860"],"'image1' is defined but never used.","'Select' is defined but never used.","'Card' is defined but never used.","'nftombstoneData' is defined but never used.","'json' is defined but never used.","'textinputUserText' is assigned a value but never used.","'savedImage' is assigned a value but never used.","'displayNfts' is assigned a value but never used.","'currentID' is assigned a value but never used.","'collection' is assigned a value but never used.","'pauseStateFlipped' is assigned a value but never used.","'setPauseStateFlipped' is assigned a value but never used.","'collectionOptions' is assigned a value but never used.","'collectionDescription' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPausedState'. Either include it or remove the dependency array.",["861"],"'setNftSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTraits'. Either include it or remove the dependency array.",["862"],"'displayPausedState' is defined but never used.","'dataSearch' is assigned a value but never used.","'ownedFilter' is assigned a value but never used.","'setOwnedCards' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"863","text":"864"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'ENGRAVER_ABI' is defined but never used.","'ENGRAVER_ADDRESS' is defined but never used.","'tx' is assigned a value but never used.","'traits' is defined but never used.","'onClickUrl' is assigned a value but never used.",{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"kind":"869","justification":"870"},{"desc":"871","fix":"872"},{"desc":"873","fix":"874"},{"desc":"875","fix":"876"},{"desc":"877","fix":"878"},{"desc":"875","fix":"879"},{"desc":"871","fix":"880"},{"desc":"881","fix":"882"},{"desc":"883","fix":"884"},{"desc":"885","fix":"886"},{"desc":"871","fix":"887"},{"desc":"881","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},[18348,18348]," rel=\"noreferrer\"","Update the dependencies array to be: [loadWeb3Modal, web3Modal]",{"range":"905","text":"906"},"Update the dependencies array to be: [logoutOfWeb3Modal, web3Modal]",{"range":"907","text":"908"},"directive","","Update the dependencies array to be: []",{"range":"909","text":"910"},"Update the dependencies array to be: [canvasImage, canvas, windowWidth, windowHeight, xInput, yInput, xInputText, yInputText, textinput, textinputText, fontSize, fontSizeText, textFontOptionsText, textFontStyleOptionsText, font, fontText, fontText1, drawImage, valueX2]",{"range":"911","text":"912"},"Update the dependencies array to be: [chosenTrait, updateTraitMetaData]",{"range":"913","text":"914"},"Update the dependencies array to be: [account, chainId, checkApprovedFetch]",{"range":"915","text":"916"},{"range":"917","text":"914"},{"range":"918","text":"910"},"Update the dependencies array to be: [canvasImage, canvas, windowWidth, windowHeight, drawImage]",{"range":"919","text":"920"},"Update the dependencies array to be: [getUserClaimed]",{"range":"921","text":"922"},"Update the dependencies array to be: [getNFTsRemaining, getTimeLeft, getUserClaimed, hide]",{"range":"923","text":"924"},{"range":"925","text":"910"},{"range":"926","text":"920"},"Update the dependencies array to be: [chosenTrait, currentDNA]",{"range":"927","text":"928"},"Update the dependencies array to be: [chosenTrait, currentDNA.length]",{"range":"929","text":"930"},"Update the dependencies array to be: [props, props.id]",{"range":"931","text":"932"},"Update the dependencies array to be: [collection, getNfts]",{"range":"933","text":"934"},"Update the dependencies array to be: [colorAndNameEntered, textinputText, textinputText1]",{"range":"935","text":"936"},"Update the dependencies array to be: [chosenTrait.ScribbleID, getHasClaimed]",{"range":"937","text":"938"},"Update the dependencies array to be: [getPausedState, txProcessing]",{"range":"939","text":"940"},"Update the dependencies array to be: [getTraits]",{"range":"941","text":"942"},[2702,2717],"[loadWeb3Modal, web3Modal]",[2572,2589],"[logoutOfWeb3Modal, web3Modal]",[13930,13957],"[]",[15647,15950],"[canvasImage, canvas, windowWidth, windowHeight, xInput, yInput, xInputText, yInputText, textinput, textinputText, fontSize, fontSizeText, textFontOptionsText, textFontStyleOptionsText, font, fontText, fontText1, drawImage, valueX2]",[16031,16044],"[chosenTrait, updateTraitMetaData]",[1998,2016],"[account, chainId, checkApprovedFetch]",[3735,3748],[9042,9069],[9909,9957],"[canvasImage, canvas, windowWidth, windowHeight, drawImage]",[9005,9007],"[getUserClaimed]",[14861,14867],"[getNFTsRemaining, getTimeLeft, getUserClaimed, hide]",[5307,5334],[6313,6361],[8485,8498],"[chosenTrait, currentDNA]",[8880,8893],"[chosenTrait, currentDNA.length]",[3824,3834],"[props, props.id]",[6611,6623],"[collection, getNfts]",[12218,12249],"[colorAndNameEntered, textinputText, textinputText1]",[15042,15066],"[chosenTrait.ScribbleID, getHasClaimed]",[4860,4874],"[getPausedState, txProcessing]",[7010,7012],"[getTraits]"]