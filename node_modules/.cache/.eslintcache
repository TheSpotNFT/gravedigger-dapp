[{"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\index.js":"1","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\App.js":"2","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\reportWebVitals.js":"3","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Authenticate.jsx":"4","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Nav.jsx":"5","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Footer.jsx":"6","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Board.jsx":"7","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Ded.jsx":"8","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\SpotEcosystem.jsx":"9","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\team.jsx":"10","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\roadmap.jsx":"11","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\helpers\\Web3Modal.jsx":"12","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\metadata.jsx":"13","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Logout.jsx":"14","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\traits.jsx":"15","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Card.jsx":"16","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\SetApproval.jsx":"17","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Engrave.jsx":"18","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MintCollection.jsx":"19","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TeamCard.jsx":"20","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\teamData.jsx":"21","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\TombstoneContract.js":"22","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\EngraverContract.js":"23","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Unnamed.jsx":"24","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedMint.jsx":"25","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\unnamedCardData.jsx":"26","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedMetaData.jsx":"27","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamednftContract.js":"28","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedBrandedContract.js":"29"},{"size":451,"mtime":1666830277803,"results":"30","hashOfConfig":"31"},{"size":5939,"mtime":1666927322471,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1666830277814,"results":"33","hashOfConfig":"31"},{"size":779,"mtime":1666830277794,"results":"34","hashOfConfig":"31"},{"size":2633,"mtime":1666933015922,"results":"35","hashOfConfig":"31"},{"size":201,"mtime":1666830277796,"results":"36","hashOfConfig":"31"},{"size":31998,"mtime":1666839786491,"results":"37","hashOfConfig":"31"},{"size":7063,"mtime":1666830277798,"results":"38","hashOfConfig":"31"},{"size":2501,"mtime":1666830277799,"results":"39","hashOfConfig":"31"},{"size":984,"mtime":1666830277799,"results":"40","hashOfConfig":"31"},{"size":4523,"mtime":1666830277799,"results":"41","hashOfConfig":"31"},{"size":730,"mtime":1666830277803,"results":"42","hashOfConfig":"31"},{"size":2760283,"mtime":1666830277814,"results":"43","hashOfConfig":"31"},{"size":1744,"mtime":1666830277796,"results":"44","hashOfConfig":"31"},{"size":86201,"mtime":1666830279637,"results":"45","hashOfConfig":"31"},{"size":569,"mtime":1666830277794,"results":"46","hashOfConfig":"31"},{"size":2636,"mtime":1666830277797,"results":"47","hashOfConfig":"31"},{"size":6246,"mtime":1666927536888,"results":"48","hashOfConfig":"31"},{"size":3315,"mtime":1666830277797,"results":"49","hashOfConfig":"31"},{"size":1192,"mtime":1666830277797,"results":"50","hashOfConfig":"31"},{"size":1713,"mtime":1666830277799,"results":"51","hashOfConfig":"31"},{"size":13270,"mtime":1666830277795,"results":"52","hashOfConfig":"31"},{"size":7013,"mtime":1666830277795,"results":"53","hashOfConfig":"31"},{"size":19499,"mtime":1666991876545,"results":"54","hashOfConfig":"31"},{"size":16890,"mtime":1666992627832,"results":"55","hashOfConfig":"31"},{"size":437267,"mtime":1666931142131,"results":"56","hashOfConfig":"31"},{"size":3516283,"mtime":1666840242164,"results":"57","hashOfConfig":"31"},{"size":15901,"mtime":1666927721431,"results":"58","hashOfConfig":"31"},{"size":16335,"mtime":1666927768099,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nuifj",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\index.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\App.js",["153","154","155","156","157","158"],["159"],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\reportWebVitals.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Authenticate.jsx",["160"],[],"import React from 'react';\r\nimport { useMoralis } from 'react-moralis'\r\nimport logo from \"../assets/5.jpg\"\r\n\r\nexport default function Authenticate({account, web3Modal, loadWeb3Modal, web3Provider, setWeb3Provider, logoutOfWeb3Modal}) {\r\n    \r\n  return (\r\n    <div className=\"bg-slate-900 flex w-full h-screen align-middle\">\r\n    <div className=\"m-auto\">\r\n    <img src={logo} className=\"max-w-md\" alt=\"Gravedigger Logo\"></img>\r\n    <div className=\"align-middle px-40 py-10\">\r\n    <button className=\"align-middle rounded-lg px-4 py-2 border-4 border-spot-yellow text-spot-yellow \r\n    hover:bg-spot-yellow hover:text-black duration-300 hover:border-white font-mono text-l\" onClick={() => loadWeb3Modal()}><b>Authenticate</b></button>\r\n    </div>\r\n    </div>\r\n      </div>\r\n  )\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Nav.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Footer.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Board.jsx",["161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],[],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Select from \"react-select\";\r\nimport Card from \"../Card\";\r\nimport traits from \"../../traits\";\r\nimport nftombstoneData from \"../../contracts/nftombstoneMetadata.json\";\r\nimport { useMoralis, useWeb3ExecuteFunction } from \"react-moralis\";\r\nimport Moralis from \"moralis\";\r\nimport Authenticate from \"../Authenticate\";\r\nimport spotNFTAbi from \"../../contracts/spotNFTAbi.json\";\r\nimport spotTraitsAbi from \"../../contracts/spotTraitsAbi.json\";\r\nimport SetApproval from \"../SetApproval\";\r\nimport Engrave from \"../Engrave\";\r\nimport \"../../Board.css\";\r\nimport nfTombstoneABI from \"../../contracts/nfTombstoneABI.json\";\r\nimport axios from \"axios\";\r\nimport MintCollection from \"../../components/MintCollection\";\r\nimport { TOMBSTONE_ADDRESS } from \"../Contracts/TombstoneContract\";\r\n\r\nexport const Board = ({\r\n  account,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  web3Provider,\r\n  setWeb3Provider,\r\n  logoutOfWeb3Modal,\r\n  txProcessing,\r\n  setTxProcessing,\r\n}) => {\r\n  const isAuthenticated = Boolean(account);\r\n  const userAddress = account;\r\n  const nfTombstoneContract = \"0xe3525413c2a15daec57C92234361934f510356b8\"; //change to mainnet address\r\n  const spotNFTContract = \"0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC\";\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [savedImage, setSavedImage] = useState(\"empty image\"); //Saving image for sending to IPFS. This part isn't active yet!\r\n  const contractProcessor = useWeb3ExecuteFunction();\r\n  const nfTombstoneMetaData = nftombstoneData;\r\n\r\n  //for text on canvas\r\n  const [textinput, setTextinput] = useState(\"Gravedigger\");\r\n  const [xInput, setXInput] = useState(\"160\");\r\n  const [yInput, setYInput] = useState(\"260\");\r\n  const [fontSize, setFontSize] = useState(\"30\");\r\n  const [xInputX2, setXInputX2] = useState(\"163\");\r\n  const [yInputX2, setYInputX2] = useState(\"260\");\r\n  const [fontSizeX2, setFontSizeX2] = useState(\"30\");\r\n  const [font, setFont] = useState(\"Gala\");\r\n  const [fontStyle, setFontStyle] = useState(\"normal\");\r\n\r\n  const [textinputText, setTextinputText] = useState(\"A Spot\");\r\n  const [xInputText, setXInputText] = useState(\"198\");\r\n  const [yInputText, setYInputText] = useState(\"287\");\r\n  const [fontSizeText, setFontSizeText] = useState(\"15\");\r\n  const [xInputTextX2, setXInputTextX2] = useState(\"201\");\r\n  const [yInputTextX2, setYInputTextX2] = useState(\"287\");\r\n  const [fontSizeTextX2, setFontSizeTextX2] = useState(\"15\");\r\n  const [fontText, setFontText] = useState(\"Durka\");\r\n  const [fontStyleText, setFontStyleText] = useState(\"normal\");\r\n\r\n  const [textinputText1, setTextinputText1] = useState(\"Production\");\r\n  const [xInputText1, setXInputText1] = useState(\"177\");\r\n  const [yInputText1, setYInputText1] = useState(\"310\");\r\n  const [fontSizeText1, setFontSizeText1] = useState(\"15\");\r\n  const [xInputText1X2, setXInputText1X2] = useState(\"180\");\r\n  const [yInputText1X2, setYInputText1X2] = useState(\"313\");\r\n  const [fontSizeText1X2, setFontSizeText1X2] = useState(\"15\");\r\n  const [fontText1, setFontText1] = useState(\"Durka\");\r\n  const [fontStyleText1, setFontStyleText1] = useState(\"normal\");\r\n\r\n  //Sliders\r\n\r\n  const getBackgroundSize = () => {\r\n    return { backgroundSize: `${(xInput * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize1 = () => {\r\n    return { backgroundSize: `${(yInput * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize2 = () => {\r\n    return { backgroundSize: `${(xInputText * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize3 = () => {\r\n    return { backgroundSize: `${(yInputText * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize4 = () => {\r\n    return { backgroundSize: `${(xInputText1 * 100) / 350}% 100%` };\r\n  };\r\n  const getBackgroundSize5 = () => {\r\n    return { backgroundSize: `${(yInputText1 * 100) / 350}% 100%` };\r\n  };\r\n\r\n  //user input text vars\r\n\r\n  const textinputUser = (event) => {\r\n    setTextinput(event.target.value);\r\n  };\r\n  const userFontSize = (event) => {\r\n    setFontSize(event.target.value);\r\n  };\r\n  const textinputUserText = (event) => {\r\n    setTextinputText(event.target.value);\r\n  };\r\n  const userFontSizeText = (event) => {\r\n    setFontSizeText(event.target.value);\r\n  };\r\n  const textinputUserText1 = (event) => {\r\n    setTextinputText1(event.target.value);\r\n  };\r\n  const userFontSizeText1 = (event) => {\r\n    setFontSizeText1(event.target.value);\r\n  };\r\n\r\n  //name font info\r\n  const textFontOptions = [\r\n    { value: \"Comic Sans MS\", label: \"Comic Sans MS\" },\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Sans-serif\", label: \"Sans-serif\" },\r\n    { value: \"Serif\", label: \"Serif\" },\r\n    { value: \"Cambria\", label: \"Cambria\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n\r\n  const textFontStyleOptions = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n\r\n  //epitaph line 1\r\n  const textFontOptionsText = [\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n\r\n  const textFontStyleOptionsText = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n  //epitaph line 2\r\n  const textFontOptionsText1 = [\r\n    { value: \"Courier New\", label: \"Courier New\" },\r\n    { value: \"Times New Roman\", label: \"Times New Roman\" },\r\n    { value: \"Fantasy\", label: \"Fantasy\" },\r\n    { value: \"Blade\", label: \"Blade\" },\r\n    { value: \"Bombing\", label: \"Bombing\" },\r\n    { value: \"Devil\", label: \"Devil\" },\r\n    { value: \"Drip\", label: \"Drip\" },\r\n    { value: \"Durka\", label: \"Durka\" },\r\n    { value: \"Emm\", label: \"Emm\" },\r\n    { value: \"Eternal\", label: \"Eternal\" },\r\n    { value: \"Fresh\", label: \"Fresh\" },\r\n    { value: \"Gala\", label: \"Gala\" },\r\n    { value: \"Metal\", label: \"Metal\" },\r\n    { value: \"Predator\", label: \"Predator\" },\r\n    { value: \"Simple\", label: \"Simple\" },\r\n  ];\r\n  const textFontStyleOptionsText1 = [\r\n    { value: \"normal\", label: \"Normal\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n\r\n  const handleChange = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFont(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyle = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyle(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeText = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontText(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyleText = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyleText(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeText1 = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontText1(selectedOption.value);\r\n  };\r\n\r\n  const handleChangeStyleText1 = (selectedOption) => {\r\n    console.log(\"handleChange\", selectedOption.value);\r\n    setFontStyleText1(selectedOption.value);\r\n  };\r\n\r\n  //For Metadata\r\n  const [tomebstoneBackground, setTombstoneBackground] = useState();\r\n  const [tombstoneBase, setTombstoneBase] = useState();\r\n  const [tombstoneBehind, setTomstoneBehind] = useState();\r\n  const [tombstoneFlair, setTombstoneFlair] = useState();\r\n  const [tombstoneGround, setTombstoneGround] = useState();\r\n  const [tombstoneTop, setTombstoneTop] = useState();\r\n  const [tombstoneId, setTombstoneId] = useState();\r\n  const [name, setName] = useState();\r\n  const [epitaph, setEpitaph] = useState();\r\n  const [epitaph1, setEpitaph1] = useState();\r\n\r\n  {\r\n    /* For Image retrieval */\r\n  }\r\n  const [canvasImage, setCanvasImage] = useState({\r\n    TombStone: \"\",\r\n    Text: \"\",\r\n  });\r\n  {\r\n    /* For Traits retrieval */\r\n  }\r\n  const [chosenTrait, setChosenTrait] = useState({\r\n    TombStone: \"1\",\r\n    TombStoneID: \"1\",\r\n    BackGround: \"\",\r\n    Base: \"\",\r\n    Behind: \"\",\r\n    Flair: \"\",\r\n    Ground: \"\",\r\n    Top: \"\",\r\n    Name: \"\",\r\n    Epitaph: \"\",\r\n  });\r\n\r\n  /*To fetch users nfts\r\n\r\n    function fetchUsersNfts() {\r\n        const options = {\r\n            method: 'GET',\r\n            url: `https://deep-index.moralis.io/api/v2/${userAddress}/nft`,\r\n            params: { chain: 'avalanche', format: 'decimal' },\r\n            headers: { accept: 'application/json', 'X-API-Key': 'test' }\r\n        };\r\n\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n*/\r\n  /*Set an array of save UnnamedNFT traits which are unburnable and available to all.\r\n    const start = 3000;\r\n    const end = 3009;\r\n    const branding = [...Array(end - start + 1).keys()].map(x => x + start);\r\n    */\r\n  {\r\n    /* For retrieval of traits */\r\n  }\r\n  const [walletTraits, setWalletTraits] = useState([]);\r\n  const [apiLoaded, setApiLoaded] = useState(false);\r\n  const [checkMyTraits, setCheckMyTraits] = useState(false);\r\n  const [tombstoneSelected, setTombstoneSelected] = useState(false);\r\n\r\n  async function getTraits() {\r\n    // const options = {\r\n    //   chain: \"0xa869\",\r\n    //   address: account,\r\n    //   token_address: TOMBSTONE_ADDRESS,\r\n    // };\r\n    // Moralis.Web3API.account.getNFTsForContract(options).then((data) => {\r\n    //   const result = data.result;\r\n    //   setWalletTraits(result.map((nft) => nft.token_id));\r\n    //   setApiLoaded(true);\r\n    // });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getTraits = async () => {\r\n      const options = {\r\n        method: \"GET\",\r\n        url: `https://deep-index.moralis.io/api/v2/${account}/nft`,\r\n        params: {\r\n          chain: \"avalanche\",\r\n          format: \"decimal\",\r\n          token_addresses: TOMBSTONE_ADDRESS,\r\n        },\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"X-API-Key\": 'dHttwdzMWC7XigAxZtqBpTet7Lih3MqBRzUAIjXne0TIhJzXG4wrpdDUmXPPQFXo', //process.env.REACT_APP_MORALIS_API_KEY\r\n        },\r\n      };\r\n      try {\r\n        let response = await axios.request(options);\r\n        console.log(response);\r\n        let data = response.data;\r\n        setWalletTraits(data.result.map((nft) => nft.token_id));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    getTraits();\r\n  }, [account]);\r\n\r\n  function valueX2() {\r\n    setFontSizeTextX2(fontSizeText * 2);\r\n    setFontSizeText1X2(fontSizeText1 * 2);\r\n    setFontSizeX2(fontSize * 2);\r\n    setXInputX2(xInput * 2);\r\n    setYInputX2(yInput * 2);\r\n    setXInputTextX2(xInputText * 2);\r\n    setYInputTextX2(yInputText * 2);\r\n    setXInputText1X2(xInputText1 * 2);\r\n    setYInputText1X2(yInputText1 * 2);\r\n  }\r\n\r\n  function updateText() {\r\n    drawImage(canvasImage.TombStone);\r\n  }\r\n\r\n  function updateCanvasTraits(trait) {\r\n    setCanvasImage((prevImage) => ({\r\n      ...prevImage,\r\n      [trait.traitType]: trait.image,\r\n    }));\r\n    setChosenTrait((prevTrait) => ({\r\n      ...prevTrait,\r\n      [trait.traitType]: trait.traitName,\r\n      [trait.traitType + \"ID\"]: trait.id,\r\n    }));\r\n    setTombstoneSelected(true);\r\n  }\r\n\r\n  function createCard(trait) {\r\n    //Building the card here from Card.jsx passing props and simultaneously fetching traits on click.\r\n    return (\r\n      <div\r\n        key={trait.edition}\r\n        onClick={() => {\r\n          updateCanvasTraits(trait);\r\n        }}\r\n      >\r\n        {\" \"}\r\n        <Card\r\n          nftName={trait.nftName}\r\n          traitType={trait.traitType}\r\n          traitName={trait.traitName}\r\n          image={trait.image}\r\n          id={trait.id}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // For Searching traits\r\n  const searchText = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  let dataSearch = traits.filter((item) => {\r\n    return Object.keys(item).some((key) =>\r\n      item[key]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(filter.toString().toLowerCase())\r\n    );\r\n  });\r\n  let ownedFilter = traits.filter((item) => {\r\n    if (walletTraits.includes(item.id.toString())) {\r\n      return item;\r\n    }\r\n  });\r\n\r\n  // Putting stuff on Canvas\r\n  const canvas = useRef(null);\r\n  const hiddenCanvas = useRef(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [width, setWidth] = useState(null);\r\n  const { windowWidth } = useState(window.innerWidth);\r\n  const { windowHeight } = useState(window.innerHeight);\r\n  const div = useCallback(\r\n    (node) => {\r\n      if (node !== null) {\r\n        setHeight(node.getBoundingClientRect().height); //set height and width of canvas relative to parent div.\r\n        setWidth(node.getBoundingClientRect().width);\r\n      }\r\n    },\r\n    [windowWidth, windowHeight]\r\n  );\r\n  //visible canvas\r\n  function drawImage(layer) {\r\n    const img = new Image();\r\n    //img.setAttribute('crossOrigin', '*');\r\n    img.src = layer;\r\n    img.onload = () => {\r\n      const ctx = canvas.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(img, 0, 0, 450, 450);\r\n      ctx.font = `${fontStyle} ${fontSize}px ${font}`;\r\n      ctx.fillText(textinput, xInput, yInput, 150);\r\n      ctx.font = `${fontStyleText} ${fontSizeText}px ${fontText}`;\r\n      ctx.fillText(textinputText, xInputText, yInputText, 150);\r\n      ctx.font = `${fontStyleText1} ${fontSizeText1}px ${fontText1}`;\r\n      ctx.fillText(textinputText1, xInputText1, yInputText1, 150);\r\n    };\r\n    //hidden canvas\r\n    const imgHidden = new Image();\r\n    imgHidden.src = layer;\r\n    imgHidden.onload = () => {\r\n      const ctxHidden = hiddenCanvas.current.getContext(\"2d\");\r\n      ctxHidden.clearRect(0, 0, hiddenCanvas.width, hiddenCanvas.height);\r\n      ctxHidden.drawImage(imgHidden, 0, 0, 900, 900);\r\n      ctxHidden.font = `${fontStyle} ${fontSizeX2}px ${font}`;\r\n      ctxHidden.fillText(textinput, xInputX2, yInputX2, 300);\r\n      ctxHidden.font = `${fontStyleText} ${fontSizeTextX2}px ${fontText}`;\r\n      ctxHidden.fillText(textinputText, xInputTextX2, yInputTextX2, 300);\r\n      ctxHidden.font = `${fontStyleText1} ${fontSizeText1X2}px ${fontText1}`;\r\n      ctxHidden.fillText(textinputText1, xInputText1X2, yInputText1X2, 300);\r\n    };\r\n    setName(textinput);\r\n    setEpitaph(textinputText);\r\n    setEpitaph1(textinputText1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    drawImage(canvasImage.TombStone);\r\n    drawImage(canvasImage.Text);\r\n    valueX2();\r\n  }, [\r\n    canvasImage,\r\n    canvas,\r\n    windowWidth,\r\n    windowHeight,\r\n    xInput,\r\n    yInput,\r\n    xInputText,\r\n    yInputText,\r\n    textinput,\r\n    textinputText,\r\n    fontSize,\r\n    fontSizeText,\r\n    textFontOptionsText,\r\n    textFontStyleOptionsText,\r\n    font,\r\n    fontText,\r\n    fontText1,\r\n  ]); //redrawn on changes\r\n\r\n  useEffect(() => {\r\n    updateTraitMetaData();\r\n  }, [chosenTrait]);\r\n\r\n  function updateTraitMetaData() {\r\n    setTombstoneBackground(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[0].value\r\n    );\r\n    setTomstoneBehind(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[1].value\r\n    );\r\n    setTombstoneBase(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[2].value\r\n    );\r\n    setTombstoneFlair(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[3].value\r\n    );\r\n    setTombstoneTop(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[4].value\r\n    );\r\n    setTombstoneGround(\r\n      nftombstoneData[`${chosenTrait.TombStoneID - 1}`].attributes[5].value\r\n    );\r\n    setTombstoneId(chosenTrait.TombStoneID);\r\n  }\r\n\r\n  async function activateTombstone() {\r\n    await Moralis.enableWeb3();\r\n    const options = {\r\n      contractAddress: \"0xe3525413c2a15daec57C92234361934f510356b8\", //NFTombstone mainnet\r\n      functionName: \"changeActiveTombstone\",\r\n      abi: nfTombstoneABI,\r\n      params: {\r\n        _newTombstone: chosenTrait.TombStoneID, //NFTombstone mainnet\r\n      },\r\n    };\r\n    await contractProcessor.fetch({\r\n      params: options,\r\n    });\r\n    const transaction = await Moralis.executeFunction(options);\r\n    await transaction.wait();\r\n  }\r\n\r\n  function saveImage() {\r\n    const result = new Promise((resolve, reject) => {\r\n      const imageToSave = new Image();\r\n      imageToSave.src = hiddenCanvas.current.toDataURL(\"image/png\", 1.0);\r\n      imageToSave.onload = function () {\r\n        resolve(this.src);\r\n      };\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // Add feature: Filter owned trait cards\r\n  const [ownedCards, setOwnedCards] = useState(true);\r\n  //---------------------------------//\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <Authenticate\r\n        account={account}\r\n        web3Modal={web3Modal}\r\n        loadWeb3Modal={loadWeb3Modal}\r\n        web3Provider={web3Provider}\r\n        setWeb3Provider={setWeb3Provider}\r\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n      />\r\n    );\r\n  }\r\n  // Main Component Return\r\n  return (\r\n    <div className=\"container flex-auto mx-auto w-full\">\r\n      {/* Canvas Row*/}\r\n      <div className=\"lg:sticky top-20 grid 2xl:grid-cols-2 xl:grid-cols-2 lg:grid-cols-2 md:grid-cols-1 sm:grid-cols-1 gap-4 mt-1 ml-6 sm:p-5 bg-slate-900 lg:pb-3\">\r\n        {/* canvas div */}\r\n\r\n        <div\r\n          className=\"p-1 mb-10 sm:mb-10\"\r\n          ref={div}\r\n          style={{ height: \"30rem\", width: \"30rem\" }}\r\n        >\r\n          <canvas\r\n            ref={canvas}\r\n            width=\"450px\"\r\n            height=\"450px\"\r\n            className=\"mt-1 border-1 border-4 border-slate-500 text-center content-center p-5\"\r\n          />\r\n          <div className=\"text-center pb-2 md: pl-10\">\r\n            <h1 className=\"font-mono text-lg text-yellow-400 pt-1\">\r\n              Gravedigger\r\n            </h1>\r\n          </div>\r\n          <canvas\r\n            ref={hiddenCanvas}\r\n            width=\"900px\"\r\n            height=\"900px\"\r\n            className=\"hidden\"\r\n          />\r\n        </div>\r\n        {/* canvas div ends */}\r\n        {/* Stats div*/}\r\n        <div\r\n          className=\"grow border-dashed border-4 border-slate-500 p-3 pl-5 m-1 text-left col-span-1 w-80 md:mt-10 lg:mt-2 mt-10 sm:mt-10 text-sm\"\r\n          style={{ height: \"28rem\", width: \"22rem\" }}\r\n        >\r\n          {/* Individual Stats */}\r\n          <div className=\"font-mono text-white list-none flex pb-3\">\r\n            <div\r\n              className={`text-${walletTraits.includes(`${chosenTrait.TombStoneID}`)\r\n                ? \"spot-yellow\"\r\n                : \"[red]\"\r\n                } font-bold pr-3 pl-2`}\r\n            >\r\n              TombStone ID:{\" \"}\r\n            </div>\r\n            {chosenTrait.TombStoneID}\r\n          </div>\r\n\r\n          <div className=\"font-mono text-white list-none flex pb-3\">\r\n            <div className=\"text-spot-yellow pl-2 pr-2\">Name: </div>\r\n            {textinput}\r\n          </div>\r\n          <Engrave\r\n            chosenTrait={chosenTrait}\r\n            walletTraits={walletTraits}\r\n            background={tomebstoneBackground}\r\n            behind={tombstoneBehind}\r\n            flair={tombstoneFlair}\r\n            ground={tombstoneGround}\r\n            tombstone={tombstoneBase}\r\n            top={tombstoneTop}\r\n            id={chosenTrait.TombStoneID}\r\n            saveImage={saveImage}\r\n            account={account}\r\n            canvas={chosenTrait}\r\n            savedImage={savedImage}\r\n            name={name}\r\n            epitaph={`${epitaph + \" \" + epitaph1} `}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}\r\n            ownedCards={ownedCards}\r\n            web3Provider={web3Provider}\r\n            tombstoneSelected={tombstoneSelected}\r\n          />\r\n          {/* End of Indiv Stats */}\r\n          {/* Buttons */}\r\n          {/*  <div className=\"pt-1 pb-1 flex\">\r\n\r\n                            <Engrave\r\n                                chosenTrait={chosenTrait}\r\n                                walletTraits={walletTraits}\r\n                                background={tomebstoneBackground}\r\n                                behind={tombstoneBehind}\r\n                                flair={tombstoneFlair}\r\n                                ground={tombstoneGround}\r\n                                tombstone={tombstoneBase}\r\n                                top={tombstoneTop}\r\n                                id={chosenTrait.TombStoneID}\r\n                                saveImage={saveImage}\r\n                                userAddress={userAddress}\r\n                                canvas={chosenTrait}\r\n                                savedImage={savedImage}\r\n                                name={name}\r\n                                epitaph={`${(epitaph) + \" \" + (epitaph1)} `}\r\n                            />\r\n                        </div>*/}\r\n          <div className=\"font-mono text-white list-none flex pb-3 text-sm pl-2 pt-2\">\r\n            <div className=\"text-[red] pr-2 text-xl\">* </div>\r\n            TombStone not in your wallet.\r\n          </div>\r\n          <div className=\"flex pr-2\">\r\n            {\" \"}\r\n            <button\r\n              className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\"\r\n              onClick={() => {\r\n                setOwnedCards(!ownedCards);\r\n              }}\r\n            >\r\n              {!ownedCards ? \"My TombStones\" : \"View All TombStones\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={activateTombstone}>Activate Tombstone {chosenTrait.TombStoneID}</button></div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pt-2'>\r\n\r\n                            Activate your tombstone to send ded nfts to it. You may only have 1 tombstone activate at a time.\r\n                        </div>*/}\r\n          <MintCollection\r\n            account={account}\r\n            txProcessing={txProcessing}\r\n            setTxProcessing={setTxProcessing}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"gap-4 pt-8 pl-2 grid grid-col-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-4\">Name: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinput}\r\n                onChange={textinputUser.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInput}\r\n                  onChange={(e) => setXInput(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInput}\r\n                  onChange={(e) => setYInput(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize1()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSize}\r\n                onChange={userFontSize.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptions}\r\n                onChange={handleChange}\r\n                defaultValue={{ label: \"Gala\", value: \"Gala\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptions}\r\n                onChange={handleChangeStyle}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-1\">Epitaph: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinputText}\r\n                onChange={textinputUserText.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInputText}\r\n                  onChange={(e) => setXInputText(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize2()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInputText}\r\n                  onChange={(e) => setYInputText(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize3()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSizeText}\r\n                onChange={userFontSizeText.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptionsText}\r\n                onChange={handleChangeText}\r\n                defaultValue={{ label: \"Durka\", value: \"Durka\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptionsText}\r\n                onChange={handleChangeStyleText}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex\">\r\n            <div className=\"col-span-2 text-white pr-1\">Epitaph: </div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-24\"\r\n                placeholder=\"Engrave\"\r\n                value={textinputText1}\r\n                onChange={textinputUserText1.bind(this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-2 text-white px-2\">X: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={xInputText1}\r\n                  onChange={(e) => setXInputText1(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize4()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Y: </div>\r\n            <div className=\"slideContainer\">\r\n              <div className=\"pt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={350}\r\n                  id=\"slider\"\r\n                  className=\"slider\"\r\n                  value={yInputText1}\r\n                  onChange={(e) => setYInputText1(e.target.valueAsNumber)}\r\n                  style={getBackgroundSize5()}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-1 text-white px-2\">Size: </div>\r\n            <div className=\"pr-2\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"border-2 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 w-12\"\r\n                placeholder=\"Font size\"\r\n                value={fontSizeText1}\r\n                onChange={userFontSizeText1.bind(this)}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontOptionsText1}\r\n                onChange={handleChangeText1}\r\n                defaultValue={{ label: \"Durka\", value: \"Durka\" }}\r\n              />\r\n            </div>\r\n            <div className=\"w-36\">\r\n              <Select\r\n                options={textFontStyleOptionsText1}\r\n                onChange={handleChangeStyleText1}\r\n                defaultValue={{ label: \"Normal\", value: \"normal\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Canvas Row Div Ends*/}\r\n      <div className=\"overflow-y-auto\">\r\n        <div className=\"p-10 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-6 gap-5 font-mono text-spot-yellow\">\r\n          {ownedCards\r\n            ? ownedFilter.map(createCard)\r\n            : dataSearch.map(createCard)}\r\n        </div>\r\n      </div>\r\n      <div className=\"blade text-slate-900\">T</div>\r\n      <div className=\"bombing text-slate-900\">H</div>\r\n      <div className=\"devil text-slate-900\">E</div>\r\n      <div className=\"drip text-slate-900\">S</div>\r\n      <div className=\"durka text-slate-900\">P</div>\r\n      <div className=\"emm text-slate-900\">O</div>\r\n      <div className=\"eternal text-slate-900\">T</div>\r\n      <div className=\"fresh text-slate-900\">2</div>\r\n      <div className=\"gala text-slate-900\">0</div>\r\n      <div className=\"metal text-slate-900\">2</div>\r\n      <div className=\"predator text-slate-900\">2</div>\r\n      <div className=\"simple text-slate-900\">!</div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Ded.jsx",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Card from '../Card';\r\nimport traits from '../../traits';\r\nimport unnamedData from '../../metadata.jsx'\r\nimport { useMoralis, useWeb3ExecuteFunction } from \"react-moralis\";\r\nimport Moralis from 'moralis';\r\nimport Authenticate from '../Authenticate';\r\nimport SetApproval from '../SetApproval';\r\nimport Engrave from '../Engrave';\r\nimport '../../Board.css'\r\nimport nfTombstoneABI from '../../contracts/nfTombstoneABI.json';\r\nimport axios from 'axios';\r\n\r\nexport const Ded = ({account}) => {\r\n    const isAuthenticated = Boolean(account);\r\n    const userAddress = account\r\n    const spotTraitsContract = \"0x6BDAd2A83a8e70F459786a96a0a9159574685c0e\";\r\n    const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n    const [filter, setFilter] = useState('');\r\n    const contractProcessor = useWeb3ExecuteFunction();\r\n\r\n    function fetchUsersNfts() {\r\n        const options = {\r\n            method: 'GET',\r\n            url: `https://deep-index.moralis.io/api/v2/${userAddress}/nft`,\r\n            params: { chain: 'avalanche', format: 'decimal' },\r\n            headers: { accept: 'application/json', 'X-API-Key': 'test' }\r\n        };\r\n\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data);\r\n                console.log(response.data.result[10].metadata['image']);\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsersNfts()\r\n\r\n    }\r\n        , [])\r\n\r\n\r\n    {/* For retrieval of traits */ }\r\n    const [walletTraits, setWalletTraits] = useState([])\r\n    const [apiLoaded, setApiLoaded] = useState(false)\r\n    const [checkMyTraits, setCheckMyTraits] = useState(false)\r\n    const unnamedNFTdata = unnamedData;\r\n\r\n    const [chosenTrait, setChosenTrait] = useState({\r\n        TombStone: '1',\r\n        TombStoneID: '1',\r\n        BackGround: '',\r\n        Base: '',\r\n        Behind: '',\r\n        Flair: '',\r\n        Ground: '',\r\n        Top: '',\r\n        Name: '',\r\n        Epitaph: '',\r\n    })\r\n\r\n    function getNFTsAddress() {\r\n        const options = { chain: \"0xa86a\", address: userAddress, token_address: spotTraitsContract };\r\n        Moralis.Web3API.account.getNFTsForContract(options).then((data) => {\r\n            const result = data.result\r\n            setWalletTraits(result.map(nft => nft.token_id))\r\n            setApiLoaded(true)\r\n        });\r\n    }\r\n\r\n\r\n    function createCard(trait) { //Building the card here from Card.jsx passing props and simultaneously fetching traits on click.\r\n        return (\r\n\r\n            <div key={trait.edition} onClick={() => {\r\n\r\n            }}> <Card\r\n                    nftName={trait.nftName}\r\n                    traitType={trait.traitType}\r\n                    traitName={trait.traitName}\r\n                    image={trait.image}\r\n                    id={trait.id}\r\n                /></div>\r\n        )\r\n    }\r\n\r\n    // For Searching traits\r\n    const searchText = (event) => {\r\n        setFilter(event.target.value);\r\n    }\r\n\r\n\r\n    let dataSearch = traits.filter(item => {\r\n        return Object.keys(item).some(key => item[key].toString().toLowerCase().includes(filter.toString().toLowerCase())\r\n        )\r\n    });\r\n    let ownedFilter = traits.filter(item => {\r\n\r\n        if (walletTraits.includes(item.id.toString())) {\r\n\r\n            return item\r\n        }\r\n\r\n    })\r\n\r\n    // Add feature: Filter owned trait cards\r\n    const [ownedCards, setOwnedCards] = useState(false)\r\n    //---------------------------------//\r\n\r\n\r\n    if (!isAuthenticated) {\r\n        return (\r\n            <Authenticate />\r\n        );\r\n    } else\r\n        // Main Component Return\r\n        return (\r\n            <div className='container flex-auto mx-auto w-full'>\r\n\r\n                {/* Canvas Row*/}\r\n                <div className=\"lg:sticky top-20 grid 2xl:grid-cols-2 xl:grid-cols-2 lg:grid-cols-2 md:grid-cols-1 sm:grid-cols-1 gap-4 mt-1 ml-6 sm:p-5 bg-slate-900 lg:pb-3\">\r\n                    {/* canvas div */}\r\n                    <img className=\"w-full\" src=\"../../tombstoneimages/1.png\"></img>\r\n\r\n                    {/* canvas div ends */}\r\n                    {/* Stats div*/}\r\n                    <div className='grow border-dashed border-4 border-slate-500 p-3 pl-5 m-1 text-left col-span-1 w-80 md:mt-10 lg:mt-2 mt-10 sm:mt-10 text-sm' style={{ height: \"25rem\", width: \"22rem\" }}>\r\n                        {/* Individual Stats */}\r\n                        <div className='font-mono text-white list-none flex pb-3'>\r\n                            <div className=\"text-red font-bold pr-3 pl-2\">TombStone: </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className='font-mono text-white list-none flex pb-3'>\r\n                            <div className='text-spot-yellow pl-2'>Name: </div>\r\n\r\n                        </div>\r\n                        {/* End of Indiv Stats */}\r\n                        {/* Buttons */}\r\n                        <div className=\"pt-1 pb-1 flex\">\r\n\r\n                            {/* <Mint\r\n\r\n                                walletTraits={walletTraits}\r\n\r\n                                userAddress={userAddress}\r\n\r\n\r\n\r\n                            /> */}\r\n                        </div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pl-2 pt-2'>\r\n                            <div className='text-[red] pr-2 text-xl'>* </div>\r\n                            TombStone not in your wallet.\r\n                        </div>\r\n                        <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\" onClick={() => {\r\n                                setOwnedCards(!ownedCards)\r\n                            }}>{!ownedCards ? 'My TombStones' : 'View All TombStones'}</button></div>\r\n                        <div className=\"flex pr-2\"> <button className=\"w-full m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200\r\n    hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\">Activate Tombstone {chosenTrait.TombStoneID}</button></div>\r\n                        <div className='font-mono text-white list-none flex pb-3 text-sm pt-2'>\r\n\r\n                            Activate your tombstone to send ded nfts to it. You may only have 1 tombstone activate at a time.\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>{/* Canvas Row Div Ends*/}\r\n                <div className='overflow-y-auto'>\r\n                    <div className=\"p-10 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-6 gap-5 font-mono text-spot-yellow\">\r\n                        {ownedCards ? ownedFilter.map(createCard) : dataSearch.map(createCard)}\r\n                    </div></div>\r\n            </div >\r\n\r\n        )\r\n\r\n}\r\nexport default Ded;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\SpotEcosystem.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\team.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\roadmap.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\helpers\\Web3Modal.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\metadata.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Logout.jsx",["207","208"],[],"import React from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\n//import Authenticate from \"./Authenticate\";\r\nimport { useChain } from \"react-moralis\";\r\n\r\nfunction LogoutButton({\r\n  account,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  web3Provider,\r\n  setWeb3Provider,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  // const { logout, isAuthenticating, account } = useMoralis();\r\n  // const { switchNetwork, chainId } = useChain();\r\n  if (account) {\r\n    return (\r\n      <div className=\"text-right md:flex align-middle py-0\">\r\n        <div className=\"align-middle py-2\">\r\n          {/* <h1 className=\"text-slate-600 text-right font-mono px-10 py-0\"><b>Wallet:</b> {(chainId===\"0xa86a\")?account.substring(0,5)+'...'+account.slice(-4):<button className=\"text-[red]\" onClick={()=>switchNetwork(\"0xa86a\")}>Switch to Avalanche!</button>}</h1> */}\r\n        </div>\r\n        <button\r\n          className=\"rounded-lg px-4 py-0 border-4 border-white text-xl font-mono font-bold text-slate-700 \r\n            hover:bg-white hover:border-black hover:text-gray-900 duration-300\"\r\n          onClick={() => logoutOfWeb3Modal()}\r\n        >\r\n          {account.substring(0, 5) +\r\n            \"...\" +\r\n            account.substring(account.length - 4)}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"text-right md:flex align-middle py-0\">\r\n      <div className=\"align-middle py-2\">\r\n        <button\r\n          className=\"rounded-lg px-4 py-0 border-4 border-white text-xl font-mono font-bold text-slate-700 \r\n            hover:bg-white hover:border-black hover:text-gray-900 duration-300\"\r\n          onClick={() => loadWeb3Modal()}\r\n        >\r\n          Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogoutButton;\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\traits.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Card.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\SetApproval.jsx",["209","210","211","212","213","214","215","216","217","218"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useMoralis, useWeb3ExecuteFunction, useChain } from \"react-moralis\";\r\nimport spotTraitsAbi from '../contracts/spotTraitsAbi.json';\r\n\r\n\r\nfunction SetApproval() {\r\n  //isApprovedForAll(account, operator) - function imported from OpenZeppelin IERC1155\r\n  //setApprovalForAll(operator, approved) - function imported from OpenZeppelin IERC1155\r\n  const spotTraitsContract = \"0x9521807adf320d1cdf87afdf875bf438d1d92d87\";\r\n  const spotNFTContract = '0x9455aa2aF62B529E49fBFE9D10d67990C0140AFC';\r\n    const { account } = useMoralis();\r\n    const { switchNetwork, chainId } = useChain()\r\n    const { data: approvalData, error: approvalError, fetch: approvalFetch, isFetching: approvalFetching, isLoading: approvalLoading } = useWeb3ExecuteFunction({\r\n        abi: spotTraitsAbi,\r\n        contractAddress: spotTraitsContract,\r\n        functionName: \"setApprovalForAll\",\r\n        params: {\r\n        operator: spotNFTContract,\r\n        approved: true\r\n             },\r\n         });\r\n\r\n    const { data: checkApprovedData, error: checkApprovedError, fetch: checkApprovedFetch, isFetching: checkApprovedFetching, isLoading: checkApprovedLoading } = useWeb3ExecuteFunction({\r\n    abi: spotTraitsAbi,\r\n    contractAddress: spotTraitsContract,\r\n    functionName: \"isApprovedForAll\",\r\n    params: {\r\n        account: account,\r\n        operator: spotNFTContract\r\n            },\r\n        });\r\n    const [traitsApproved, setTraitsApproved] = useState(false)\r\n    \r\n    function changeUITrue() {\r\n        setTraitsApproved(true)\r\n    }\r\n    function changeUIFalse() {\r\n        setTraitsApproved(false)\r\n    }\r\n    const handleSuccessfulApproval = async (tx) => {\r\n        await tx.wait(1)\r\n        changeUITrue()\r\n    }\r\n\r\n    useEffect(()=>{\r\n      const checkApproval = async ()=>{\r\n        const result = await checkApprovedFetch();\r\n        if (result) {\r\n          changeUITrue();\r\n        } else changeUIFalse();\r\n      }\r\n      checkApproval()\r\n    },[account, chainId])\r\n  \r\n  \r\n    return (\r\n    <div>\r\n        <button className={!traitsApproved?\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 text-gray-200 hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-base\":\"m-2 rounded-lg px-4 py-2 border-2 border-gray-200 bg-gray-500 text-gray-900 font-mono font-bold text-base\"} \r\n     onClick={async()=>{\r\n     if(traitsApproved){\r\n        return;\r\n     }\r\n     await approvalFetch({\r\n         onSuccess: handleSuccessfulApproval,\r\n     })\r\n     }}>{traitsApproved?'Traits Approved':'Approve My Traits'}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetApproval;","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Engrave.jsx",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\MintCollection.jsx",["238","239","240","241","242","243","244"],[],"import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport spotNFTAbi from \"../contracts/spotNFTAbi.json\";\r\nimport Moralis from \"moralis\";\r\nimport unnamedData from \"../metadata\";\r\nimport unnamedAbi from \"../contracts/spotNFTAbi.json\";\r\nimport nfTombstoneABI from \"../contracts/nfTombstoneABI.json\";\r\nimport {\r\n  TOMBSTONE_ADDRESS,\r\n  TOMBSTONE_ABI,\r\n} from \"./Contracts/TombstoneContract\";\r\nimport { Contract, ethers } from \"ethers\";\r\n\r\nexport default function MintCollection(props) {\r\n  const [textinput, setTextinput] = useState(\"1\");\r\n\r\n  const textinputUser = (event) => {\r\n    setTextinput(event.target.value);\r\n  };\r\n\r\n  async function mintNFT() {\r\n    props.setTxProcessing(true);\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        if (TOMBSTONE_ABI && TOMBSTONE_ADDRESS && signer) {\r\n          const contract = new Contract(\r\n            TOMBSTONE_ADDRESS,\r\n            TOMBSTONE_ABI,\r\n            signer\r\n          );\r\n\r\n          let options = {\r\n            // price is 0.666 avax\r\n            value: ethers.utils.parseEther(`${textinput * 0.666}`),\r\n          };\r\n\r\n          let tx = await contract.mint(textinput, options);\r\n          console.log(tx.hash);\r\n          props.setTxProcessing(false);\r\n          alert(\r\n            \"Minted Successfully! View your NFT on Campfire, Kalao or Joepegs!\"\r\n          );\r\n        } else {\r\n          console.log(\"error with contract abi, address, or signer\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error on mint\");\r\n      console.log(error);\r\n    } finally {\r\n      props.setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  if (props.txProcessing) {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"inline-flex m-1 rounded-lg px-4 py-2 border-2 border-spot-yellow text-spot-yellow\r\n     duration-300 font-mono font-bold text-base\"\r\n          disabled\r\n        >\r\n          <svg className=\"inline animate-ping h-5 w-5 mr-3\" viewBox=\"0 0 35 35\">\r\n            <circle\r\n              className=\"path\"\r\n              cx=\"12\"\r\n              cy=\"15\"\r\n              r=\"10\"\r\n              fill=\"yellow\"\r\n              stroke=\"yellow\"\r\n              strokeWidth=\"2\"\r\n            ></circle>\r\n          </svg>\r\n          Processing...\r\n        </button>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"flex w-full\">\r\n        <div className=\"w-full flex pr-5 pl-1\">\r\n          <div className=\"flex pr-4 pt-2\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"border-2 h-3/4 border-slate-600 bg-slate-400 text-left font-mono placeholder-slate-600 pl-2 pr-4 w-24\"\r\n              placeholder=\"Amount\"\r\n              value={textinput}\r\n              onChange={textinputUser.bind(this)}\r\n            />{\" \"}\r\n          </div>\r\n          <button\r\n            className=\"m-1 w-full rounded-lg px-1 py-1 border-2 border-gray-200 text-gray-200\r\n     hover:bg-gray-200 hover:text-gray-900 duration-300 font-mono font-bold text-sm\"\r\n            disabled={props.txProcesssing}\r\n            onClick={() => mintNFT()}\r\n          >\r\n            Mint New Tombstone\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\TeamCard.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\teamData.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\TombstoneContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\EngraverContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\pages\\Unnamed.jsx",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\UnnamedMint.jsx",["273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\unnamedCardData.jsx",["291"],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedMetaData.jsx",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamednftContract.js",[],[],"C:\\Users\\jjzim\\github\\gravedigger-dapp\\src\\components\\Contracts\\UnnamedBrandedContract.js",[],[],{"ruleId":"292","severity":1,"message":"293","line":3,"column":10,"nodeType":"294","messageId":"295","endLine":3,"endColumn":20},{"ruleId":"292","severity":1,"message":"296","line":3,"column":22,"nodeType":"294","messageId":"295","endLine":3,"endColumn":39},{"ruleId":"292","severity":1,"message":"297","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":20},{"ruleId":"292","severity":1,"message":"298","line":7,"column":10,"nodeType":"294","messageId":"295","endLine":7,"endColumn":18},{"ruleId":"292","severity":1,"message":"299","line":12,"column":8,"nodeType":"294","messageId":"295","endLine":12,"endColumn":15},{"ruleId":"300","severity":1,"message":"301","line":72,"column":6,"nodeType":"302","endLine":72,"endColumn":21,"suggestions":"303"},{"ruleId":"300","severity":1,"message":"304","line":66,"column":6,"nodeType":"302","endLine":66,"endColumn":23,"suggestions":"305","suppressions":"306"},{"ruleId":"292","severity":1,"message":"293","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":20},{"ruleId":"292","severity":1,"message":"293","line":6,"column":10,"nodeType":"294","messageId":"295","endLine":6,"endColumn":20},{"ruleId":"292","severity":1,"message":"307","line":9,"column":8,"nodeType":"294","messageId":"295","endLine":9,"endColumn":18},{"ruleId":"292","severity":1,"message":"308","line":10,"column":8,"nodeType":"294","messageId":"295","endLine":10,"endColumn":21},{"ruleId":"292","severity":1,"message":"309","line":11,"column":8,"nodeType":"294","messageId":"295","endLine":11,"endColumn":19},{"ruleId":"292","severity":1,"message":"310","line":30,"column":9,"nodeType":"294","messageId":"295","endLine":30,"endColumn":20},{"ruleId":"292","severity":1,"message":"311","line":31,"column":9,"nodeType":"294","messageId":"295","endLine":31,"endColumn":28},{"ruleId":"292","severity":1,"message":"312","line":32,"column":9,"nodeType":"294","messageId":"295","endLine":32,"endColumn":24},{"ruleId":"292","severity":1,"message":"313","line":34,"column":22,"nodeType":"294","messageId":"295","endLine":34,"endColumn":35},{"ruleId":"292","severity":1,"message":"314","line":36,"column":9,"nodeType":"294","messageId":"295","endLine":36,"endColumn":28},{"ruleId":"292","severity":1,"message":"315","line":222,"column":10,"nodeType":"294","messageId":"295","endLine":222,"endColumn":21},{"ruleId":"316","severity":1,"message":"317","line":227,"column":3,"nodeType":"318","messageId":"319","endLine":229,"endColumn":4},{"ruleId":"316","severity":1,"message":"317","line":234,"column":3,"nodeType":"318","messageId":"319","endLine":236,"endColumn":4},{"ruleId":"316","severity":1,"message":"317","line":275,"column":3,"nodeType":"318","messageId":"319","endLine":277,"endColumn":4},{"ruleId":"292","severity":1,"message":"320","line":279,"column":10,"nodeType":"294","messageId":"295","endLine":279,"endColumn":19},{"ruleId":"292","severity":1,"message":"321","line":279,"column":21,"nodeType":"294","messageId":"295","endLine":279,"endColumn":33},{"ruleId":"292","severity":1,"message":"322","line":280,"column":10,"nodeType":"294","messageId":"295","endLine":280,"endColumn":23},{"ruleId":"292","severity":1,"message":"323","line":280,"column":25,"nodeType":"294","messageId":"295","endLine":280,"endColumn":41},{"ruleId":"292","severity":1,"message":"324","line":283,"column":18,"nodeType":"294","messageId":"295","endLine":283,"endColumn":27},{"ruleId":"292","severity":1,"message":"325","line":335,"column":12,"nodeType":"294","messageId":"295","endLine":335,"endColumn":22},{"ruleId":"292","severity":1,"message":"326","line":374,"column":9,"nodeType":"294","messageId":"295","endLine":374,"endColumn":19},{"ruleId":"327","severity":1,"message":"328","line":386,"column":42,"nodeType":"329","messageId":"330","endLine":386,"endColumn":44},{"ruleId":"292","severity":1,"message":"331","line":395,"column":10,"nodeType":"294","messageId":"295","endLine":395,"endColumn":16},{"ruleId":"292","severity":1,"message":"332","line":396,"column":10,"nodeType":"294","messageId":"295","endLine":396,"endColumn":15},{"ruleId":"300","severity":1,"message":"333","line":406,"column":5,"nodeType":"302","endLine":406,"endColumn":32,"suggestions":"334"},{"ruleId":"300","severity":1,"message":"335","line":447,"column":6,"nodeType":"302","endLine":465,"endColumn":4,"suggestions":"336"},{"ruleId":"300","severity":1,"message":"337","line":469,"column":6,"nodeType":"302","endLine":469,"endColumn":19,"suggestions":"338"},{"ruleId":"292","severity":1,"message":"339","line":493,"column":18,"nodeType":"294","messageId":"295","endLine":493,"endColumn":35},{"ruleId":"292","severity":1,"message":"340","line":1,"column":38,"nodeType":"294","messageId":"295","endLine":1,"endColumn":44},{"ruleId":"292","severity":1,"message":"341","line":1,"column":46,"nodeType":"294","messageId":"295","endLine":1,"endColumn":57},{"ruleId":"292","severity":1,"message":"293","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":20},{"ruleId":"292","severity":1,"message":"309","line":8,"column":8,"nodeType":"294","messageId":"295","endLine":8,"endColumn":19},{"ruleId":"292","severity":1,"message":"342","line":9,"column":8,"nodeType":"294","messageId":"295","endLine":9,"endColumn":15},{"ruleId":"292","severity":1,"message":"343","line":11,"column":8,"nodeType":"294","messageId":"295","endLine":11,"endColumn":22},{"ruleId":"292","severity":1,"message":"312","line":18,"column":11,"nodeType":"294","messageId":"295","endLine":18,"endColumn":26},{"ruleId":"292","severity":1,"message":"344","line":20,"column":11,"nodeType":"294","messageId":"295","endLine":20,"endColumn":28},{"ruleId":"300","severity":1,"message":"345","line":46,"column":11,"nodeType":"302","endLine":46,"endColumn":13,"suggestions":"346"},{"ruleId":"316","severity":1,"message":"317","line":49,"column":5,"nodeType":"318","messageId":"319","endLine":49,"endColumn":37},{"ruleId":"292","severity":1,"message":"320","line":51,"column":12,"nodeType":"294","messageId":"295","endLine":51,"endColumn":21},{"ruleId":"292","severity":1,"message":"322","line":52,"column":12,"nodeType":"294","messageId":"295","endLine":52,"endColumn":25},{"ruleId":"292","severity":1,"message":"323","line":52,"column":27,"nodeType":"294","messageId":"295","endLine":52,"endColumn":43},{"ruleId":"292","severity":1,"message":"347","line":53,"column":11,"nodeType":"294","messageId":"295","endLine":53,"endColumn":25},{"ruleId":"292","severity":1,"message":"348","line":55,"column":25,"nodeType":"294","messageId":"295","endLine":55,"endColumn":39},{"ruleId":"292","severity":1,"message":"349","line":68,"column":14,"nodeType":"294","messageId":"295","endLine":68,"endColumn":28},{"ruleId":"292","severity":1,"message":"326","line":94,"column":11,"nodeType":"294","messageId":"295","endLine":94,"endColumn":21},{"ruleId":"327","severity":1,"message":"328","line":103,"column":42,"nodeType":"329","messageId":"330","endLine":103,"endColumn":44},{"ruleId":"350","severity":1,"message":"351","line":129,"column":21,"nodeType":"352","endLine":129,"endColumn":79},{"ruleId":"292","severity":1,"message":"293","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":20},{"ruleId":"292","severity":1,"message":"298","line":4,"column":10,"nodeType":"294","messageId":"295","endLine":4,"endColumn":18},{"ruleId":"292","severity":1,"message":"353","line":12,"column":13,"nodeType":"294","messageId":"295","endLine":12,"endColumn":26},{"ruleId":"292","severity":1,"message":"354","line":13,"column":19,"nodeType":"294","messageId":"295","endLine":13,"endColumn":31},{"ruleId":"292","severity":1,"message":"355","line":13,"column":40,"nodeType":"294","messageId":"295","endLine":13,"endColumn":53},{"ruleId":"292","severity":1,"message":"356","line":13,"column":89,"nodeType":"294","messageId":"295","endLine":13,"endColumn":105},{"ruleId":"292","severity":1,"message":"357","line":13,"column":118,"nodeType":"294","messageId":"295","endLine":13,"endColumn":133},{"ruleId":"292","severity":1,"message":"358","line":23,"column":19,"nodeType":"294","messageId":"295","endLine":23,"endColumn":36},{"ruleId":"292","severity":1,"message":"359","line":23,"column":45,"nodeType":"294","messageId":"295","endLine":23,"endColumn":63},{"ruleId":"292","severity":1,"message":"360","line":23,"column":104,"nodeType":"294","messageId":"295","endLine":23,"endColumn":125},{"ruleId":"292","severity":1,"message":"361","line":23,"column":138,"nodeType":"294","messageId":"295","endLine":23,"endColumn":158},{"ruleId":"300","severity":1,"message":"362","line":53,"column":7,"nodeType":"302","endLine":53,"endColumn":25,"suggestions":"363"},{"ruleId":"292","severity":1,"message":"364","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":19},{"ruleId":"292","severity":1,"message":"365","line":2,"column":17,"nodeType":"294","messageId":"295","endLine":2,"endColumn":26},{"ruleId":"292","severity":1,"message":"366","line":2,"column":28,"nodeType":"294","messageId":"295","endLine":2,"endColumn":36},{"ruleId":"292","severity":1,"message":"367","line":3,"column":34,"nodeType":"294","messageId":"295","endLine":3,"endColumn":57},{"ruleId":"292","severity":1,"message":"307","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":18},{"ruleId":"292","severity":1,"message":"299","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":15},{"ruleId":"292","severity":1,"message":"368","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":19},{"ruleId":"292","severity":1,"message":"369","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":18},{"ruleId":"292","severity":1,"message":"343","line":8,"column":8,"nodeType":"294","messageId":"295","endLine":8,"endColumn":22},{"ruleId":"292","severity":1,"message":"370","line":12,"column":3,"nodeType":"294","messageId":"295","endLine":12,"endColumn":20},{"ruleId":"292","severity":1,"message":"371","line":13,"column":3,"nodeType":"294","messageId":"295","endLine":13,"endColumn":16},{"ruleId":"292","severity":1,"message":"372","line":41,"column":11,"nodeType":"294","messageId":"295","endLine":41,"endColumn":19},{"ruleId":"292","severity":1,"message":"373","line":42,"column":12,"nodeType":"294","messageId":"295","endLine":42,"endColumn":21},{"ruleId":"292","severity":1,"message":"374","line":43,"column":12,"nodeType":"294","messageId":"295","endLine":43,"endColumn":21},{"ruleId":"292","severity":1,"message":"375","line":44,"column":17,"nodeType":"294","messageId":"295","endLine":44,"endColumn":29},{"ruleId":"292","severity":1,"message":"376","line":45,"column":16,"nodeType":"294","messageId":"295","endLine":45,"endColumn":27},{"ruleId":"292","severity":1,"message":"377","line":48,"column":12,"nodeType":"294","messageId":"295","endLine":48,"endColumn":23},{"ruleId":"292","severity":1,"message":"378","line":90,"column":15,"nodeType":"294","messageId":"295","endLine":90,"endColumn":22},{"ruleId":"292","severity":1,"message":"379","line":114,"column":11,"nodeType":"294","messageId":"295","endLine":114,"endColumn":20},{"ruleId":"292","severity":1,"message":"364","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":19},{"ruleId":"292","severity":1,"message":"365","line":2,"column":17,"nodeType":"294","messageId":"295","endLine":2,"endColumn":26},{"ruleId":"292","severity":1,"message":"307","line":3,"column":8,"nodeType":"294","messageId":"295","endLine":3,"endColumn":18},{"ruleId":"292","severity":1,"message":"299","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":15},{"ruleId":"292","severity":1,"message":"368","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":19},{"ruleId":"292","severity":1,"message":"369","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":18},{"ruleId":"292","severity":1,"message":"343","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":22},{"ruleId":"292","severity":1,"message":"293","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":20},{"ruleId":"292","severity":1,"message":"380","line":5,"column":22,"nodeType":"294","messageId":"295","endLine":5,"endColumn":44},{"ruleId":"292","severity":1,"message":"299","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":15},{"ruleId":"292","severity":1,"message":"297","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":20},{"ruleId":"292","severity":1,"message":"307","line":8,"column":8,"nodeType":"294","messageId":"295","endLine":8,"endColumn":18},{"ruleId":"292","severity":1,"message":"308","line":9,"column":8,"nodeType":"294","messageId":"295","endLine":9,"endColumn":21},{"ruleId":"292","severity":1,"message":"309","line":10,"column":8,"nodeType":"294","messageId":"295","endLine":10,"endColumn":19},{"ruleId":"292","severity":1,"message":"381","line":13,"column":10,"nodeType":"294","messageId":"295","endLine":13,"endColumn":21},{"ruleId":"292","severity":1,"message":"382","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":29},{"ruleId":"292","severity":1,"message":"383","line":14,"column":31,"nodeType":"294","messageId":"295","endLine":14,"endColumn":54},{"ruleId":"292","severity":1,"message":"384","line":26,"column":11,"nodeType":"294","messageId":"295","endLine":26,"endColumn":26},{"ruleId":"292","severity":1,"message":"385","line":27,"column":11,"nodeType":"294","messageId":"295","endLine":27,"endColumn":29},{"ruleId":"292","severity":1,"message":"312","line":28,"column":11,"nodeType":"294","messageId":"295","endLine":28,"endColumn":26},{"ruleId":"292","severity":1,"message":"386","line":29,"column":20,"nodeType":"294","messageId":"295","endLine":29,"endColumn":29},{"ruleId":"292","severity":1,"message":"387","line":58,"column":12,"nodeType":"294","messageId":"295","endLine":58,"endColumn":21},{"ruleId":"316","severity":1,"message":"317","line":61,"column":5,"nodeType":"318","messageId":"319","endLine":61,"endColumn":33},{"ruleId":"316","severity":1,"message":"317","line":66,"column":5,"nodeType":"318","messageId":"319","endLine":66,"endColumn":34},{"ruleId":"316","severity":1,"message":"317","line":91,"column":5,"nodeType":"318","messageId":"319","endLine":91,"endColumn":37},{"ruleId":"292","severity":1,"message":"320","line":93,"column":12,"nodeType":"294","messageId":"295","endLine":93,"endColumn":21},{"ruleId":"292","severity":1,"message":"321","line":93,"column":23,"nodeType":"294","messageId":"295","endLine":93,"endColumn":35},{"ruleId":"292","severity":1,"message":"322","line":94,"column":12,"nodeType":"294","messageId":"295","endLine":94,"endColumn":25},{"ruleId":"292","severity":1,"message":"323","line":94,"column":27,"nodeType":"294","messageId":"295","endLine":94,"endColumn":43},{"ruleId":"292","severity":1,"message":"347","line":95,"column":11,"nodeType":"294","messageId":"295","endLine":95,"endColumn":25},{"ruleId":"300","severity":1,"message":"337","line":102,"column":8,"nodeType":"302","endLine":102,"endColumn":21,"suggestions":"388"},{"ruleId":"327","severity":1,"message":"328","line":215,"column":48,"nodeType":"329","messageId":"330","endLine":215,"endColumn":50},{"ruleId":"300","severity":1,"message":"333","line":239,"column":8,"nodeType":"302","endLine":239,"endColumn":35,"suggestions":"389"},{"ruleId":"300","severity":1,"message":"390","line":270,"column":11,"nodeType":"302","endLine":270,"endColumn":59,"suggestions":"391"},{"ruleId":"292","severity":1,"message":"313","line":271,"column":24,"nodeType":"294","messageId":"295","endLine":271,"endColumn":37},{"ruleId":"292","severity":1,"message":"367","line":2,"column":34,"nodeType":"294","messageId":"295","endLine":2,"endColumn":57},{"ruleId":"292","severity":1,"message":"293","line":2,"column":59,"nodeType":"294","messageId":"295","endLine":2,"endColumn":69},{"ruleId":"292","severity":1,"message":"368","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":19},{"ruleId":"292","severity":1,"message":"384","line":36,"column":11,"nodeType":"294","messageId":"295","endLine":36,"endColumn":26},{"ruleId":"292","severity":1,"message":"392","line":37,"column":12,"nodeType":"294","messageId":"295","endLine":37,"endColumn":21},{"ruleId":"292","severity":1,"message":"393","line":37,"column":23,"nodeType":"294","messageId":"295","endLine":37,"endColumn":35},{"ruleId":"292","severity":1,"message":"394","line":38,"column":11,"nodeType":"294","messageId":"295","endLine":38,"endColumn":37},{"ruleId":"292","severity":1,"message":"385","line":39,"column":11,"nodeType":"294","messageId":"295","endLine":39,"endColumn":29},{"ruleId":"292","severity":1,"message":"395","line":41,"column":11,"nodeType":"294","messageId":"295","endLine":41,"endColumn":23},{"ruleId":"292","severity":1,"message":"396","line":42,"column":11,"nodeType":"294","messageId":"295","endLine":42,"endColumn":22},{"ruleId":"292","severity":1,"message":"397","line":43,"column":11,"nodeType":"294","messageId":"295","endLine":43,"endColumn":22},{"ruleId":"292","severity":1,"message":"398","line":45,"column":12,"nodeType":"294","messageId":"295","endLine":45,"endColumn":22},{"ruleId":"292","severity":1,"message":"399","line":45,"column":24,"nodeType":"294","messageId":"295","endLine":45,"endColumn":37},{"ruleId":"292","severity":1,"message":"378","line":223,"column":25,"nodeType":"294","messageId":"295","endLine":223,"endColumn":32},{"ruleId":"292","severity":1,"message":"379","line":247,"column":17,"nodeType":"294","messageId":"295","endLine":247,"endColumn":26},{"ruleId":"400","severity":1,"message":"401","line":310,"column":26,"nodeType":"402","messageId":"403","endLine":310,"endColumn":28},{"ruleId":"292","severity":1,"message":"404","line":421,"column":20,"nodeType":"294","messageId":"295","endLine":421,"endColumn":31},{"ruleId":"316","severity":1,"message":"405","line":474,"column":1,"nodeType":"318","messageId":"406","endLine":488,"endColumn":14},{"ruleId":"292","severity":1,"message":"407","line":3035,"column":8,"nodeType":"294","messageId":"295","endLine":3035,"endColumn":17},"no-unused-vars","'useMoralis' is defined but never used.","Identifier","unusedVar","'useMoralisWeb3Api' is defined but never used.","'Authenticate' is defined but never used.","'useChain' is defined but never used.","'Moralis' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'web3Modal'. Either include it or remove the dependency array.","ArrayExpression",["408"],"React Hook useCallback has missing dependencies: 'logoutOfWeb3Modal' and 'web3Modal'. Either include them or remove the dependency array.",["409"],["410"],"'spotNFTAbi' is defined but never used.","'spotTraitsAbi' is defined but never used.","'SetApproval' is defined but never used.","'userAddress' is assigned a value but never used.","'nfTombstoneContract' is assigned a value but never used.","'spotNFTContract' is assigned a value but never used.","'setSavedImage' is assigned a value but never used.","'nfTombstoneMetaData' is assigned a value but never used.","'tombstoneId' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'apiLoaded' is assigned a value but never used.","'setApiLoaded' is assigned a value but never used.","'checkMyTraits' is assigned a value but never used.","'setCheckMyTraits' is assigned a value but never used.","'getTraits' is defined but never used.","'updateText' is defined but never used.","'searchText' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'height' is assigned a value but never used.","'width' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'windowHeight' and 'windowWidth'. Either exclude them or remove the dependency array.",["411"],"React Hook useEffect has missing dependencies: 'drawImage' and 'valueX2'. Either include them or remove the dependency array.",["412"],"React Hook useEffect has a missing dependency: 'updateTraitMetaData'. Either include it or remove the dependency array.",["413"],"'activateTombstone' is defined but never used.","'useRef' is defined but never used.","'useCallback' is defined but never used.","'Engrave' is defined but never used.","'nfTombstoneABI' is defined but never used.","'contractProcessor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsersNfts'. Either include it or remove the dependency array.",["414"],"'unnamedNFTdata' is assigned a value but never used.","'setChosenTrait' is assigned a value but never used.","'getNFTsAddress' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'switchNetwork' is assigned a value but never used.","'approvalData' is assigned a value but never used.","'approvalError' is assigned a value but never used.","'approvalFetching' is assigned a value but never used.","'approvalLoading' is assigned a value but never used.","'checkApprovedData' is assigned a value but never used.","'checkApprovedError' is assigned a value but never used.","'checkApprovedFetching' is assigned a value but never used.","'checkApprovedLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkApprovedFetch'. Either include it or remove the dependency array.",["415"],"'stringify' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useMoralisCloudFunction' is defined but never used.","'unnamedData' is defined but never used.","'unnamedAbi' is defined but never used.","'TOMBSTONE_ADDRESS' is defined but never used.","'TOMBSTONE_ABI' is defined but never used.","'mintData' is assigned a value but never used.","'mintError' is assigned a value but never used.","'mintFetch' is assigned a value but never used.","'mintFetching' is assigned a value but never used.","'mintLoading' is assigned a value but never used.","'checkTraits' is defined but never used.","'options' is assigned a value but never used.","'signature' is assigned a value but never used.","'useWeb3ExecuteFunction' is defined but never used.","'UNNAMED_ABI' is defined but never used.","'UNNAMEDBRANDING_ABI' is defined but never used.","'UNNAMEDBRANDING_ADDRESS' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'unnamedNFTContract' is assigned a value but never used.","'setFilter' is assigned a value but never used.","'unnamedID' is assigned a value but never used.",["416"],["417"],"React Hook useEffect has a missing dependency: 'drawImage'. Either include it or remove the dependency array.",["418"],"'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'unnamedNFTBrandingContract' is assigned a value but never used.","'spotContract' is assigned a value but never used.","'chosenTrait' is assigned a value but never used.","'chosenBrand' is assigned a value but never used.","'isApproved' is assigned a value but never used.","'setIsApproved' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setApproval' is defined but never used.","Block is redundant.","redundantBlock","'image3035' is defined but never used.",{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"kind":"423","justification":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"429","fix":"435"},{"desc":"425","fix":"436"},{"desc":"437","fix":"438"},"Update the dependencies array to be: [loadWeb3Modal, web3Modal]",{"range":"439","text":"440"},"Update the dependencies array to be: [logoutOfWeb3Modal, web3Modal]",{"range":"441","text":"442"},"directive","","Update the dependencies array to be: []",{"range":"443","text":"444"},"Update the dependencies array to be: [canvasImage, canvas, windowWidth, windowHeight, xInput, yInput, xInputText, yInputText, textinput, textinputText, fontSize, fontSizeText, textFontOptionsText, textFontStyleOptionsText, font, fontText, fontText1, drawImage, valueX2]",{"range":"445","text":"446"},"Update the dependencies array to be: [chosenTrait, updateTraitMetaData]",{"range":"447","text":"448"},"Update the dependencies array to be: [fetchUsersNfts]",{"range":"449","text":"450"},"Update the dependencies array to be: [account, chainId, checkApprovedFetch]",{"range":"451","text":"452"},{"range":"453","text":"448"},{"range":"454","text":"444"},"Update the dependencies array to be: [canvasImage, canvas, windowWidth, windowHeight, drawImage]",{"range":"455","text":"456"},[2486,2501],"[loadWeb3Modal, web3Modal]",[2356,2373],"[logoutOfWeb3Modal, web3Modal]",[13723,13750],"[]",[15440,15743],"[canvasImage, canvas, windowWidth, windowHeight, xInput, yInput, xInputText, yInputText, textinput, textinputText, fontSize, fontSizeText, textFontOptionsText, textFontStyleOptionsText, font, fontText, fontText1, drawImage, valueX2]",[15824,15837],"[chosenTrait, updateTraitMetaData]",[1621,1623],"[fetchUsersNfts]",[1998,2016],"[account, chainId, checkApprovedFetch]",[3454,3467],[8771,8798],[9638,9686],"[canvasImage, canvas, windowWidth, windowHeight, drawImage]"]